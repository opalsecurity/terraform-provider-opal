// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/internal/utils"
)

type FieldValueType string

const (
	FieldValueTypeStr     FieldValueType = "str"
	FieldValueTypeBoolean FieldValueType = "boolean"
)

type FieldValue struct {
	Str     *string `queryParam:"inline,name=field_value"`
	Boolean *bool   `queryParam:"inline,name=field_value"`

	Type FieldValueType
}

func CreateFieldValueStr(str string) FieldValue {
	typ := FieldValueTypeStr

	return FieldValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateFieldValueBoolean(boolean bool) FieldValue {
	typ := FieldValueTypeBoolean

	return FieldValue{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *FieldValue) UnmarshalJSON(data []byte) error {

	var candidates []utils.UnionCandidate

	// Collect all valid candidates
	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		candidates = append(candidates, utils.UnionCandidate{
			Type:  FieldValueTypeStr,
			Value: &str,
		})
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		candidates = append(candidates, utils.UnionCandidate{
			Type:  FieldValueTypeBoolean,
			Value: &boolean,
		})
	}

	if len(candidates) == 0 {
		return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldValue", string(data))
	}

	// Pick the best candidate using multi-stage filtering
	best := utils.PickBestCandidate(candidates)
	if best == nil {
		return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldValue", string(data))
	}

	// Set the union type and value based on the best candidate
	u.Type = best.Type.(FieldValueType)
	switch best.Type {
	case FieldValueTypeStr:
		u.Str = best.Value.(*string)
		return nil
	case FieldValueTypeBoolean:
		u.Boolean = best.Value.(*bool)
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FieldValue", string(data))
}

func (u FieldValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type FieldValue: all fields are null")
}

type RequestCustomFieldResponse struct {
	FieldName string `json:"field_name"`
	// The type of the custom request field.
	FieldType  RequestTemplateCustomFieldTypeEnum `json:"field_type"`
	FieldValue FieldValue                         `json:"field_value"`
}

func (r *RequestCustomFieldResponse) GetFieldName() string {
	if r == nil {
		return ""
	}
	return r.FieldName
}

func (r *RequestCustomFieldResponse) GetFieldType() RequestTemplateCustomFieldTypeEnum {
	if r == nil {
		return RequestTemplateCustomFieldTypeEnum("")
	}
	return r.FieldType
}

func (r *RequestCustomFieldResponse) GetFieldValue() FieldValue {
	if r == nil {
		return FieldValue{}
	}
	return r.FieldValue
}
