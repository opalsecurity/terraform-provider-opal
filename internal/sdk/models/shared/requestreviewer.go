// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RequestReviewerStatus - The status of this reviewer's review
type RequestReviewerStatus string

const (
	RequestReviewerStatusPending  RequestReviewerStatus = "PENDING"
	RequestReviewerStatusApproved RequestReviewerStatus = "APPROVED"
	RequestReviewerStatusRejected RequestReviewerStatus = "REJECTED"
)

func (e RequestReviewerStatus) ToPointer() *RequestReviewerStatus {
	return &e
}
func (e *RequestReviewerStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "APPROVED":
		fallthrough
	case "REJECTED":
		*e = RequestReviewerStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestReviewerStatus: %v", v)
	}
}

// RequestReviewer - A reviewer in a request stage
type RequestReviewer struct {
	// The unique identifier of the reviewer
	ID string `json:"id"`
	// The status of this reviewer's review
	Status RequestReviewerStatus `json:"status"`
}

func (o *RequestReviewer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RequestReviewer) GetStatus() RequestReviewerStatus {
	if o == nil {
		return RequestReviewerStatus("")
	}
	return o.Status
}
