// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Status - The status of the access rule.
type Status string

const (
	StatusActive Status = "ACTIVE"
	StatusPaused Status = "PAUSED"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "PAUSED":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

// AccessRule - # Access Rule Object
// ### Description
// The `AccessRule` object is used to represent an access rule configuration.
//
// ### Usage Example
// Get access rule configurations from the `GET Access Rule Configs` endpoint.
type AccessRule struct {
	// The ID of the owner of the group.
	AdminOwnerID string `json:"admin_owner_id"`
	// A description of the group.
	Description string `json:"description"`
	// The ID (group ID) of the access rule.
	ID string `json:"access_rule_id"`
	// The name of the access rule.
	Name        string      `json:"name"`
	RuleClauses RuleClauses `json:"ruleClauses"`
	// The status of the access rule.
	Status Status `json:"status"`
}

func (o *AccessRule) GetAdminOwnerID() string {
	if o == nil {
		return ""
	}
	return o.AdminOwnerID
}

func (o *AccessRule) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *AccessRule) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AccessRule) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AccessRule) GetRuleClauses() RuleClauses {
	if o == nil {
		return RuleClauses{}
	}
	return o.RuleClauses
}

func (o *AccessRule) GetStatus() Status {
	if o == nil {
		return Status("")
	}
	return o.Status
}
