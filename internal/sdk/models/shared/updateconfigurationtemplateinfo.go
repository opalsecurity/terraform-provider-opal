// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

// # UpdateConfigurationTemplateInfo Object
// ### Description
// The `ConfigurationTemplate` object is used to represent an update to a configuration template.
//
// ### Usage Example
// Use in the `PUT Configuration Templates` endpoint.
type UpdateConfigurationTemplateInfo struct {
	// The ID of the owner of the configuration template.
	AdminOwnerID *string `json:"admin_owner_id,omitempty"`
	// The IDs of the break glass users linked to the configuration template.
	BreakGlassUserIds []string `json:"break_glass_user_ids,omitempty"`
	// The ID of the configuration template.
	ConfigurationTemplateID string `json:"configuration_template_id"`
	// Custom request notification sent upon request approval for this configuration template.
	CustomRequestNotification *string `json:"custom_request_notification,omitempty"`
	// The IDs of the audit message channels linked to the configuration template.
	LinkedAuditMessageChannelIds []string `json:"linked_audit_message_channel_ids,omitempty"`
	// The IDs of the on-call schedules linked to the configuration template.
	MemberOnCallScheduleIds []string `json:"member_oncall_schedule_ids,omitempty"`
	// The name of the configuration template.
	Name *string `json:"name,omitempty"`
	// The request configuration list linked to the configuration template.
	RequestConfigurations []RequestConfiguration `json:"request_configurations,omitempty"`
	// A bool representing whether or not to require MFA for reviewers to approve requests for this configuration template.
	RequireMfaToApprove *bool `json:"require_mfa_to_approve,omitempty"`
	// A bool representing whether or not to require MFA to connect to resources associated with this configuration template.
	RequireMfaToConnect *bool `json:"require_mfa_to_connect,omitempty"`
	// Configuration for ticket propagation, when enabled, a ticket will be created for access changes related to the users in this resource.
	TicketPropagation *TicketPropagationConfiguration `json:"ticket_propagation,omitempty"`
	// Visibility infomation of an entity.
	Visibility *VisibilityInfo `json:"visibility,omitempty"`
}

func (u *UpdateConfigurationTemplateInfo) GetAdminOwnerID() *string {
	if u == nil {
		return nil
	}
	return u.AdminOwnerID
}

func (u *UpdateConfigurationTemplateInfo) GetBreakGlassUserIds() []string {
	if u == nil {
		return nil
	}
	return u.BreakGlassUserIds
}

func (u *UpdateConfigurationTemplateInfo) GetConfigurationTemplateID() string {
	if u == nil {
		return ""
	}
	return u.ConfigurationTemplateID
}

func (u *UpdateConfigurationTemplateInfo) GetCustomRequestNotification() *string {
	if u == nil {
		return nil
	}
	return u.CustomRequestNotification
}

func (u *UpdateConfigurationTemplateInfo) GetLinkedAuditMessageChannelIds() []string {
	if u == nil {
		return nil
	}
	return u.LinkedAuditMessageChannelIds
}

func (u *UpdateConfigurationTemplateInfo) GetMemberOnCallScheduleIds() []string {
	if u == nil {
		return nil
	}
	return u.MemberOnCallScheduleIds
}

func (u *UpdateConfigurationTemplateInfo) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpdateConfigurationTemplateInfo) GetRequestConfigurations() []RequestConfiguration {
	if u == nil {
		return nil
	}
	return u.RequestConfigurations
}

func (u *UpdateConfigurationTemplateInfo) GetRequireMfaToApprove() *bool {
	if u == nil {
		return nil
	}
	return u.RequireMfaToApprove
}

func (u *UpdateConfigurationTemplateInfo) GetRequireMfaToConnect() *bool {
	if u == nil {
		return nil
	}
	return u.RequireMfaToConnect
}

func (u *UpdateConfigurationTemplateInfo) GetTicketPropagation() *TicketPropagationConfiguration {
	if u == nil {
		return nil
	}
	return u.TicketPropagation
}

func (u *UpdateConfigurationTemplateInfo) GetVisibility() *VisibilityInfo {
	if u == nil {
		return nil
	}
	return u.Visibility
}
