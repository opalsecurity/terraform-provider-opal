// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RiskSensitivity - The risk sensitivity level for the group. When an override is set, this field will match that.
type RiskSensitivity string

const (
	RiskSensitivityUnknown  RiskSensitivity = "UNKNOWN"
	RiskSensitivityCritical RiskSensitivity = "CRITICAL"
	RiskSensitivityHigh     RiskSensitivity = "HIGH"
	RiskSensitivityMedium   RiskSensitivity = "MEDIUM"
	RiskSensitivityLow      RiskSensitivity = "LOW"
	RiskSensitivityNone     RiskSensitivity = "NONE"
)

func (e RiskSensitivity) ToPointer() *RiskSensitivity {
	return &e
}
func (e *RiskSensitivity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "CRITICAL":
		fallthrough
	case "HIGH":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "LOW":
		fallthrough
	case "NONE":
		*e = RiskSensitivity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RiskSensitivity: %v", v)
	}
}

// RiskSensitivityOverride - Indicates the level of potential impact misuse or unauthorized access may incur.
type RiskSensitivityOverride string

const (
	RiskSensitivityOverrideUnknown  RiskSensitivityOverride = "UNKNOWN"
	RiskSensitivityOverrideCritical RiskSensitivityOverride = "CRITICAL"
	RiskSensitivityOverrideHigh     RiskSensitivityOverride = "HIGH"
	RiskSensitivityOverrideMedium   RiskSensitivityOverride = "MEDIUM"
	RiskSensitivityOverrideLow      RiskSensitivityOverride = "LOW"
	RiskSensitivityOverrideNone     RiskSensitivityOverride = "NONE"
)

func (e RiskSensitivityOverride) ToPointer() *RiskSensitivityOverride {
	return &e
}
func (e *RiskSensitivityOverride) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "CRITICAL":
		fallthrough
	case "HIGH":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "LOW":
		fallthrough
	case "NONE":
		*e = RiskSensitivityOverride(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RiskSensitivityOverride: %v", v)
	}
}

// # Group Object
// ### Description
// The `Group` object is used to represent a group.
//
// ### Usage Example
// Update from the `UPDATE Groups` endpoint.
type Group struct {
	// The ID of the owner of the group.
	AdminOwnerID *string `json:"admin_owner_id,omitempty"`
	// The ID of the group's app.
	AppID *string `json:"app_id,omitempty"`
	// Custom request notification sent to the requester when the request is approved.
	CustomRequestNotification *string `json:"custom_request_notification,omitempty"`
	// A description of the group.
	Description *string `json:"description,omitempty"`
	// The ID of the associated group binding.
	GroupBindingID *string `json:"group_binding_id,omitempty"`
	// A list of User IDs for the group leaders of the group
	GroupLeaderUserIds []string `json:"group_leader_user_ids,omitempty"`
	// The type of the group.
	GroupType *GroupTypeEnum `json:"group_type,omitempty"`
	// The ID of the group.
	ID string `json:"group_id"`
	// The name of the group.
	Name *string `json:"name,omitempty"`
	// Information that defines the remote group. This replaces the deprecated remote_id and metadata fields.
	RemoteInfo *GroupRemoteInfo `json:"remote_info,omitempty"`
	// The name of the remote.
	RemoteName *string `json:"remote_name,omitempty"`
	// A list of request configurations for this group.
	RequestConfigurations []RequestConfiguration `json:"request_configurations,omitempty"`
	// A bool representing whether or not to require MFA for reviewers to approve requests for this group.
	RequireMfaToApprove *bool `json:"require_mfa_to_approve,omitempty"`
	// The risk sensitivity level for the group. When an override is set, this field will match that.
	RiskSensitivity         *RiskSensitivity         `json:"risk_sensitivity,omitempty"`
	RiskSensitivityOverride *RiskSensitivityOverride `json:"risk_sensitivity_override,omitempty"`
}

func (o *Group) GetAdminOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.AdminOwnerID
}

func (o *Group) GetAppID() *string {
	if o == nil {
		return nil
	}
	return o.AppID
}

func (o *Group) GetCustomRequestNotification() *string {
	if o == nil {
		return nil
	}
	return o.CustomRequestNotification
}

func (o *Group) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Group) GetGroupBindingID() *string {
	if o == nil {
		return nil
	}
	return o.GroupBindingID
}

func (o *Group) GetGroupLeaderUserIds() []string {
	if o == nil {
		return nil
	}
	return o.GroupLeaderUserIds
}

func (o *Group) GetGroupType() *GroupTypeEnum {
	if o == nil {
		return nil
	}
	return o.GroupType
}

func (o *Group) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Group) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Group) GetRemoteInfo() *GroupRemoteInfo {
	if o == nil {
		return nil
	}
	return o.RemoteInfo
}

func (o *Group) GetRemoteName() *string {
	if o == nil {
		return nil
	}
	return o.RemoteName
}

func (o *Group) GetRequestConfigurations() []RequestConfiguration {
	if o == nil {
		return nil
	}
	return o.RequestConfigurations
}

func (o *Group) GetRequireMfaToApprove() *bool {
	if o == nil {
		return nil
	}
	return o.RequireMfaToApprove
}

func (o *Group) GetRiskSensitivity() *RiskSensitivity {
	if o == nil {
		return nil
	}
	return o.RiskSensitivity
}

func (o *Group) GetRiskSensitivityOverride() *RiskSensitivityOverride {
	if o == nil {
		return nil
	}
	return o.RiskSensitivityOverride
}
