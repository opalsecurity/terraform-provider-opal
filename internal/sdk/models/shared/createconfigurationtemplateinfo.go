// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/internal/utils"
)

// # CreateConfigurationTemplateInfo Object
// ### Description
// The `CreateConfigurationTemplateInfo` object is used to store creation info for a configuration template.
//
// ### Usage Example
// Use in the `POST Configuration Templates` endpoint.
type CreateConfigurationTemplateInfo struct {
	// The ID of the owner of the configuration template.
	AdminOwnerID string `json:"admin_owner_id"`
	// The IDs of the break glass users linked to the configuration template.
	BreakGlassUserIds []string `json:"break_glass_user_ids,omitempty"`
	// Custom request notification sent upon request approval for this configuration template.
	CustomRequestNotification *string `json:"custom_request_notification,omitempty"`
	// The IDs of the audit message channels linked to the configuration template.
	LinkedAuditMessageChannelIds []string `json:"linked_audit_message_channel_ids,omitempty"`
	// The IDs of the on-call schedules linked to the configuration template.
	MemberOnCallScheduleIds []string `json:"member_oncall_schedule_ids"`
	// The name of the configuration template.
	Name string `json:"name"`
	// The request configuration list of the configuration template. If not provided, the default request configuration will be used.
	RequestConfigurations []RequestConfiguration `json:"request_configurations,omitempty"`
	// A bool representing whether or not to require MFA for reviewers to approve requests for this configuration template.
	RequireMfaToApprove *bool `default:"false" json:"require_mfa_to_approve"`
	// A bool representing whether or not to require MFA to connect to resources associated with this configuration template.
	RequireMfaToConnect bool `json:"require_mfa_to_connect"`
	// Configuration for ticket propagation, when enabled, a ticket will be created for access changes related to the users in this resource.
	TicketPropagation *TicketPropagationConfiguration `json:"ticket_propagation,omitempty"`
	// Visibility infomation of an entity.
	Visibility VisibilityInfo `json:"visibility"`
}

func (c CreateConfigurationTemplateInfo) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateConfigurationTemplateInfo) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"admin_owner_id", "name", "require_mfa_to_connect", "visibility"}); err != nil {
		return err
	}
	return nil
}

func (c *CreateConfigurationTemplateInfo) GetAdminOwnerID() string {
	if c == nil {
		return ""
	}
	return c.AdminOwnerID
}

func (c *CreateConfigurationTemplateInfo) GetBreakGlassUserIds() []string {
	if c == nil {
		return nil
	}
	return c.BreakGlassUserIds
}

func (c *CreateConfigurationTemplateInfo) GetCustomRequestNotification() *string {
	if c == nil {
		return nil
	}
	return c.CustomRequestNotification
}

func (c *CreateConfigurationTemplateInfo) GetLinkedAuditMessageChannelIds() []string {
	if c == nil {
		return nil
	}
	return c.LinkedAuditMessageChannelIds
}

func (c *CreateConfigurationTemplateInfo) GetMemberOnCallScheduleIds() []string {
	if c == nil {
		return nil
	}
	return c.MemberOnCallScheduleIds
}

func (c *CreateConfigurationTemplateInfo) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CreateConfigurationTemplateInfo) GetRequestConfigurations() []RequestConfiguration {
	if c == nil {
		return nil
	}
	return c.RequestConfigurations
}

func (c *CreateConfigurationTemplateInfo) GetRequireMfaToApprove() *bool {
	if c == nil {
		return nil
	}
	return c.RequireMfaToApprove
}

func (c *CreateConfigurationTemplateInfo) GetRequireMfaToConnect() bool {
	if c == nil {
		return false
	}
	return c.RequireMfaToConnect
}

func (c *CreateConfigurationTemplateInfo) GetTicketPropagation() *TicketPropagationConfiguration {
	if c == nil {
		return nil
	}
	return c.TicketPropagation
}

func (c *CreateConfigurationTemplateInfo) GetVisibility() VisibilityInfo {
	if c == nil {
		return VisibilityInfo{}
	}
	return c.Visibility
}
