// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

// AwsAccount - Remote info for AWS account.
type AwsAccount struct {
	// The id of the AWS account.
	AccountID string `json:"account_id"`
	// The id of the AWS organizational unit. Required only if customer has OUs enabled.
	OrganizationalUnitID *string `json:"organizational_unit_id,omitempty"`
}

func (a *AwsAccount) GetAccountID() string {
	if a == nil {
		return ""
	}
	return a.AccountID
}

func (a *AwsAccount) GetOrganizationalUnitID() *string {
	if a == nil {
		return nil
	}
	return a.OrganizationalUnitID
}

// AwsEc2Instance - Remote info for AWS EC2 instance.
type AwsEc2Instance struct {
	// The id of the AWS account. Required for AWS Organizations.
	AccountID *string `json:"account_id,omitempty"`
	// The instanceId of the EC2 instance.
	InstanceID string `json:"instance_id"`
	// The region of the EC2 instance.
	Region string `json:"region"`
}

func (a *AwsEc2Instance) GetAccountID() *string {
	if a == nil {
		return nil
	}
	return a.AccountID
}

func (a *AwsEc2Instance) GetInstanceID() string {
	if a == nil {
		return ""
	}
	return a.InstanceID
}

func (a *AwsEc2Instance) GetRegion() string {
	if a == nil {
		return ""
	}
	return a.Region
}

// AwsEksCluster - Remote info for AWS EKS cluster.
type AwsEksCluster struct {
	// The id of the AWS account. Required for AWS Organizations.
	AccountID *string `json:"account_id,omitempty"`
	// The ARN of the EKS cluster.
	Arn string `json:"arn"`
}

func (a *AwsEksCluster) GetAccountID() *string {
	if a == nil {
		return nil
	}
	return a.AccountID
}

func (a *AwsEksCluster) GetArn() string {
	if a == nil {
		return ""
	}
	return a.Arn
}

// AwsIamRole - Remote info for AWS IAM role.
type AwsIamRole struct {
	// The id of the AWS account. Required for AWS Organizations.
	AccountID *string `json:"account_id,omitempty"`
	// The ARN of the IAM role.
	Arn string `json:"arn"`
}

func (a *AwsIamRole) GetAccountID() *string {
	if a == nil {
		return nil
	}
	return a.AccountID
}

func (a *AwsIamRole) GetArn() string {
	if a == nil {
		return ""
	}
	return a.Arn
}

// AwsOrganizationalUnit - Remote info for AWS organizational unit.
type AwsOrganizationalUnit struct {
	// The id of the AWS organizational unit that is being created.
	OrganizationalUnitID string `json:"organizational_unit_id"`
	// The id of the parent organizational unit.
	ParentID *string `json:"parent_id,omitempty"`
}

func (a *AwsOrganizationalUnit) GetOrganizationalUnitID() string {
	if a == nil {
		return ""
	}
	return a.OrganizationalUnitID
}

func (a *AwsOrganizationalUnit) GetParentID() *string {
	if a == nil {
		return nil
	}
	return a.ParentID
}

// AwsPermissionSet - Remote info for AWS Identity Center permission set.
type AwsPermissionSet struct {
	// The ID of an AWS account to which this permission set is provisioned.
	AccountID string `json:"account_id"`
	// The ARN of the permission set.
	Arn string `json:"arn"`
}

func (a *AwsPermissionSet) GetAccountID() string {
	if a == nil {
		return ""
	}
	return a.AccountID
}

func (a *AwsPermissionSet) GetArn() string {
	if a == nil {
		return ""
	}
	return a.Arn
}

// AwsRdsInstance - Remote info for AWS RDS instance.
type AwsRdsInstance struct {
	// The id of the AWS account. Required for AWS Organizations.
	AccountID *string `json:"account_id,omitempty"`
	// The instanceId of the RDS instance.
	InstanceID string `json:"instance_id"`
	// The region of the RDS instance.
	Region string `json:"region"`
	// The resourceId of the RDS instance.
	ResourceID string `json:"resource_id"`
}

func (a *AwsRdsInstance) GetAccountID() *string {
	if a == nil {
		return nil
	}
	return a.AccountID
}

func (a *AwsRdsInstance) GetInstanceID() string {
	if a == nil {
		return ""
	}
	return a.InstanceID
}

func (a *AwsRdsInstance) GetRegion() string {
	if a == nil {
		return ""
	}
	return a.Region
}

func (a *AwsRdsInstance) GetResourceID() string {
	if a == nil {
		return ""
	}
	return a.ResourceID
}

// CoupaRole - Remote info for Coupa role.
type CoupaRole struct {
	// The id of the role.
	RoleID string `json:"role_id"`
}

func (c *CoupaRole) GetRoleID() string {
	if c == nil {
		return ""
	}
	return c.RoleID
}

// CustomConnector - Remote info for a custom connector resource.
type CustomConnector struct {
	// A bool representing whether or not the resource can have usage data.
	CanHaveUsageEvents bool `json:"can_have_usage_events"`
	// The id of the resource in the end system
	RemoteResourceID string `json:"remote_resource_id"`
}

func (c *CustomConnector) GetCanHaveUsageEvents() bool {
	if c == nil {
		return false
	}
	return c.CanHaveUsageEvents
}

func (c *CustomConnector) GetRemoteResourceID() string {
	if c == nil {
		return ""
	}
	return c.RemoteResourceID
}

// DatastaxAstraRole - Remote info for an Astra role.
type DatastaxAstraRole struct {
	// The id of the role.
	RoleID string `json:"role_id"`
}

func (d *DatastaxAstraRole) GetRoleID() string {
	if d == nil {
		return ""
	}
	return d.RoleID
}

// GcpBigQueryDataset - Remote info for GCP BigQuery Dataset.
type GcpBigQueryDataset struct {
	// The id of the dataset.
	DatasetID string `json:"dataset_id"`
	// The id of the project the dataset is in.
	ProjectID string `json:"project_id"`
}

func (g *GcpBigQueryDataset) GetDatasetID() string {
	if g == nil {
		return ""
	}
	return g.DatasetID
}

func (g *GcpBigQueryDataset) GetProjectID() string {
	if g == nil {
		return ""
	}
	return g.ProjectID
}

// GcpBigQueryTable - Remote info for GCP BigQuery Table.
type GcpBigQueryTable struct {
	// The id of the dataset the table is in.
	DatasetID string `json:"dataset_id"`
	// The id of the project the table is in.
	ProjectID string `json:"project_id"`
	// The id of the table.
	TableID string `json:"table_id"`
}

func (g *GcpBigQueryTable) GetDatasetID() string {
	if g == nil {
		return ""
	}
	return g.DatasetID
}

func (g *GcpBigQueryTable) GetProjectID() string {
	if g == nil {
		return ""
	}
	return g.ProjectID
}

func (g *GcpBigQueryTable) GetTableID() string {
	if g == nil {
		return ""
	}
	return g.TableID
}

// GcpBucket - Remote info for GCP bucket.
type GcpBucket struct {
	// The id of the bucket.
	BucketID string `json:"bucket_id"`
}

func (g *GcpBucket) GetBucketID() string {
	if g == nil {
		return ""
	}
	return g.BucketID
}

// GcpComputeInstance - Remote info for GCP compute instance.
type GcpComputeInstance struct {
	// The id of the instance.
	InstanceID string `json:"instance_id"`
	// The id of the project the instance is in.
	ProjectID string `json:"project_id"`
	// The zone the instance is in.
	Zone string `json:"zone"`
}

func (g *GcpComputeInstance) GetInstanceID() string {
	if g == nil {
		return ""
	}
	return g.InstanceID
}

func (g *GcpComputeInstance) GetProjectID() string {
	if g == nil {
		return ""
	}
	return g.ProjectID
}

func (g *GcpComputeInstance) GetZone() string {
	if g == nil {
		return ""
	}
	return g.Zone
}

// GcpFolder - Remote info for GCP folder.
type GcpFolder struct {
	// The id of the folder.
	FolderID string `json:"folder_id"`
}

func (g *GcpFolder) GetFolderID() string {
	if g == nil {
		return ""
	}
	return g.FolderID
}

// GcpGkeCluster - Remote info for GCP GKE cluster.
type GcpGkeCluster struct {
	// The name of the GKE cluster.
	ClusterName string `json:"cluster_name"`
}

func (g *GcpGkeCluster) GetClusterName() string {
	if g == nil {
		return ""
	}
	return g.ClusterName
}

// GcpOrganization - Remote info for GCP organization.
type GcpOrganization struct {
	// The id of the organization.
	OrganizationID string `json:"organization_id"`
}

func (g *GcpOrganization) GetOrganizationID() string {
	if g == nil {
		return ""
	}
	return g.OrganizationID
}

// GcpProject - Remote info for GCP project.
type GcpProject struct {
	// The id of the project.
	ProjectID string `json:"project_id"`
}

func (g *GcpProject) GetProjectID() string {
	if g == nil {
		return ""
	}
	return g.ProjectID
}

// GcpServiceAccount - Remote info for a GCP service account.
type GcpServiceAccount struct {
	// The email of the service account.
	Email string `json:"email"`
	// The id of the project the service account is in.
	ProjectID string `json:"project_id"`
	// The id of the service account.
	ServiceAccountID string `json:"service_account_id"`
}

func (g *GcpServiceAccount) GetEmail() string {
	if g == nil {
		return ""
	}
	return g.Email
}

func (g *GcpServiceAccount) GetProjectID() string {
	if g == nil {
		return ""
	}
	return g.ProjectID
}

func (g *GcpServiceAccount) GetServiceAccountID() string {
	if g == nil {
		return ""
	}
	return g.ServiceAccountID
}

// GcpSQLInstance - Remote info for GCP SQL instance.
type GcpSQLInstance struct {
	// The id of the SQL instance.
	InstanceID string `json:"instance_id"`
	// The id of the project the instance is in.
	ProjectID string `json:"project_id"`
}

func (g *GcpSQLInstance) GetInstanceID() string {
	if g == nil {
		return ""
	}
	return g.InstanceID
}

func (g *GcpSQLInstance) GetProjectID() string {
	if g == nil {
		return ""
	}
	return g.ProjectID
}

// GithubOrgRole - Remote info for GitHub organization role.
type GithubOrgRole struct {
	// The id of the role.
	RoleID string `json:"role_id"`
}

func (g *GithubOrgRole) GetRoleID() string {
	if g == nil {
		return ""
	}
	return g.RoleID
}

// GithubRepo - Remote info for GitHub repository.
type GithubRepo struct {
	// The name of the repository.
	RepoName string `json:"repo_name"`
}

func (g *GithubRepo) GetRepoName() string {
	if g == nil {
		return ""
	}
	return g.RepoName
}

// GitlabProject - Remote info for Gitlab project.
type GitlabProject struct {
	// The id of the project.
	ProjectID string `json:"project_id"`
}

func (g *GitlabProject) GetProjectID() string {
	if g == nil {
		return ""
	}
	return g.ProjectID
}

// GoogleWorkspaceRole - Remote info for GCP workspace role.
type GoogleWorkspaceRole struct {
	// The id of the role.
	RoleID string `json:"role_id"`
}

func (g *GoogleWorkspaceRole) GetRoleID() string {
	if g == nil {
		return ""
	}
	return g.RoleID
}

// OktaApp - Remote info for Okta directory app.
type OktaApp struct {
	// The id of the app.
	AppID string `json:"app_id"`
}

func (o *OktaApp) GetAppID() string {
	if o == nil {
		return ""
	}
	return o.AppID
}

// OktaCustomRole - Remote info for Okta directory custom role.
type OktaCustomRole struct {
	// The id of the custom role.
	RoleID string `json:"role_id"`
}

func (o *OktaCustomRole) GetRoleID() string {
	if o == nil {
		return ""
	}
	return o.RoleID
}

// OktaStandardRole - Remote info for Okta directory standard role.
type OktaStandardRole struct {
	// The type of the standard role.
	RoleType string `json:"role_type"`
}

func (o *OktaStandardRole) GetRoleType() string {
	if o == nil {
		return ""
	}
	return o.RoleType
}

// PagerdutyRole - Remote info for Pagerduty role.
type PagerdutyRole struct {
	// The name of the role.
	RoleName string `json:"role_name"`
}

func (p *PagerdutyRole) GetRoleName() string {
	if p == nil {
		return ""
	}
	return p.RoleName
}

// SalesforcePermissionSet - Remote info for Salesforce permission set.
type SalesforcePermissionSet struct {
	// The id of the permission set.
	PermissionSetID string `json:"permission_set_id"`
}

func (s *SalesforcePermissionSet) GetPermissionSetID() string {
	if s == nil {
		return ""
	}
	return s.PermissionSetID
}

// SalesforceProfile - Remote info for Salesforce profile.
type SalesforceProfile struct {
	// The id of the permission set.
	ProfileID string `json:"profile_id"`
	// The id of the user license.
	UserLicenseID string `json:"user_license_id"`
}

func (s *SalesforceProfile) GetProfileID() string {
	if s == nil {
		return ""
	}
	return s.ProfileID
}

func (s *SalesforceProfile) GetUserLicenseID() string {
	if s == nil {
		return ""
	}
	return s.UserLicenseID
}

// SalesforceRole - Remote info for Salesforce role.
type SalesforceRole struct {
	// The id of the role.
	RoleID string `json:"role_id"`
}

func (s *SalesforceRole) GetRoleID() string {
	if s == nil {
		return ""
	}
	return s.RoleID
}

// TeleportRole - Remote info for Teleport role.
type TeleportRole struct {
	// The name role.
	RoleName string `json:"role_name"`
}

func (t *TeleportRole) GetRoleName() string {
	if t == nil {
		return ""
	}
	return t.RoleName
}

// ResourceRemoteInfo - Information that defines the remote resource. This replaces the deprecated remote_id and metadata fields.
type ResourceRemoteInfo struct {
	// Remote info for AWS account.
	AwsAccount *AwsAccount `json:"aws_account,omitempty"`
	// Remote info for AWS EC2 instance.
	AwsEc2Instance *AwsEc2Instance `json:"aws_ec2_instance,omitempty"`
	// Remote info for AWS EKS cluster.
	AwsEksCluster *AwsEksCluster `json:"aws_eks_cluster,omitempty"`
	// Remote info for AWS IAM role.
	AwsIamRole *AwsIamRole `json:"aws_iam_role,omitempty"`
	// Remote info for AWS organizational unit.
	AwsOrganizationalUnit *AwsOrganizationalUnit `json:"aws_organizational_unit,omitempty"`
	// Remote info for AWS Identity Center permission set.
	AwsPermissionSet *AwsPermissionSet `json:"aws_permission_set,omitempty"`
	// Remote info for AWS RDS instance.
	AwsRdsInstance *AwsRdsInstance `json:"aws_rds_instance,omitempty"`
	// Remote info for Coupa role.
	CoupaRole *CoupaRole `json:"coupa_role,omitempty"`
	// Remote info for a custom connector resource.
	CustomConnector *CustomConnector `json:"custom_connector,omitempty"`
	// Remote info for an Astra role.
	DatastaxAstraRole *DatastaxAstraRole `json:"datastax_astra_role,omitempty"`
	// Remote info for GCP BigQuery Dataset.
	GcpBigQueryDataset *GcpBigQueryDataset `json:"gcp_big_query_dataset,omitempty"`
	// Remote info for GCP BigQuery Table.
	GcpBigQueryTable *GcpBigQueryTable `json:"gcp_big_query_table,omitempty"`
	// Remote info for GCP bucket.
	GcpBucket *GcpBucket `json:"gcp_bucket,omitempty"`
	// Remote info for GCP compute instance.
	GcpComputeInstance *GcpComputeInstance `json:"gcp_compute_instance,omitempty"`
	// Remote info for GCP folder.
	GcpFolder *GcpFolder `json:"gcp_folder,omitempty"`
	// Remote info for GCP GKE cluster.
	GcpGkeCluster *GcpGkeCluster `json:"gcp_gke_cluster,omitempty"`
	// Remote info for GCP organization.
	GcpOrganization *GcpOrganization `json:"gcp_organization,omitempty"`
	// Remote info for GCP project.
	GcpProject *GcpProject `json:"gcp_project,omitempty"`
	// Remote info for a GCP service account.
	GcpServiceAccount *GcpServiceAccount `json:"gcp_service_account,omitempty"`
	// Remote info for GCP SQL instance.
	GcpSQLInstance *GcpSQLInstance `json:"gcp_sql_instance,omitempty"`
	// Remote info for GitHub organization role.
	GithubOrgRole *GithubOrgRole `json:"github_org_role,omitempty"`
	// Remote info for GitHub repository.
	GithubRepo *GithubRepo `json:"github_repo,omitempty"`
	// Remote info for Gitlab project.
	GitlabProject *GitlabProject `json:"gitlab_project,omitempty"`
	// Remote info for GCP workspace role.
	GoogleWorkspaceRole *GoogleWorkspaceRole `json:"google_workspace_role,omitempty"`
	// Remote info for Okta directory app.
	OktaApp *OktaApp `json:"okta_app,omitempty"`
	// Remote info for Okta directory custom role.
	OktaCustomRole *OktaCustomRole `json:"okta_custom_role,omitempty"`
	// Remote info for Okta directory standard role.
	OktaStandardRole *OktaStandardRole `json:"okta_standard_role,omitempty"`
	// Remote info for Pagerduty role.
	PagerdutyRole *PagerdutyRole `json:"pagerduty_role,omitempty"`
	// Remote info for Salesforce permission set.
	SalesforcePermissionSet *SalesforcePermissionSet `json:"salesforce_permission_set,omitempty"`
	// Remote info for Salesforce profile.
	SalesforceProfile *SalesforceProfile `json:"salesforce_profile,omitempty"`
	// Remote info for Salesforce role.
	SalesforceRole *SalesforceRole `json:"salesforce_role,omitempty"`
	// Remote info for Teleport role.
	TeleportRole *TeleportRole `json:"teleport_role,omitempty"`
}

func (r *ResourceRemoteInfo) GetAwsAccount() *AwsAccount {
	if r == nil {
		return nil
	}
	return r.AwsAccount
}

func (r *ResourceRemoteInfo) GetAwsEc2Instance() *AwsEc2Instance {
	if r == nil {
		return nil
	}
	return r.AwsEc2Instance
}

func (r *ResourceRemoteInfo) GetAwsEksCluster() *AwsEksCluster {
	if r == nil {
		return nil
	}
	return r.AwsEksCluster
}

func (r *ResourceRemoteInfo) GetAwsIamRole() *AwsIamRole {
	if r == nil {
		return nil
	}
	return r.AwsIamRole
}

func (r *ResourceRemoteInfo) GetAwsOrganizationalUnit() *AwsOrganizationalUnit {
	if r == nil {
		return nil
	}
	return r.AwsOrganizationalUnit
}

func (r *ResourceRemoteInfo) GetAwsPermissionSet() *AwsPermissionSet {
	if r == nil {
		return nil
	}
	return r.AwsPermissionSet
}

func (r *ResourceRemoteInfo) GetAwsRdsInstance() *AwsRdsInstance {
	if r == nil {
		return nil
	}
	return r.AwsRdsInstance
}

func (r *ResourceRemoteInfo) GetCoupaRole() *CoupaRole {
	if r == nil {
		return nil
	}
	return r.CoupaRole
}

func (r *ResourceRemoteInfo) GetCustomConnector() *CustomConnector {
	if r == nil {
		return nil
	}
	return r.CustomConnector
}

func (r *ResourceRemoteInfo) GetDatastaxAstraRole() *DatastaxAstraRole {
	if r == nil {
		return nil
	}
	return r.DatastaxAstraRole
}

func (r *ResourceRemoteInfo) GetGcpBigQueryDataset() *GcpBigQueryDataset {
	if r == nil {
		return nil
	}
	return r.GcpBigQueryDataset
}

func (r *ResourceRemoteInfo) GetGcpBigQueryTable() *GcpBigQueryTable {
	if r == nil {
		return nil
	}
	return r.GcpBigQueryTable
}

func (r *ResourceRemoteInfo) GetGcpBucket() *GcpBucket {
	if r == nil {
		return nil
	}
	return r.GcpBucket
}

func (r *ResourceRemoteInfo) GetGcpComputeInstance() *GcpComputeInstance {
	if r == nil {
		return nil
	}
	return r.GcpComputeInstance
}

func (r *ResourceRemoteInfo) GetGcpFolder() *GcpFolder {
	if r == nil {
		return nil
	}
	return r.GcpFolder
}

func (r *ResourceRemoteInfo) GetGcpGkeCluster() *GcpGkeCluster {
	if r == nil {
		return nil
	}
	return r.GcpGkeCluster
}

func (r *ResourceRemoteInfo) GetGcpOrganization() *GcpOrganization {
	if r == nil {
		return nil
	}
	return r.GcpOrganization
}

func (r *ResourceRemoteInfo) GetGcpProject() *GcpProject {
	if r == nil {
		return nil
	}
	return r.GcpProject
}

func (r *ResourceRemoteInfo) GetGcpServiceAccount() *GcpServiceAccount {
	if r == nil {
		return nil
	}
	return r.GcpServiceAccount
}

func (r *ResourceRemoteInfo) GetGcpSQLInstance() *GcpSQLInstance {
	if r == nil {
		return nil
	}
	return r.GcpSQLInstance
}

func (r *ResourceRemoteInfo) GetGithubOrgRole() *GithubOrgRole {
	if r == nil {
		return nil
	}
	return r.GithubOrgRole
}

func (r *ResourceRemoteInfo) GetGithubRepo() *GithubRepo {
	if r == nil {
		return nil
	}
	return r.GithubRepo
}

func (r *ResourceRemoteInfo) GetGitlabProject() *GitlabProject {
	if r == nil {
		return nil
	}
	return r.GitlabProject
}

func (r *ResourceRemoteInfo) GetGoogleWorkspaceRole() *GoogleWorkspaceRole {
	if r == nil {
		return nil
	}
	return r.GoogleWorkspaceRole
}

func (r *ResourceRemoteInfo) GetOktaApp() *OktaApp {
	if r == nil {
		return nil
	}
	return r.OktaApp
}

func (r *ResourceRemoteInfo) GetOktaCustomRole() *OktaCustomRole {
	if r == nil {
		return nil
	}
	return r.OktaCustomRole
}

func (r *ResourceRemoteInfo) GetOktaStandardRole() *OktaStandardRole {
	if r == nil {
		return nil
	}
	return r.OktaStandardRole
}

func (r *ResourceRemoteInfo) GetPagerdutyRole() *PagerdutyRole {
	if r == nil {
		return nil
	}
	return r.PagerdutyRole
}

func (r *ResourceRemoteInfo) GetSalesforcePermissionSet() *SalesforcePermissionSet {
	if r == nil {
		return nil
	}
	return r.SalesforcePermissionSet
}

func (r *ResourceRemoteInfo) GetSalesforceProfile() *SalesforceProfile {
	if r == nil {
		return nil
	}
	return r.SalesforceProfile
}

func (r *ResourceRemoteInfo) GetSalesforceRole() *SalesforceRole {
	if r == nil {
		return nil
	}
	return r.SalesforceRole
}

func (r *ResourceRemoteInfo) GetTeleportRole() *TeleportRole {
	if r == nil {
		return nil
	}
	return r.TeleportRole
}
