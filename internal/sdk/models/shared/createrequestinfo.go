// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type CustomMetadata struct {
	Name string `json:"name"`
	// The type of the custom request field.
	Type  RequestTemplateCustomFieldTypeEnum `json:"type"`
	Value string                             `json:"value"`
}

func (o *CustomMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CustomMetadata) GetType() RequestTemplateCustomFieldTypeEnum {
	if o == nil {
		return RequestTemplateCustomFieldTypeEnum("")
	}
	return o.Type
}

func (o *CustomMetadata) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateRequestInfoGroups struct {
	// The ID of the access level requested on the remote system.
	AccessLevelName *string `json:"access_level_name,omitempty"`
	// The ID of the access level requested on the remote system.
	AccessLevelRemoteID *string `json:"access_level_remote_id,omitempty"`
	// The ID of the group requested. Should not be specified if resource_id is specified.
	ID string `json:"id"`
}

func (o *CreateRequestInfoGroups) GetAccessLevelName() *string {
	if o == nil {
		return nil
	}
	return o.AccessLevelName
}

func (o *CreateRequestInfoGroups) GetAccessLevelRemoteID() *string {
	if o == nil {
		return nil
	}
	return o.AccessLevelRemoteID
}

func (o *CreateRequestInfoGroups) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type Resources struct {
	// The ID of the access level requested on the remote system.
	AccessLevelName *string `json:"access_level_name,omitempty"`
	// The ID of the access level requested on the remote system.
	AccessLevelRemoteID *string `json:"access_level_remote_id,omitempty"`
	// The ID of the resource requested. Should not be specified if group_id is specified.
	ID *string `json:"id,omitempty"`
}

func (o *Resources) GetAccessLevelName() *string {
	if o == nil {
		return nil
	}
	return o.AccessLevelName
}

func (o *Resources) GetAccessLevelRemoteID() *string {
	if o == nil {
		return nil
	}
	return o.AccessLevelRemoteID
}

func (o *Resources) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type SupportTicket struct {
	Identifier string `json:"identifier"`
	RemoteID   string `json:"remote_id"`
	// The third party ticketing platform provider.
	TicketingProvider TicketingProviderEnum `json:"ticketing_provider"`
	URL               string                `json:"url"`
}

func (o *SupportTicket) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *SupportTicket) GetRemoteID() string {
	if o == nil {
		return ""
	}
	return o.RemoteID
}

func (o *SupportTicket) GetTicketingProvider() TicketingProviderEnum {
	if o == nil {
		return TicketingProviderEnum("")
	}
	return o.TicketingProvider
}

func (o *SupportTicket) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

// CreateRequestInfo - All the information needed for creating a request
type CreateRequestInfo struct {
	CustomMetadata []CustomMetadata `json:"custom_metadata,omitempty"`
	// The duration of the request in minutes. -1 represents an indefinite duration
	DurationMinutes int64                     `json:"duration_minutes"`
	Groups          []CreateRequestInfoGroups `json:"groups"`
	Reason          string                    `json:"reason"`
	Resources       []Resources               `json:"resources"`
	SupportTicket   *SupportTicket            `json:"support_ticket,omitempty"`
	// The ID of the group the request is for.  Should not be specified if target_user_id is specified.
	TargetGroupID *string `json:"target_group_id,omitempty"`
	// The ID of the user to be granted access. Should not be specified if target_group_id is specified.
	TargetUserID *string `json:"target_user_id,omitempty"`
}

func (o *CreateRequestInfo) GetCustomMetadata() []CustomMetadata {
	if o == nil {
		return nil
	}
	return o.CustomMetadata
}

func (o *CreateRequestInfo) GetDurationMinutes() int64 {
	if o == nil {
		return 0
	}
	return o.DurationMinutes
}

func (o *CreateRequestInfo) GetGroups() []CreateRequestInfoGroups {
	if o == nil {
		return []CreateRequestInfoGroups{}
	}
	return o.Groups
}

func (o *CreateRequestInfo) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

func (o *CreateRequestInfo) GetResources() []Resources {
	if o == nil {
		return []Resources{}
	}
	return o.Resources
}

func (o *CreateRequestInfo) GetSupportTicket() *SupportTicket {
	if o == nil {
		return nil
	}
	return o.SupportTicket
}

func (o *CreateRequestInfo) GetTargetGroupID() *string {
	if o == nil {
		return nil
	}
	return o.TargetGroupID
}

func (o *CreateRequestInfo) GetTargetUserID() *string {
	if o == nil {
		return nil
	}
	return o.TargetUserID
}
