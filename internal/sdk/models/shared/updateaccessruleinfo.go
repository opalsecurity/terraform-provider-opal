// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UpdateAccessRuleInfoStatus - The status of the access rule.
type UpdateAccessRuleInfoStatus string

const (
	UpdateAccessRuleInfoStatusActive UpdateAccessRuleInfoStatus = "ACTIVE"
	UpdateAccessRuleInfoStatusPaused UpdateAccessRuleInfoStatus = "PAUSED"
)

func (e UpdateAccessRuleInfoStatus) ToPointer() *UpdateAccessRuleInfoStatus {
	return &e
}
func (e *UpdateAccessRuleInfoStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "PAUSED":
		*e = UpdateAccessRuleInfoStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAccessRuleInfoStatus: %v", v)
	}
}

// # UpdateAccessRuleInfo Object
// ### Description
// The `UpdateAccessRuleInfo` object is used as an input to the UpdateAccessRule and CreateAccessRule API.
type UpdateAccessRuleInfo struct {
	// The ID of the owner of the group.
	AdminOwnerID string `json:"admin_owner_id"`
	// A description of the group.
	Description string `json:"description"`
	// The name of the access rule.
	Name        string      `json:"name"`
	RuleClauses RuleClauses `json:"ruleClauses"`
	// The status of the access rule.
	Status UpdateAccessRuleInfoStatus `json:"status"`
}

func (u *UpdateAccessRuleInfo) GetAdminOwnerID() string {
	if u == nil {
		return ""
	}
	return u.AdminOwnerID
}

func (u *UpdateAccessRuleInfo) GetDescription() string {
	if u == nil {
		return ""
	}
	return u.Description
}

func (u *UpdateAccessRuleInfo) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *UpdateAccessRuleInfo) GetRuleClauses() RuleClauses {
	if u == nil {
		return RuleClauses{}
	}
	return u.RuleClauses
}

func (u *UpdateAccessRuleInfo) GetStatus() UpdateAccessRuleInfoStatus {
	if u == nil {
		return UpdateAccessRuleInfoStatus("")
	}
	return u.Status
}
