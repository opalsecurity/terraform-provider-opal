// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package stateupgraders

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	// "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
)

func GroupStateUpgraderV0(ctx context.Context, req resource.UpgradeStateRequest, resp *resource.UpgradeStateResponse) {
	GroupV0 := tftypes.Object{
		AttributeTypes: map[string]tftypes.Type{
			"id":                 tftypes.String,
			"name": tftypes.String,
			"description": tftypes.String,
			"group_type": tftypes.String,
			"app_id": tftypes.String,
			"admin_owner_id": tftypes.String,
			"require_mfa_to_approve": tftypes.Bool,
			"manage_resources": tftypes.Bool,
			"remote_info": tftypes.List{ElementType: tftypes.Object{
				AttributeTypes: map[string]tftypes.Type{
					"active_directory_group": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"group_id": tftypes.String}}},
					"duo_group": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"group_id": tftypes.String}}},
					"github_team": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"team_slug": tftypes.String}}},
					"gitlab_group": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"group_id": tftypes.String}}},
					"google_group": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"group_id": tftypes.String}}},
					"ldap_group": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"group_id": tftypes.String}}},
					"okta_group": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"group_id": tftypes.String}}},
					"azure_ad_microsoft_365_group": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"group_id": tftypes.String}}},
					"azure_ad_security_group": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"group_id": tftypes.String}}},
				},
			}},
			"visibility": tftypes.String,
			"visibility_group": tftypes.Set{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"id": tftypes.String}}},
			"audit_message_channel": tftypes.Set{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"id": tftypes.String}}},
			"on_call_schedule": tftypes.Set{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"id": tftypes.String}}},
			"resource": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"id": tftypes.String, "access_level_remote_id": tftypes.String}}},
			"request_configuration": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{
				"group_ids": tftypes.Set{ElementType: tftypes.String},
				"is_requestable": tftypes.Bool,
				"auto_approval": tftypes.Bool,
				"require_mfa_to_request": tftypes.Bool,
				"require_support_ticket": tftypes.Bool,
				"max_duration": tftypes.Number,
				"recommended_duration": tftypes.Number,
				"request_template_id": tftypes.String,
				"priority": tftypes.Number,
				"reviewer_stage": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{
					"operator": tftypes.String,
					"require_manager_approval": tftypes.Bool,
					"reviewer": tftypes.Set{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"id": tftypes.String}}},
				}}},
			}}},
		},
	}

	var remoteInfoType = tftypes.Object{
		AttributeTypes: map[string]tftypes.Type{
			"active_directory_group": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"group_id": tftypes.String}}},
			"duo_group": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"group_id": tftypes.String}}},
			"github_team": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"team_slug": tftypes.String}}},
			"gitlab_group": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"group_id": tftypes.String}}},
			"google_group": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"group_id": tftypes.String}}},
			"ldap_group": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"group_id": tftypes.String}}},
			"okta_group": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"group_id": tftypes.String}}},
			"azure_ad_microsoft_365_group": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"group_id": tftypes.String}}},
			"azure_ad_security_group": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"group_id": tftypes.String}}},
		},
	}

	var oncallSchedulesType = tftypes.Object{
		AttributeTypes: map[string]tftypes.Type{
			"on_call_schedules": tftypes.List{ElementType: tftypes.Object{
				AttributeTypes: map[string]tftypes.Type{
					"id": tftypes.String,
					"name": tftypes.String,
					"third_party_provider": tftypes.String,
					"remote_id": tftypes.String,
				},
			}},
	}}

	var messageChannelsType = tftypes.List{ElementType: tftypes.Object{
		AttributeTypes: map[string]tftypes.Type{
			"channels": tftypes.List{ElementType: tftypes.Object{
					AttributeTypes: map[string]tftypes.Type{
						"id": tftypes.String,
						"is_private": tftypes.Bool,
						"name": tftypes.String,
						"remote_id": tftypes.String,
						"third_party_provider": tftypes.String,
					}},
			},
		},
	}}

	var requestConfigurationsType = tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{
		"group_ids": tftypes.Set{ElementType: tftypes.String},
		"is_requestable": tftypes.Bool,
		"auto_approval": tftypes.Bool,
		"require_mfa_to_request": tftypes.Bool,
		"require_support_ticket": tftypes.Bool,
		"max_duration": tftypes.Number,
		"recommended_duration": tftypes.Number,
		"request_template_id": tftypes.String,
		"priority": tftypes.Number,
		"reviewer_stage": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{
			"operator": tftypes.String,
			"require_manager_approval": tftypes.Bool,
			"reviewer": tftypes.Set{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"id": tftypes.String}}},
		}}},
	}}}

	var GroupV3 = tftypes.Object{
		AttributeTypes: map[string]tftypes.Type{
			"id":                 tftypes.String,
			"name": tftypes.String,
			"description": tftypes.String,
			"group_type": tftypes.String,
			"app_id": tftypes.String,
			"group_binding_id": tftypes.String,
			"admin_owner_id": tftypes.String,
			"require_mfa_to_approve": tftypes.Bool,
			"remote_info": remoteInfoType,
			"visibility": tftypes.String,
			"visibility_group_ids": tftypes.Set{ElementType: tftypes.String},
			"message_channel_ids": tftypes.List{ElementType:  tftypes.String},
			"message_channels": messageChannelsType,
			"on_call_schedule_ids": tftypes.List{ElementType:  tftypes.String},
			"oncall_schedules": oncallSchedulesType,
			"remote_name": tftypes.String,
			"request_configurations": requestConfigurationsType,
		},
	}
	
	oldRawStateValue, err := req.RawState.Unmarshal(GroupV0)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to Unmarshal Prior State",
			err.Error(),
		)
		return
	}

	var oldRawState map[string]tftypes.Value
	if err := oldRawStateValue.As(&oldRawState); err != nil {
		resp.Diagnostics.AddError(
			"Unable to Convert Prior State",
			err.Error(),
		)
		return
	}

	var idString *string
	if err := oldRawState["id"].As(&idString); err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("id"),
			"Unable to Convert Prior State",
			err.Error(),
		)
		return
	}

	var admin_owner_id *string
	if !oldRawState["admin_owner_id"].IsNull() {
		if err := oldRawState["admin_owner_id"].As(&admin_owner_id); err != nil {
			resp.Diagnostics.AddAttributeError(
				path.Root("admin_owner_id"),
				"Unable to Convert Prior State",
				err.Error(),
			)
			return
		}
	}

	// should be required
	var app_id *string
	if !oldRawState["app_id"].IsNull() {
		if err := oldRawState["app_id"].As(&app_id); err != nil {
			resp.Diagnostics.AddAttributeError(
				path.Root("app_id"),
				"Unable to Convert Prior State",
				err.Error(),
			)
			return
		}
	}

	var description *string
	if !oldRawState["description"].IsNull() {
		if err := oldRawState["description"].As(&description); err != nil {
			resp.Diagnostics.AddAttributeError(
				path.Root("description"),
				"Unable to Convert Prior State",
				err.Error(),
			)
			return
		}
	}

	var require_mfa_to_approve *bool
	if !oldRawState["require_mfa_to_approve"].IsNull() {
		if err := oldRawState["require_mfa_to_approve"].As(&require_mfa_to_approve); err != nil {
			resp.Diagnostics.AddAttributeError(
				path.Root("require_mfa_to_approve"),
				"Unable to Convert Prior State",
				err.Error(),
			)
			return
		}
	}

	var visibility *string
	if !oldRawState["visibility"].IsNull() {
		if err := oldRawState["visibility"].As(&visibility); err != nil {
			resp.Diagnostics.AddAttributeError(
				path.Root("visibility"),
				"Unable to Convert Prior State",
				err.Error(),
			)
			return
		}
	}
	var visibilityGroupObjects []tftypes.Value
	var visibilityGroupIDs []tftypes.Value
	if !oldRawState["visibility_group"].IsNull() {
		oldRawState["visibility_group"].As(&visibilityGroupObjects)
		for _, groupObject := range visibilityGroupObjects {
			var objSchema map[string]tftypes.Value
			groupObject.As(&objSchema)
			visibilityGroupIDs = append(visibilityGroupIDs, objSchema["id"])
		}
	}

	var auditMessageChannelObjects []tftypes.Value
	var auditMessageChannelIDs []tftypes.Value
	if !oldRawState["audit_message_channel"].IsNull() {
		oldRawState["audit_message_channel"].As(&auditMessageChannelObjects)
		for _, channelObject := range auditMessageChannelObjects {
			var objSchema map[string]tftypes.Value
			channelObject.As(&objSchema)
			auditMessageChannelIDs = append(auditMessageChannelIDs, objSchema["id"])
		}
	}

	var oncallScheduleObjects []tftypes.Value
	var oncallScheduleIDs []tftypes.Value
	if !oldRawState["on_call_schedule"].IsNull() {
		oldRawState["on_call_schedule"].As(&oncallScheduleObjects)
		for _, oncallObject := range oncallScheduleObjects {
			var objSchema map[string]tftypes.Value
			oncallObject.As(&objSchema)
			oncallScheduleIDs = append(oncallScheduleIDs, objSchema["id"])
		}
	}

	var requestConfigurationsValue []tftypes.Value
	if err = oldRawState["request_configuration"].As(&requestConfigurationsValue); err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("request_configuration"),
			"Unable to Convert Prior State",
			err.Error(),
		)
		return
	}	

	dynamicValue, err := tfprotov6.NewDynamicValue(
		GroupV3,
		tftypes.NewValue(GroupV3, map[string]tftypes.Value{
			"id":                 oldRawState["id"],
			"name": oldRawState["name"], // should be required in v2
			"description": tftypes.NewValue(tftypes.String, description),
			"group_type": oldRawState["group_type"], // should be required in v2
			"group_binding_id": tftypes.NewValue(tftypes.String, nil), // read only field to be filled in by refresh
			"app_id": tftypes.NewValue(tftypes.String, app_id),
			"admin_owner_id": tftypes.NewValue(tftypes.String, admin_owner_id),
			"require_mfa_to_approve": tftypes.NewValue(tftypes.Bool, require_mfa_to_approve),
			"remote_info": tftypes.NewValue(remoteInfoType, nil), // Will be populated on a state refresh
			"remote_name": tftypes.NewValue(tftypes.String, nil), // read only field to be filled in by refresh
			"visibility": tftypes.NewValue(tftypes.String, visibility),
			"visibility_group_ids":tftypes.NewValue(tftypes.Set{ElementType: tftypes.String}, visibilityGroupIDs),
			"message_channel_ids": tftypes.NewValue(tftypes.List{ElementType: tftypes.String}, auditMessageChannelIDs),
			"message_channels": tftypes.NewValue(messageChannelsType, nil), // Will be populated on a state refresh
			"on_call_schedule_ids": tftypes.NewValue(tftypes.List{ElementType: tftypes.String}, oncallScheduleIDs),
			"oncall_schedules": tftypes.NewValue(oncallSchedulesType, nil), // Will be populated on a state refresh
			"request_configurations": tftypes.NewValue(requestConfigurationsType, nil), // Will be populated on a state refresh
		}),
	)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to Convert Upgraded State",
			err.Error(),
		)
		return
	}

	resp.DynamicValue = &dynamicValue
}
