// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package stateupgraders

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	// "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
)

func ResourceStateUpgraderV0(ctx context.Context, req resource.UpgradeStateRequest, resp *resource.UpgradeStateResponse) {
	var remoteInfoObjectType = tftypes.Object{
		AttributeTypes: map[string]tftypes.Type{
			"aws_account": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"account_id": tftypes.String}}},
			"aws_iam_role": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"arn": tftypes.String, "account_id": tftypes.String}}},
			"aws_ec2_instance": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"instance_id": tftypes.String, "region": tftypes.String, "account_id": tftypes.String}}},
			"aws_rds_instance": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"instance_id": tftypes.String, "resource_id": tftypes.String, "region": tftypes.String, "account_id": tftypes.String}}},
			"aws_eks_cluster": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"arn": tftypes.String, "account_id": tftypes.String}}},
			"aws_permission_set": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"arn": tftypes.String, "account_id": tftypes.String}}},
			"gcp_bucket": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"bucket_id": tftypes.String}}},
			"gcp_compute_instance": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"instance_id": tftypes.String, "project_id": tftypes.String, "zone": tftypes.String}}},
			"gcp_folder": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"folder_id": tftypes.String}}},
			"gcp_gke_cluster": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"cluster_name": tftypes.String}}},
			"gcp_project": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"project_id": tftypes.String}}},
			"gcp_sql_instance": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"instance_id": tftypes.String, "project_id": tftypes.String}}},
			"github_repo": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"repo_name": tftypes.String}}},
			"gitlab_project": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"project_id": tftypes.String}}},
			"okta_app": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"app_id": tftypes.String}}},
			"okta_standard_role": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"role_type": tftypes.String}}},
			"okta_custom_role": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"role_id": tftypes.String}}},
			"pagerduty_role": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"role_name": tftypes.String}}},
			"salesforce_permission_set": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"permission_set_id": tftypes.String}}},
			"salesforce_profile": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"profile_id": tftypes.String, "user_license_id": tftypes.String}}},
			"salesforce_role": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"role_id": tftypes.String}}},
			"teleport_role": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"role_name": tftypes.String}}},
		},
	}
	ResourceV0 := tftypes.Object{
		AttributeTypes: map[string]tftypes.Type{
			"id":                 tftypes.String,
			"name": tftypes.String,
			"description": tftypes.String,
			"resource_type": tftypes.String,
			"app_id": tftypes.String,
			"admin_owner_id": tftypes.String,
			"require_mfa_to_approve": tftypes.Bool,
			"require_mfa_to_connect": tftypes.Bool,
			"remote_info": tftypes.List{ElementType: remoteInfoObjectType},
			"visibility": tftypes.String,
			"visibility_group": tftypes.Set{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"id": tftypes.String}}},
			"audit_message_channel": tftypes.Set{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"id": tftypes.String}}},
			"on_call_schedule": tftypes.Set{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"id": tftypes.String}}},
			"resource": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"id": tftypes.String, "access_level_remote_id": tftypes.String}}},
			"request_configuration": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{
				"group_ids": tftypes.Set{ElementType: tftypes.String},
				"is_requestable": tftypes.Bool,
				"auto_approval": tftypes.Bool,
				"require_mfa_to_request": tftypes.Bool,
				"require_support_ticket": tftypes.Bool,
				"max_duration": tftypes.Number,
				"recommended_duration": tftypes.Number,
				"request_template_id": tftypes.String,
				"priority": tftypes.Number,
				"reviewer_stage": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{
					"operator": tftypes.String,
					"require_manager_approval": tftypes.Bool,
					"reviewer": tftypes.Set{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"id": tftypes.String}}},
				}}},
			}}},
		},
	}

	var requestConfigurationsType = tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{
		"group_ids": tftypes.Set{ElementType: tftypes.String},
		"is_requestable": tftypes.Bool,
		"auto_approval": tftypes.Bool,
		"require_mfa_to_request": tftypes.Bool,
		"require_support_ticket": tftypes.Bool,
		"max_duration": tftypes.Number,
		"recommended_duration": tftypes.Number,
		"request_template_id": tftypes.String,
		"priority": tftypes.Number,
		"reviewer_stage": tftypes.List{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{
			"operator": tftypes.String,
			"require_manager_approval": tftypes.Bool,
			"reviewer": tftypes.Set{ElementType: tftypes.Object{AttributeTypes: map[string]tftypes.Type{"id": tftypes.String}}},
		}}},
	}}}

	var ticketPropagationType = tftypes.Object{
		AttributeTypes: map[string]tftypes.Type{
			"enabled_on_grant":      tftypes.Bool,
			"enabled_on_revocation": tftypes.Bool,
			"ticket_project_id":     tftypes.String,
			"ticket_provider":       tftypes.String,
		},
	}

	var ResourceV3 = tftypes.Object{
		AttributeTypes: map[string]tftypes.Type{
			"id":                 tftypes.String,
			"name": tftypes.String,
			"description": tftypes.String,
			"resource_type": tftypes.String,
			"app_id": tftypes.String,
			"parent_resource_id": tftypes.String,
			"admin_owner_id": tftypes.String,
			"require_mfa_to_approve": tftypes.Bool,
			"require_mfa_to_connect": tftypes.Bool,
			"remote_info": remoteInfoObjectType,
			"visibility": tftypes.String,
			"visibility_group_ids": tftypes.List{ElementType: tftypes.String},
			"request_configurations": requestConfigurationsType,
			"ticket_propagation": ticketPropagationType,
		},
	}
	
	oldRawStateValue, err := req.RawState.Unmarshal(ResourceV0)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to Unmarshal Prior State",
			err.Error(),
		)
		return
	}

	var oldRawState map[string]tftypes.Value
	if err := oldRawStateValue.As(&oldRawState); err != nil {
		resp.Diagnostics.AddError(
			"Unable to Convert Prior State",
			err.Error(),
		)
		return
	}

	var description *string
	if !oldRawState["description"].IsNull() {
		if err := oldRawState["description"].As(&description); err != nil {
			resp.Diagnostics.AddAttributeError(
				path.Root("description"),
				"Unable to Convert Prior State",
				err.Error(),
			)
			return
		}
	}

	var parentResourceID *string
	if !oldRawState["parent_resource_id"].IsNull() {
		if err := oldRawState["parent_resource_id"].As(&parentResourceID); err != nil {
			resp.Diagnostics.AddAttributeError(
				path.Root("parent_resource_id"),
				"Unable to Convert Prior State",
				err.Error(),
			)
			return
		}
	}

	var requireMfaToApprove *bool
	if !oldRawState["require_mfa_to_approve"].IsNull() {
		if err := oldRawState["require_mfa_to_approve"].As(&requireMfaToApprove); err != nil {
			resp.Diagnostics.AddAttributeError(
				path.Root("require_mfa_to_approve"),
				"Unable to Convert Prior State",
				err.Error(),
			)
			return
		}
	}

	var requireMfaToConnect *bool
	if !oldRawState["require_mfa_to_connect"].IsNull() {
		if err := oldRawState["require_mfa_to_connect"].As(&requireMfaToConnect); err != nil {
			resp.Diagnostics.AddAttributeError(
				path.Root("require_mfa_to_connect"),
				"Unable to Convert Prior State",
				err.Error(),
			)
			return
		}
	}

	var visibility *string
	if !oldRawState["visibility"].IsNull() {
		if err := oldRawState["visibility"].As(&visibility); err != nil {
			resp.Diagnostics.AddAttributeError(
				path.Root("visibility"),
				"Unable to Convert Prior State",
				err.Error(),
			)
			return
		}
	}

	var visibilityGroupObjects []tftypes.Value
	var visibilityGroupIDs []tftypes.Value
	if !oldRawState["visibility_group"].IsNull() {
		oldRawState["visibility_group"].As(&visibilityGroupObjects)
		for _, groupObject := range visibilityGroupObjects {
			var objSchema map[string]tftypes.Value
			groupObject.As(&objSchema)
			visibilityGroupIDs = append(visibilityGroupIDs, objSchema["id"])
		}
	}

	
	var requestConfigurationsValue []tftypes.Value
	if err = oldRawState["request_configuration"].As(&requestConfigurationsValue); err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("request_configuration"),
			"Unable to Convert Prior State",
			err.Error(),
		)
		return
	}

	dynamicValue, err := tfprotov6.NewDynamicValue(
		ResourceV3,
		tftypes.NewValue(ResourceV3, map[string]tftypes.Value{
			"id":                 oldRawState["id"], // required field
			"name": oldRawState["name"], // required field
			"description": tftypes.NewValue(tftypes.String, description),
			"resource_type": oldRawState["resource_type"],  // required field
			"app_id": oldRawState["app_id"], // required field
			"parent_resource_id": tftypes.NewValue(tftypes.String, parentResourceID),
			"admin_owner_id": oldRawState["admin_owner_id"], // required field
			"require_mfa_to_approve": tftypes.NewValue(tftypes.Bool, requireMfaToApprove),
			"require_mfa_to_connect": tftypes.NewValue(tftypes.Bool, requireMfaToConnect),
			"remote_info": tftypes.NewValue(remoteInfoObjectType, nil),
			"visibility": tftypes.NewValue(tftypes.String, visibility), // Will be populated on a state refresh
			"visibility_group_ids":tftypes.NewValue(tftypes.List{ElementType: tftypes.String}, visibilityGroupIDs), // Will be populated by first terraform apply
			"request_configurations": tftypes.NewValue(requestConfigurationsType, nil), // Will be populated on a state refresh
			"ticket_propagation": tftypes.NewValue(ticketPropagationType, nil), // cannot have been set in the prior version
		}),
	)

	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to Convert Upgraded State",
			err.Error(),
		)
		return
	}

	resp.DynamicValue = &dynamicValue
}
