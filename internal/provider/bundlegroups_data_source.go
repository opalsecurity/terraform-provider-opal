// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &BundleGroupsDataSource{}
var _ datasource.DataSourceWithConfigure = &BundleGroupsDataSource{}

func NewBundleGroupsDataSource() datasource.DataSource {
	return &BundleGroupsDataSource{}
}

// BundleGroupsDataSource is the data source implementation.
type BundleGroupsDataSource struct {
	client *sdk.OpalAPI
}

// BundleGroupsDataSourceModel describes the data model.
type BundleGroupsDataSourceModel struct {
	BundleGroups []tfTypes.BundleGroup `tfsdk:"bundle_groups"`
	BundleID     types.String          `tfsdk:"bundle_id"`
	Contains     types.String          `queryParam:"style=form,explode=true,name=contains" tfsdk:"contains"`
	Cursor       types.String          `queryParam:"style=form,explode=true,name=cursor" tfsdk:"cursor"`
	Next         types.String          `tfsdk:"next"`
	PageSize     types.Int64           `queryParam:"style=form,explode=true,name=page_size" tfsdk:"page_size"`
	Previous     types.String          `tfsdk:"previous"`
	TotalCount   types.Int64           `tfsdk:"total_count"`
}

// Metadata returns the data source type name.
func (r *BundleGroupsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_bundle_groups"
}

// Schema defines the schema for the data source.
func (r *BundleGroupsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "BundleGroups DataSource",

		Attributes: map[string]schema.Attribute{
			"bundle_groups": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"bundle_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the bundle containing the group.`,
						},
						"group_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the group within a bundle.`,
						},
						"group_name": schema.StringAttribute{
							Computed:    true,
							Description: `The name of the group within a bundle.`,
						},
					},
				},
			},
			"bundle_id": schema.StringAttribute{
				Required:    true,
				Description: `The ID of the bundle.`,
			},
			"contains": schema.StringAttribute{
				Optional:    true,
				Description: `A filter for the bundle name.`,
			},
			"cursor": schema.StringAttribute{
				Optional:    true,
				Description: `A cursor indicating where to start fetching items after a specific point.`,
			},
			"next": schema.StringAttribute{
				Computed:    true,
				Description: `The cursor with which to continue pagination if additional result pages exist.`,
			},
			"page_size": schema.Int64Attribute{
				Optional:    true,
				Description: `The maximum number of groups to return from the beginning of the list. Default is 200, max is 1000.`,
			},
			"previous": schema.StringAttribute{
				Computed:    true,
				Description: `The cursor used to obtain the current result page.`,
			},
			"total_count": schema.Int64Attribute{
				Computed:    true,
				Description: `The total number of items in the result set.`,
			},
		},
	}
}

func (r *BundleGroupsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.OpalAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.OpalAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *BundleGroupsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *BundleGroupsDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var bundleID string
	bundleID = data.BundleID.ValueString()

	contains := new(string)
	if !data.Contains.IsUnknown() && !data.Contains.IsNull() {
		*contains = data.Contains.ValueString()
	} else {
		contains = nil
	}
	cursor := new(string)
	if !data.Cursor.IsUnknown() && !data.Cursor.IsNull() {
		*cursor = data.Cursor.ValueString()
	} else {
		cursor = nil
	}
	pageSize := new(int64)
	if !data.PageSize.IsUnknown() && !data.PageSize.IsNull() {
		*pageSize = data.PageSize.ValueInt64()
	} else {
		pageSize = nil
	}
	request := operations.GetBundleGroupsRequest{
		BundleID: bundleID,
		Contains: contains,
		Cursor:   cursor,
		PageSize: pageSize,
	}
	res, err := r.client.Bundles.GetBundleGroups(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PaginatedBundleGroupList != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedPaginatedBundleGroupList(res.PaginatedBundleGroupList)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
