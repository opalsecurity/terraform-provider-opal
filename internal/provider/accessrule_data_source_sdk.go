// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/shared"
)

func (r *AccessRuleDataSourceModel) RefreshFromSharedAccessRule(ctx context.Context, resp *shared.AccessRule) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AdminOwnerID = types.StringValue(resp.AdminOwnerID)
		r.Description = types.StringValue(resp.Description)
		r.ID = types.StringValue(resp.ID)
		r.Name = types.StringValue(resp.Name)
		if resp.RuleClauses.Unless == nil {
			r.RuleClauses.Unless = nil
		} else {
			r.RuleClauses.Unless = &tfTypes.RuleConjunction{}
			r.RuleClauses.Unless.Clauses = []tfTypes.RuleDisjunction{}

			for _, clausesItem := range resp.RuleClauses.Unless.Clauses {
				var clauses tfTypes.RuleDisjunction

				clauses.Selectors = []tfTypes.TagSelector{}

				for _, selectorsItem := range clausesItem.Selectors {
					var selectors tfTypes.TagSelector

					selectors.ConnectionID = types.StringValue(selectorsItem.ConnectionID)
					selectors.Key = types.StringValue(selectorsItem.Key)
					selectors.Value = types.StringValue(selectorsItem.Value)

					clauses.Selectors = append(clauses.Selectors, selectors)
				}

				r.RuleClauses.Unless.Clauses = append(r.RuleClauses.Unless.Clauses, clauses)
			}
		}
		r.RuleClauses.When.Clauses = []tfTypes.RuleDisjunction{}

		for _, clausesItem1 := range resp.RuleClauses.When.Clauses {
			var clauses1 tfTypes.RuleDisjunction

			clauses1.Selectors = []tfTypes.TagSelector{}

			for _, selectorsItem1 := range clausesItem1.Selectors {
				var selectors1 tfTypes.TagSelector

				selectors1.ConnectionID = types.StringValue(selectorsItem1.ConnectionID)
				selectors1.Key = types.StringValue(selectorsItem1.Key)
				selectors1.Value = types.StringValue(selectorsItem1.Value)

				clauses1.Selectors = append(clauses1.Selectors, selectors1)
			}

			r.RuleClauses.When.Clauses = append(r.RuleClauses.When.Clauses, clauses1)
		}
		r.Status = types.StringValue(string(resp.Status))
	}

	return diags
}

func (r *AccessRuleDataSourceModel) ToOperationsGetAccessRuleRequest(ctx context.Context) (*operations.GetAccessRuleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetAccessRuleRequest{
		ID: id,
	}

	return &out, diags
}
