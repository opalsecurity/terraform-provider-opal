// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &RequestsDataSource{}
var _ datasource.DataSourceWithConfigure = &RequestsDataSource{}

func NewRequestsDataSource() datasource.DataSource {
	return &RequestsDataSource{}
}

// RequestsDataSource is the data source implementation.
type RequestsDataSource struct {
	client *sdk.OpalAPI
}

// RequestsDataSourceModel describes the data model.
type RequestsDataSourceModel struct {
	Cursor          types.String      `tfsdk:"cursor"`
	PageSize        types.Int64       `tfsdk:"page_size"`
	Requests        []tfTypes.Request `tfsdk:"requests"`
	ShowPendingOnly types.Bool        `tfsdk:"show_pending_only"`
}

// Metadata returns the data source type name.
func (r *RequestsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_requests"
}

// Schema defines the schema for the data source.
func (r *RequestsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Requests DataSource",

		Attributes: map[string]schema.Attribute{
			"cursor": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The pagination cursor value.`,
			},
			"page_size": schema.Int64Attribute{
				Optional:    true,
				Description: `Number of results to return per page. Default is 200.`,
			},
			"requests": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"created_at": schema.StringAttribute{
							Computed:    true,
							Description: `The date and time the request was created.`,
						},
						"custom_fields_responses": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"field_name": schema.StringAttribute{
										Computed: true,
									},
									"field_type": schema.StringAttribute{
										Computed:    true,
										Description: `The type of the custom request field.`,
									},
									"field_value": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"boolean": schema.BoolAttribute{
												Computed: true,
											},
											"str": schema.StringAttribute{
												Computed: true,
											},
										},
									},
								},
							},
							Description: `The responses given to the custom fields associated to the request`,
						},
						"duration_minutes": schema.Int64Attribute{
							Computed:    true,
							Description: `The duration of the request in minutes.`,
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `The unique identifier of the request.`,
						},
						"reason": schema.StringAttribute{
							Computed:    true,
							Description: `The reason for the request.`,
						},
						"requested_items_list": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"access_level_name": schema.StringAttribute{
										Computed:    true,
										Description: `The name of the access level requested.`,
									},
									"access_level_remote_id": schema.StringAttribute{
										Computed:    true,
										Description: `The ID of the access level requested on the remote system.`,
									},
									"group_id": schema.StringAttribute{
										Computed:    true,
										Description: `The ID of the group requested.`,
									},
									"name": schema.StringAttribute{
										Computed:    true,
										Description: `The name of the target.`,
									},
									"resource_id": schema.StringAttribute{
										Computed:    true,
										Description: `The ID of the resource requested.`,
									},
								},
							},
							Description: `The list of targets for the request.`,
						},
						"requester_id": schema.StringAttribute{
							Computed:    true,
							Description: `The unique identifier of the user who created the request.`,
						},
						"status": schema.StringAttribute{
							Computed: true,
							MarkdownDescription: `# Request Status` + "\n" +
								`### Description` + "\n" +
								`The ` + "`" + `RequestStatus` + "`" + ` enum is used to represent the status of a request.` + "\n" +
								`` + "\n" +
								`### Usage Example` + "\n" +
								`Returned from the ` + "`" + `GET Requests` + "`" + ` endpoint.`,
						},
						"target_group_id": schema.StringAttribute{
							Computed:    true,
							Description: `The unique identifier of the group who is the target of the request.`,
						},
						"target_user_id": schema.StringAttribute{
							Computed:    true,
							Description: `The unique identifier of the user who is the target of the request.`,
						},
						"updated_at": schema.StringAttribute{
							Computed:    true,
							Description: `The date and time the request was last updated.`,
						},
					},
				},
				Description: `The list of requests.`,
			},
			"show_pending_only": schema.BoolAttribute{
				Optional:    true,
				Description: `Boolean toggle for if it should only show pending requests.`,
			},
		},
	}
}

func (r *RequestsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.OpalAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.OpalAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *RequestsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *RequestsDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	cursor := new(string)
	if !data.Cursor.IsUnknown() && !data.Cursor.IsNull() {
		*cursor = data.Cursor.ValueString()
	} else {
		cursor = nil
	}
	pageSize := new(int64)
	if !data.PageSize.IsUnknown() && !data.PageSize.IsNull() {
		*pageSize = data.PageSize.ValueInt64()
	} else {
		pageSize = nil
	}
	showPendingOnly := new(bool)
	if !data.ShowPendingOnly.IsUnknown() && !data.ShowPendingOnly.IsNull() {
		*showPendingOnly = data.ShowPendingOnly.ValueBool()
	} else {
		showPendingOnly = nil
	}
	request := operations.GetRequestsRequest{
		Cursor:          cursor,
		PageSize:        pageSize,
		ShowPendingOnly: showPendingOnly,
	}
	res, err := r.client.Requests.Get(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.RequestList != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedRequestList(res.RequestList)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
