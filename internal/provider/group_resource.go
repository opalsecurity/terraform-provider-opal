// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	speakeasy_boolplanmodifier "github.com/opalsecurity/terraform-provider-opal/internal/planmodifiers/boolplanmodifier"
	speakeasy_listplanmodifier "github.com/opalsecurity/terraform-provider-opal/internal/planmodifiers/listplanmodifier"
	speakeasy_objectplanmodifier "github.com/opalsecurity/terraform-provider-opal/internal/planmodifiers/objectplanmodifier"
	speakeasy_setplanmodifier "github.com/opalsecurity/terraform-provider-opal/internal/planmodifiers/setplanmodifier"
	speakeasy_stringplanmodifier "github.com/opalsecurity/terraform-provider-opal/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/shared"
	stateupgraders "github.com/opalsecurity/terraform-provider-opal/internal/stateupgraders"
	speakeasy_boolvalidators "github.com/opalsecurity/terraform-provider-opal/internal/validators/boolvalidators"
	speakeasy_int64validators "github.com/opalsecurity/terraform-provider-opal/internal/validators/int64validators"
	custom_setvalidators "github.com/opalsecurity/terraform-provider-opal/internal/validators/setvalidators"
	speakeasy_setvalidators "github.com/opalsecurity/terraform-provider-opal/internal/validators/setvalidators"
	speakeasy_stringvalidators "github.com/opalsecurity/terraform-provider-opal/internal/validators/stringvalidators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &GroupResource{}
var _ resource.ResourceWithUpgradeState = &GroupResource{}

func NewGroupResource() resource.Resource {
	return &GroupResource{}
}

// GroupResource defines the resource implementation.
type GroupResource struct {
	client *sdk.OpalAPI
}

// GroupResourceModel describes the resource data model.
type GroupResourceModel struct {
	AdminOwnerID          types.String                                `tfsdk:"admin_owner_id"`
	AppID                 types.String                                `tfsdk:"app_id"`
	Description           types.String                                `tfsdk:"description"`
	GroupBindingID        types.String                                `tfsdk:"group_binding_id"`
	GroupLeaderUserIds    []types.String                              `tfsdk:"group_leader_user_ids"`
	GroupType             types.String                                `tfsdk:"group_type"`
	ID                    types.String                                `tfsdk:"id"`
	MessageChannelIds     []types.String                              `tfsdk:"message_channel_ids"`
	MessageChannels       tfTypes.GetGroupMessageChannelsResponseBody `tfsdk:"message_channels"`
	Name                  types.String                                `tfsdk:"name"`
	OnCallScheduleIds     []types.String                              `tfsdk:"on_call_schedule_ids"`
	OncallSchedules       tfTypes.GetGroupOnCallSchedulesResponseBody `tfsdk:"oncall_schedules"`
	RemoteInfo            *tfTypes.GroupRemoteInfo                    `tfsdk:"remote_info"`
	RemoteName            types.String                                `tfsdk:"remote_name"`
	RequestConfigurations []tfTypes.RequestConfiguration              `tfsdk:"request_configurations"`
	RequireMfaToApprove   types.Bool                                  `tfsdk:"require_mfa_to_approve"`
	Visibility            types.String                                `tfsdk:"visibility"`
	VisibilityGroupIds    []types.String                              `tfsdk:"visibility_group_ids"`
}

func (r *GroupResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_group"
}

func (r *GroupResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Group Resource",
		Version:             1,
		Attributes: map[string]schema.Attribute{
			"admin_owner_id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				Description: `The ID of the owner of the group.`,
			},
			"app_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Required:    true,
				Description: `The ID of the app for the group. Requires replacement if changed. `,
			},
			"description": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				Description: `A description of the remote group.`,
			},
			"group_binding_id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `The ID of the associated group binding.`,
			},
			"group_leader_user_ids": schema.SetAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.Set{
					speakeasy_setplanmodifier.SuppressDiff(speakeasy_setplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				ElementType: types.StringType,
				Description: `A list of User IDs for the group leaders of the group`,
			},
			"group_type": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Required:    true,
				Description: `The type of the group. Requires replacement if changed. ; must be one of ["ACTIVE_DIRECTORY_GROUP", "AWS_SSO_GROUP", "DUO_GROUP", "GIT_HUB_TEAM", "GIT_LAB_GROUP", "GOOGLE_GROUPS_GROUP", "LDAP_GROUP", "OKTA_GROUP", "OPAL_GROUP", "AZURE_AD_SECURITY_GROUP", "AZURE_AD_MICROSOFT_365_GROUP"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"ACTIVE_DIRECTORY_GROUP",
						"AWS_SSO_GROUP",
						"DUO_GROUP",
						"GIT_HUB_TEAM",
						"GIT_LAB_GROUP",
						"GOOGLE_GROUPS_GROUP",
						"LDAP_GROUP",
						"OKTA_GROUP",
						"OPAL_GROUP",
						"AZURE_AD_SECURITY_GROUP",
						"AZURE_AD_MICROSOFT_365_GROUP",
					),
				},
			},
			"id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `The ID of the group.`,
			},
			"message_channel_ids": schema.SetAttribute{
				Required:    true,
				ElementType: types.StringType,
			},
			"message_channels": schema.SingleNestedAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.Object{
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Attributes: map[string]schema.Attribute{
					"channels": schema.ListNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.List{
							speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
						},
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.String{
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Description: `The ID of the message channel.`,
								},
								"is_private": schema.BoolAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.Bool{
										speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
									},
									Description: `A bool representing whether or not the message channel is private.`,
								},
								"name": schema.StringAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.String{
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Description: `The name of the message channel.`,
								},
								"remote_id": schema.StringAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.String{
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Description: `The remote ID of the message channel`,
								},
								"third_party_provider": schema.StringAttribute{
									Computed: true,
									PlanModifiers: []planmodifier.String{
										speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
									},
									Description: `The third party provider of the message channel. must be one of ["SLACK"]`,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"SLACK",
										),
									},
								},
							},
						},
					},
				},
				Description: `The audit and reviewer message channels attached to the group.`,
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: `The name of the remote group.`,
			},
			"on_call_schedule_ids": schema.SetAttribute{
				Required:    true,
				ElementType: types.StringType,
			},
			"oncall_schedules": schema.SingleNestedAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.Object{
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.String{
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `The ID of the on-call schedule.`,
					},
					"name": schema.StringAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.String{
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `The name of the on call schedule.`,
					},
					"remote_id": schema.StringAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.String{
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `The remote ID of the on call schedule`,
					},
					"third_party_provider": schema.StringAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.String{
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `The third party provider of the on call schedule. must be one of ["OPSGENIE", "PAGER_DUTY"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"OPSGENIE",
								"PAGER_DUTY",
							),
						},
					},
				},
				Description: `The on call schedules attached to the group.`,
			},
			"remote_info": schema.SingleNestedAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"active_directory_group": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"group_id": schema.StringAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
								},
								Optional:    true,
								Description: `The id of the Google group. Requires replacement if changed. ; Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
								},
							},
						},
						Description: `Remote info for Active Directory group. Requires replacement if changed. `,
					},
					"azure_ad_microsoft_365_group": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"group_id": schema.StringAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
								},
								Optional:    true,
								Description: `The id of the Microsoft Entra ID Microsoft 365 group. Requires replacement if changed. ; Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
								},
							},
						},
						Description: `Remote info for Microsoft Entra ID Microsoft 365 group. Requires replacement if changed. `,
					},
					"azure_ad_security_group": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"group_id": schema.StringAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
								},
								Optional:    true,
								Description: `The id of the Microsoft Entra ID Security group. Requires replacement if changed. ; Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
								},
							},
						},
						Description: `Remote info for Microsoft Entra ID Security group. Requires replacement if changed. `,
					},
					"duo_group": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"group_id": schema.StringAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
								},
								Optional:    true,
								Description: `The id of the Duo Security group. Requires replacement if changed. ; Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
								},
							},
						},
						Description: `Remote info for Duo Security group. Requires replacement if changed. `,
					},
					"github_team": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"team_slug": schema.StringAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
								},
								Optional:    true,
								Description: `The slug of the GitHub team. Requires replacement if changed. ; Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
								},
							},
						},
						Description: `Remote info for GitHub team. Requires replacement if changed. `,
					},
					"gitlab_group": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"group_id": schema.StringAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
								},
								Optional:    true,
								Description: `The id of the Gitlab group. Requires replacement if changed. ; Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
								},
							},
						},
						Description: `Remote info for Gitlab group. Requires replacement if changed. `,
					},
					"google_group": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"group_id": schema.StringAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
								},
								Optional:    true,
								Description: `The id of the Google group. Requires replacement if changed. ; Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
								},
							},
						},
						Description: `Remote info for Google group. Requires replacement if changed. `,
					},
					"ldap_group": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"group_id": schema.StringAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
								},
								Optional:    true,
								Description: `The id of the LDAP group. Requires replacement if changed. ; Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
								},
							},
						},
						Description: `Remote info for LDAP group. Requires replacement if changed. `,
					},
					"okta_group": schema.SingleNestedAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"group_id": schema.StringAttribute{
								Computed: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
								},
								Optional:    true,
								Description: `The id of the Okta Directory group. Requires replacement if changed. ; Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
								},
							},
						},
						Description: `Remote info for Okta Directory group. Requires replacement if changed. `,
					},
				},
				Description: `Information that defines the remote group. This replaces the deprecated remote_id and metadata fields. Requires replacement if changed. `,
			},
			"remote_name": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `The name of the remote.`,
			},
			"request_configurations": schema.SetNestedAttribute{
				Required: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"allow_requests": schema.BoolAttribute{
							Computed:    true,
							Optional:    true,
							Description: `A bool representing whether or not to allow requests for this resource. Not Null`,
							Validators: []validator.Bool{
								speakeasy_boolvalidators.NotNull(),
							},
						},
						"auto_approval": schema.BoolAttribute{
							Computed:    true,
							Optional:    true,
							Description: `A bool representing whether or not to automatically approve requests for this resource. Not Null`,
							Validators: []validator.Bool{
								speakeasy_boolvalidators.NotNull(),
							},
						},
						"condition": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"group_ids": schema.SetAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Description: `The list of group IDs to match.`,
								},
								"role_remote_ids": schema.SetAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Description: `The list of role remote IDs to match.`,
								},
							},
						},
						"max_duration": schema.Int64Attribute{
							Computed:    true,
							Optional:    true,
							Description: `The maximum duration for which the resource can be requested (in minutes).`,
						},
						"priority": schema.Int64Attribute{
							Computed:    true,
							Optional:    true,
							Description: `The priority of the request configuration. Not Null`,
							Validators: []validator.Int64{
								speakeasy_int64validators.NotNull(),
							},
						},
						"recommended_duration": schema.Int64Attribute{
							Computed:    true,
							Optional:    true,
							Description: `The recommended duration for which the resource should be requested (in minutes). -1 represents an indefinite duration.`,
						},
						"request_template_id": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `The ID of the associated request template.`,
						},
						"require_mfa_to_request": schema.BoolAttribute{
							Computed:    true,
							Optional:    true,
							Description: `A bool representing whether or not to require MFA for requesting access to this resource. Not Null`,
							Validators: []validator.Bool{
								speakeasy_boolvalidators.NotNull(),
							},
						},
						"require_support_ticket": schema.BoolAttribute{
							Computed:    true,
							Optional:    true,
							Description: `A bool representing whether or not access requests to the resource require an access ticket. Not Null`,
							Validators: []validator.Bool{
								speakeasy_boolvalidators.NotNull(),
							},
						},
						"reviewer_stages": schema.ListNestedAttribute{
							Computed: true,
							Optional: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"operator": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Default:     stringdefault.StaticString("AND"),
										Description: `The operator of the reviewer stage. Admin and manager approval are also treated as reviewers. must be one of ["AND", "OR"]; Default: "AND"`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"AND",
												"OR",
											),
										},
									},
									"owner_ids": schema.SetAttribute{
										Computed:    true,
										Optional:    true,
										ElementType: types.StringType,
										Description: `Not Null`,
										Validators: []validator.Set{
											speakeasy_setvalidators.NotNull(),
										},
									},
									"require_admin_approval": schema.BoolAttribute{
										Computed:    true,
										Optional:    true,
										Description: `Whether this reviewer stage should require admin approval.`,
									},
									"require_manager_approval": schema.BoolAttribute{
										Computed:    true,
										Optional:    true,
										Description: `Whether this reviewer stage should require manager approval. Not Null`,
										Validators: []validator.Bool{
											speakeasy_boolvalidators.NotNull(),
										},
									},
								},
							},
							Description: `The list of reviewer stages for the request configuration.`,
						},
					},
				},
				Description: `The request configuration list of the configuration template. If not provided, the default request configuration will be used.`,
				Validators: []validator.Set{
					custom_setvalidators.RequestConfigurations(),
				},
			},
			"require_mfa_to_approve": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `A bool representing whether or not to require MFA for reviewers to approve requests for this group.`,
			},
			"visibility": schema.StringAttribute{
				Required:    true,
				Description: `The visibility level of the entity. must be one of ["GLOBAL", "LIMITED"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"GLOBAL",
						"LIMITED",
					),
				},
			},
			"visibility_group_ids": schema.SetAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.Set{
					speakeasy_setplanmodifier.SuppressDiff(speakeasy_setplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				ElementType: types.StringType,
			},
		},
	}
}

func (r *GroupResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.OpalAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.OpalAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *GroupResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *GroupResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToSharedCreateGroupInfo()
	res, err := r.client.Groups.Create(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Group != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedGroup(res.Group)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	singleton := *data.ToSharedUpdateGroupInfo()
	groups := []shared.UpdateGroupInfo{singleton}
	request1 := shared.UpdateGroupInfoList{
		Groups: groups,
	}
	res1, err := r.client.Groups.Update(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.UpdateGroupInfoList != nil && len(res1.UpdateGroupInfoList.Groups) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedUpdateGroupInfo(&res1.UpdateGroupInfoList.Groups[0])
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	messageChannelIDList := *data.ToSharedMessageChannelIDList()
	var id string
	id = data.ID.ValueString()

	request2 := operations.UpdateGroupMessageChannelsRequest{
		MessageChannelIDList: messageChannelIDList,
		ID:                   id,
	}
	res2, err := r.client.Groups.UpdateMessageChannels(ctx, request2)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res2 != nil && res2.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res2.RawResponse))
		}
		return
	}
	if res2 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res2))
		return
	}
	if res2.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res2.StatusCode), debugResponse(res2.RawResponse))
		return
	}
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var onCallScheduleIds []string = []string{}
	for _, onCallScheduleIdsItem := range data.OnCallScheduleIds {
		onCallScheduleIds = append(onCallScheduleIds, onCallScheduleIdsItem.ValueString())
	}
	onCallScheduleIDList := shared.OnCallScheduleIDList{
		OnCallScheduleIds: onCallScheduleIds,
	}
	var id1 string
	id1 = data.ID.ValueString()

	request3 := operations.UpdateGroupOnCallSchedulesRequest{
		OnCallScheduleIDList: onCallScheduleIDList,
		ID:                   id1,
	}
	res3, err := r.client.Groups.UpdateOnCallSchedule(ctx, request3)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res3 != nil && res3.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res3.RawResponse))
		}
		return
	}
	if res3 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res3))
		return
	}
	if res3.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res3.StatusCode), debugResponse(res3.RawResponse))
		return
	}
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	visibilityInfo := *data.ToSharedVisibilityInfo()
	var id2 string
	id2 = data.ID.ValueString()

	request4 := operations.UpdateGroupVisibilityRequest{
		VisibilityInfo: visibilityInfo,
		ID:             id2,
	}
	res4, err := r.client.Groups.UpdateVisibility(ctx, request4)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res4 != nil && res4.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res4.RawResponse))
		}
		return
	}
	if res4 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res4))
		return
	}
	if res4.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res4.StatusCode), debugResponse(res4.RawResponse))
		return
	}
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var id3 string
	id3 = data.ID.ValueString()

	request5 := operations.GetGroupRequest{
		ID: id3,
	}
	res5, err := r.client.Groups.GetGroup(ctx, request5)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res5 != nil && res5.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res5.RawResponse))
		}
		return
	}
	if res5 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res5))
		return
	}
	if res5.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res5.StatusCode), debugResponse(res5.RawResponse))
		return
	}
	if !(res5.Group != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res5.RawResponse))
		return
	}
	data.RefreshFromSharedGroup(res5.Group)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var id4 string
	id4 = data.ID.ValueString()

	request6 := operations.GetGroupMessageChannelsRequest{
		ID: id4,
	}
	res6, err := r.client.Groups.GetMessageChannels(ctx, request6)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res6 != nil && res6.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res6.RawResponse))
		}
		return
	}
	if res6 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res6))
		return
	}
	if res6.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res6.StatusCode), debugResponse(res6.RawResponse))
		return
	}
	if !(res6.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res6.RawResponse))
		return
	}
	data.RefreshFromOperationsGetGroupMessageChannelsResponseBody(res6.Object)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var id5 string
	id5 = data.ID.ValueString()

	request7 := operations.GetGroupOnCallSchedulesRequest{
		ID: id5,
	}
	res7, err := r.client.Groups.GetOnCallSchedule(ctx, request7)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res7 != nil && res7.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res7.RawResponse))
		}
		return
	}
	if res7 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res7))
		return
	}
	if res7.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res7.StatusCode), debugResponse(res7.RawResponse))
		return
	}
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var id6 string
	id6 = data.ID.ValueString()

	request8 := operations.GetGroupVisibilityRequest{
		ID: id6,
	}
	res8, err := r.client.Groups.GetVisibility(ctx, request8)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res8 != nil && res8.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res8.RawResponse))
		}
		return
	}
	if res8 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res8))
		return
	}
	if res8.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res8.StatusCode), debugResponse(res8.RawResponse))
		return
	}
	if !(res8.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res8.RawResponse))
		return
	}
	data.RefreshFromOperationsGetGroupVisibilityResponseBody(res8.Object)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *GroupResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *GroupResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var id string
	id = data.ID.ValueString()

	request := operations.GetGroupRequest{
		ID: id,
	}
	res, err := r.client.Groups.GetGroup(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Group != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedGroup(res.Group)
	var id1 string
	id1 = data.ID.ValueString()

	request1 := operations.GetGroupMessageChannelsRequest{
		ID: id1,
	}
	res1, err := r.client.Groups.GetMessageChannels(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromOperationsGetGroupMessageChannelsResponseBody(res1.Object)
	var id2 string
	id2 = data.ID.ValueString()

	request2 := operations.GetGroupOnCallSchedulesRequest{
		ID: id2,
	}
	res2, err := r.client.Groups.GetOnCallSchedule(ctx, request2)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res2 != nil && res2.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res2.RawResponse))
		}
		return
	}
	if res2 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res2))
		return
	}
	if res2.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res2.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res2.StatusCode), debugResponse(res2.RawResponse))
		return
	}
	var id3 string
	id3 = data.ID.ValueString()

	request3 := operations.GetGroupVisibilityRequest{
		ID: id3,
	}
	res3, err := r.client.Groups.GetVisibility(ctx, request3)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res3 != nil && res3.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res3.RawResponse))
		}
		return
	}
	if res3 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res3))
		return
	}
	if res3.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res3.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res3.StatusCode), debugResponse(res3.RawResponse))
		return
	}
	if !(res3.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res3.RawResponse))
		return
	}
	data.RefreshFromOperationsGetGroupVisibilityResponseBody(res3.Object)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *GroupResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *GroupResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	singleton := *data.ToSharedUpdateGroupInfo()
	groups := []shared.UpdateGroupInfo{singleton}
	request := shared.UpdateGroupInfoList{
		Groups: groups,
	}
	res, err := r.client.Groups.Update(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.UpdateGroupInfoList != nil && len(res.UpdateGroupInfoList.Groups) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedUpdateGroupInfo(&res.UpdateGroupInfoList.Groups[0])
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	messageChannelIDList := *data.ToSharedMessageChannelIDList()
	var id string
	id = data.ID.ValueString()

	request1 := operations.UpdateGroupMessageChannelsRequest{
		MessageChannelIDList: messageChannelIDList,
		ID:                   id,
	}
	res1, err := r.client.Groups.UpdateMessageChannels(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var onCallScheduleIds []string = []string{}
	for _, onCallScheduleIdsItem := range data.OnCallScheduleIds {
		onCallScheduleIds = append(onCallScheduleIds, onCallScheduleIdsItem.ValueString())
	}
	onCallScheduleIDList := shared.OnCallScheduleIDList{
		OnCallScheduleIds: onCallScheduleIds,
	}
	var id1 string
	id1 = data.ID.ValueString()

	request2 := operations.UpdateGroupOnCallSchedulesRequest{
		OnCallScheduleIDList: onCallScheduleIDList,
		ID:                   id1,
	}
	res2, err := r.client.Groups.UpdateOnCallSchedule(ctx, request2)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res2 != nil && res2.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res2.RawResponse))
		}
		return
	}
	if res2 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res2))
		return
	}
	if res2.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res2.StatusCode), debugResponse(res2.RawResponse))
		return
	}
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	visibilityInfo := *data.ToSharedVisibilityInfo()
	var id2 string
	id2 = data.ID.ValueString()

	request3 := operations.UpdateGroupVisibilityRequest{
		VisibilityInfo: visibilityInfo,
		ID:             id2,
	}
	res3, err := r.client.Groups.UpdateVisibility(ctx, request3)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res3 != nil && res3.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res3.RawResponse))
		}
		return
	}
	if res3 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res3))
		return
	}
	if res3.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res3.StatusCode), debugResponse(res3.RawResponse))
		return
	}
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var id3 string
	id3 = data.ID.ValueString()

	request4 := operations.GetGroupRequest{
		ID: id3,
	}
	res4, err := r.client.Groups.GetGroup(ctx, request4)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res4 != nil && res4.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res4.RawResponse))
		}
		return
	}
	if res4 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res4))
		return
	}
	if res4.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res4.StatusCode), debugResponse(res4.RawResponse))
		return
	}
	if !(res4.Group != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res4.RawResponse))
		return
	}
	data.RefreshFromSharedGroup(res4.Group)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var id4 string
	id4 = data.ID.ValueString()

	request5 := operations.GetGroupMessageChannelsRequest{
		ID: id4,
	}
	res5, err := r.client.Groups.GetMessageChannels(ctx, request5)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res5 != nil && res5.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res5.RawResponse))
		}
		return
	}
	if res5 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res5))
		return
	}
	if res5.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res5.StatusCode), debugResponse(res5.RawResponse))
		return
	}
	if !(res5.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res5.RawResponse))
		return
	}
	data.RefreshFromOperationsGetGroupMessageChannelsResponseBody(res5.Object)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var id5 string
	id5 = data.ID.ValueString()

	request6 := operations.GetGroupOnCallSchedulesRequest{
		ID: id5,
	}
	res6, err := r.client.Groups.GetOnCallSchedule(ctx, request6)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res6 != nil && res6.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res6.RawResponse))
		}
		return
	}
	if res6 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res6))
		return
	}
	if res6.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res6.StatusCode), debugResponse(res6.RawResponse))
		return
	}
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var id6 string
	id6 = data.ID.ValueString()

	request7 := operations.GetGroupVisibilityRequest{
		ID: id6,
	}
	res7, err := r.client.Groups.GetVisibility(ctx, request7)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res7 != nil && res7.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res7.RawResponse))
		}
		return
	}
	if res7 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res7))
		return
	}
	if res7.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res7.StatusCode), debugResponse(res7.RawResponse))
		return
	}
	if !(res7.Object != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res7.RawResponse))
		return
	}
	data.RefreshFromOperationsGetGroupVisibilityResponseBody(res7.Object)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *GroupResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *GroupResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var id string
	id = data.ID.ValueString()

	request := operations.DeleteGroupRequest{
		ID: id,
	}
	res, err := r.client.Groups.Delete(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *GroupResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}

func (r *GroupResource) UpgradeState(ctx context.Context) map[int64]resource.StateUpgrader {
	return map[int64]resource.StateUpgrader{
		0: {StateUpgrader: stateupgraders.GroupStateUpgraderV0},
	}
}
