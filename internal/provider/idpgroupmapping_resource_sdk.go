// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/shared"
)

func (r *IdpGroupMappingResourceModel) RefreshFromSharedIdpGroupMapping(ctx context.Context, resp *shared.IdpGroupMapping) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Alias = types.StringPointerValue(resp.Alias)
		r.AppResourceID = types.StringValue(resp.AppResourceID)
		r.GroupID = types.StringValue(resp.GroupID)
		r.HiddenFromEndUser = types.BoolValue(resp.HiddenFromEndUser)
	}

	return diags
}

func (r *IdpGroupMappingResourceModel) ToOperationsCreateIdpGroupMappingRequest(ctx context.Context) (*operations.CreateIdpGroupMappingRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	requestBody, requestBodyDiags := r.ToOperationsCreateIdpGroupMappingRequestBody(ctx)
	diags.Append(requestBodyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	var appResourceID string
	appResourceID = r.AppResourceID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.CreateIdpGroupMappingRequest{
		RequestBody:   requestBody,
		AppResourceID: appResourceID,
		GroupID:       groupID,
	}

	return &out, diags
}

func (r *IdpGroupMappingResourceModel) ToOperationsCreateIdpGroupMappingRequestBody(ctx context.Context) (*operations.CreateIdpGroupMappingRequestBody, diag.Diagnostics) {
	var diags diag.Diagnostics

	alias := new(string)
	if !r.Alias.IsUnknown() && !r.Alias.IsNull() {
		*alias = r.Alias.ValueString()
	} else {
		alias = nil
	}
	hiddenFromEndUser := new(bool)
	if !r.HiddenFromEndUser.IsUnknown() && !r.HiddenFromEndUser.IsNull() {
		*hiddenFromEndUser = r.HiddenFromEndUser.ValueBool()
	} else {
		hiddenFromEndUser = nil
	}
	out := operations.CreateIdpGroupMappingRequestBody{
		Alias:             alias,
		HiddenFromEndUser: hiddenFromEndUser,
	}

	return &out, diags
}

func (r *IdpGroupMappingResourceModel) ToOperationsDeleteIdpGroupMappingsRequest(ctx context.Context) (*operations.DeleteIdpGroupMappingsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var appResourceID string
	appResourceID = r.AppResourceID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.DeleteIdpGroupMappingsRequest{
		AppResourceID: appResourceID,
		GroupID:       groupID,
	}

	return &out, diags
}

func (r *IdpGroupMappingResourceModel) ToOperationsGetIdpGroupMappingsRequest(ctx context.Context) (*operations.GetIdpGroupMappingsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var appResourceID string
	appResourceID = r.AppResourceID.ValueString()

	out := operations.GetIdpGroupMappingsRequest{
		AppResourceID: appResourceID,
	}

	return &out, diags
}
