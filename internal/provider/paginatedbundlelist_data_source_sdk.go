// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/typeconvert"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/shared"
)

func (r *PaginatedBundleListDataSourceModel) RefreshFromSharedPaginatedBundleList(ctx context.Context, resp *shared.PaginatedBundleList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if r.Bundles == nil {
			r.Bundles = []tfTypes.Bundle{}
		}

		for _, bundlesItem := range resp.Bundles {
			var bundles tfTypes.Bundle

			bundles.AdminOwnerID = types.StringPointerValue(bundlesItem.AdminOwnerID)
			bundles.BundleID = types.StringPointerValue(bundlesItem.BundleID)
			bundles.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(bundlesItem.CreatedAt))
			bundles.Description = types.StringPointerValue(bundlesItem.Description)
			bundles.Name = types.StringPointerValue(bundlesItem.Name)
			bundles.TotalNumGroups = types.Int64PointerValue(bundlesItem.TotalNumGroups)
			bundles.TotalNumItems = types.Int64PointerValue(bundlesItem.TotalNumItems)
			bundles.TotalNumResources = types.Int64PointerValue(bundlesItem.TotalNumResources)
			bundles.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(bundlesItem.UpdatedAt))

			r.Bundles = append(r.Bundles, bundles)
		}
		r.Next = types.StringPointerValue(resp.Next)
		r.Previous = types.StringPointerValue(resp.Previous)
		r.TotalCount = types.Int64PointerValue(resp.TotalCount)
	}

	return diags
}

func (r *PaginatedBundleListDataSourceModel) ToOperationsGetBundlesRequest(ctx context.Context) (*operations.GetBundlesRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	contains := new(string)
	if !r.Contains.IsUnknown() && !r.Contains.IsNull() {
		*contains = r.Contains.ValueString()
	} else {
		contains = nil
	}
	out := operations.GetBundlesRequest{
		Contains: contains,
	}

	return &out, diags
}
