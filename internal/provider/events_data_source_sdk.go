// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/provider/typeconvert"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/shared"
)

func (r *EventsDataSourceModel) ToOperationsGetEventsRequest(ctx context.Context) (*operations.GetEventsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	actorFilter := new(string)
	if !r.ActorFilter.IsUnknown() && !r.ActorFilter.IsNull() {
		*actorFilter = r.ActorFilter.ValueString()
	} else {
		actorFilter = nil
	}
	apiTokenFilter := new(string)
	if !r.APITokenFilter.IsUnknown() && !r.APITokenFilter.IsNull() {
		*apiTokenFilter = r.APITokenFilter.ValueString()
	} else {
		apiTokenFilter = nil
	}
	cursor := new(string)
	if !r.Cursor.IsUnknown() && !r.Cursor.IsNull() {
		*cursor = r.Cursor.ValueString()
	} else {
		cursor = nil
	}
	endDateFilter := new(string)
	if !r.EndDateFilter.IsUnknown() && !r.EndDateFilter.IsNull() {
		*endDateFilter = r.EndDateFilter.ValueString()
	} else {
		endDateFilter = nil
	}
	eventTypeFilter := new(string)
	if !r.EventTypeFilter.IsUnknown() && !r.EventTypeFilter.IsNull() {
		*eventTypeFilter = r.EventTypeFilter.ValueString()
	} else {
		eventTypeFilter = nil
	}
	objectFilter := new(string)
	if !r.ObjectFilter.IsUnknown() && !r.ObjectFilter.IsNull() {
		*objectFilter = r.ObjectFilter.ValueString()
	} else {
		objectFilter = nil
	}
	pageSize := new(int64)
	if !r.PageSize.IsUnknown() && !r.PageSize.IsNull() {
		*pageSize = r.PageSize.ValueInt64()
	} else {
		pageSize = nil
	}
	startDateFilter := new(string)
	if !r.StartDateFilter.IsUnknown() && !r.StartDateFilter.IsNull() {
		*startDateFilter = r.StartDateFilter.ValueString()
	} else {
		startDateFilter = nil
	}
	out := operations.GetEventsRequest{
		ActorFilter:     actorFilter,
		APITokenFilter:  apiTokenFilter,
		Cursor:          cursor,
		EndDateFilter:   endDateFilter,
		EventTypeFilter: eventTypeFilter,
		ObjectFilter:    objectFilter,
		PageSize:        pageSize,
		StartDateFilter: startDateFilter,
	}

	return &out, diags
}

func (r *EventsDataSourceModel) RefreshFromSharedPaginatedEventList(ctx context.Context, resp *shared.PaginatedEventList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Next = types.StringPointerValue(resp.Next)
		r.Previous = types.StringPointerValue(resp.Previous)
		r.Results = []tfTypes.Event{}
		if len(r.Results) > len(resp.Results) {
			r.Results = r.Results[:len(resp.Results)]
		}
		for resultsCount, resultsItem := range resp.Results {
			var results tfTypes.Event
			results.ActorEmail = types.StringPointerValue(resultsItem.ActorEmail)
			results.ActorIPAddress = types.StringPointerValue(resultsItem.ActorIPAddress)
			actorNameResult, _ := json.Marshal(resultsItem.ActorName)
			results.ActorName = types.StringValue(string(actorNameResult))
			results.ActorUserID = types.StringValue(resultsItem.ActorUserID)
			results.APITokenName = types.StringPointerValue(resultsItem.APITokenName)
			results.APITokenPreview = types.StringPointerValue(resultsItem.APITokenPreview)
			results.CreatedAt = types.StringValue(typeconvert.TimeToString(resultsItem.CreatedAt))
			results.EventID = types.StringValue(resultsItem.EventID)
			results.EventType = types.StringValue(resultsItem.EventType)
			results.SubEvents = []tfTypes.SubEvent{}
			for subEventsCount, subEventsItem := range resultsItem.SubEvents {
				var subEvents tfTypes.SubEvent
				if subEventsItem.AdditionalProperties == nil {
					subEvents.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult, _ := json.Marshal(subEventsItem.AdditionalProperties)
					subEvents.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
				}
				subEvents.SubEventType = types.StringValue(subEventsItem.SubEventType)
				if subEventsCount+1 > len(results.SubEvents) {
					results.SubEvents = append(results.SubEvents, subEvents)
				} else {
					results.SubEvents[subEventsCount].AdditionalProperties = subEvents.AdditionalProperties
					results.SubEvents[subEventsCount].SubEventType = subEvents.SubEventType
				}
			}
			if resultsCount+1 > len(r.Results) {
				r.Results = append(r.Results, results)
			} else {
				r.Results[resultsCount].ActorEmail = results.ActorEmail
				r.Results[resultsCount].ActorIPAddress = results.ActorIPAddress
				r.Results[resultsCount].ActorName = results.ActorName
				r.Results[resultsCount].ActorUserID = results.ActorUserID
				r.Results[resultsCount].APITokenName = results.APITokenName
				r.Results[resultsCount].APITokenPreview = results.APITokenPreview
				r.Results[resultsCount].CreatedAt = results.CreatedAt
				r.Results[resultsCount].EventID = results.EventID
				r.Results[resultsCount].EventType = results.EventType
				r.Results[resultsCount].SubEvents = results.SubEvents
			}
		}
	}

	return diags
}
