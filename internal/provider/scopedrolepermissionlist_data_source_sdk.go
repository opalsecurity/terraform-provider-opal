// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/shared"
)

func (r *ScopedRolePermissionListDataSourceModel) RefreshFromSharedScopedRolePermissionList(ctx context.Context, resp *shared.ScopedRolePermissionList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Permissions = []tfTypes.ScopedRolePermission{}
		if len(r.Permissions) > len(resp.Permissions) {
			r.Permissions = r.Permissions[:len(resp.Permissions)]
		}
		for permissionsCount, permissionsItem := range resp.Permissions {
			var permissions tfTypes.ScopedRolePermission
			permissions.AllowAll = types.BoolValue(permissionsItem.AllowAll)
			permissions.PermissionName = types.StringValue(string(permissionsItem.PermissionName))
			permissions.TargetIds = make([]types.String, 0, len(permissionsItem.TargetIds))
			for _, v := range permissionsItem.TargetIds {
				permissions.TargetIds = append(permissions.TargetIds, types.StringValue(v))
			}
			permissions.TargetType = types.StringValue(string(permissionsItem.TargetType))
			if permissionsCount+1 > len(r.Permissions) {
				r.Permissions = append(r.Permissions, permissions)
			} else {
				r.Permissions[permissionsCount].AllowAll = permissions.AllowAll
				r.Permissions[permissionsCount].PermissionName = permissions.PermissionName
				r.Permissions[permissionsCount].TargetIds = permissions.TargetIds
				r.Permissions[permissionsCount].TargetType = permissions.TargetType
			}
		}
	}

	return diags
}

func (r *ScopedRolePermissionListDataSourceModel) ToOperationsGetResourceScopedRolePermissionsRequest(ctx context.Context) (*operations.GetResourceScopedRolePermissionsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var resourceID string
	resourceID = r.ResourceID.ValueString()

	out := operations.GetResourceScopedRolePermissionsRequest{
		ResourceID: resourceID,
	}

	return &out, diags
}
