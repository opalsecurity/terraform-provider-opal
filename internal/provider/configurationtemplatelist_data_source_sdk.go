// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/shared"
)

func (r *ConfigurationTemplateListDataSourceModel) RefreshFromSharedPaginatedConfigurationTemplateList(ctx context.Context, resp *shared.PaginatedConfigurationTemplateList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Results = []tfTypes.ConfigurationTemplate{}

		for _, resultsItem := range resp.Results {
			var results tfTypes.ConfigurationTemplate

			results.AdminOwnerID = types.StringPointerValue(resultsItem.AdminOwnerID)
			results.BreakGlassUserIds = make([]types.String, 0, len(resultsItem.BreakGlassUserIds))
			for _, v := range resultsItem.BreakGlassUserIds {
				results.BreakGlassUserIds = append(results.BreakGlassUserIds, types.StringValue(v))
			}
			results.ConfigurationTemplateID = types.StringPointerValue(resultsItem.ConfigurationTemplateID)
			results.CustomRequestNotification = types.StringPointerValue(resultsItem.CustomRequestNotification)
			results.LinkedAuditMessageChannelIds = make([]types.String, 0, len(resultsItem.LinkedAuditMessageChannelIds))
			for _, v := range resultsItem.LinkedAuditMessageChannelIds {
				results.LinkedAuditMessageChannelIds = append(results.LinkedAuditMessageChannelIds, types.StringValue(v))
			}
			results.MemberOncallScheduleIds = make([]types.String, 0, len(resultsItem.MemberOncallScheduleIds))
			for _, v := range resultsItem.MemberOncallScheduleIds {
				results.MemberOncallScheduleIds = append(results.MemberOncallScheduleIds, types.StringValue(v))
			}
			results.Name = types.StringPointerValue(resultsItem.Name)
			results.RequestConfigurationID = types.StringPointerValue(resultsItem.RequestConfigurationID)
			results.RequireMfaToApprove = types.BoolPointerValue(resultsItem.RequireMfaToApprove)
			results.RequireMfaToConnect = types.BoolPointerValue(resultsItem.RequireMfaToConnect)
			if resultsItem.TicketPropagation == nil {
				results.TicketPropagation = nil
			} else {
				results.TicketPropagation = &tfTypes.TicketPropagationConfiguration{}
				results.TicketPropagation.EnabledOnGrant = types.BoolValue(resultsItem.TicketPropagation.EnabledOnGrant)
				results.TicketPropagation.EnabledOnRevocation = types.BoolValue(resultsItem.TicketPropagation.EnabledOnRevocation)
				results.TicketPropagation.TicketProjectID = types.StringPointerValue(resultsItem.TicketPropagation.TicketProjectID)
				if resultsItem.TicketPropagation.TicketProvider != nil {
					results.TicketPropagation.TicketProvider = types.StringValue(string(*resultsItem.TicketPropagation.TicketProvider))
				} else {
					results.TicketPropagation.TicketProvider = types.StringNull()
				}
			}
			if resultsItem.Visibility == nil {
				results.Visibility = nil
			} else {
				results.Visibility = &tfTypes.VisibilityInfo{}
				results.Visibility.Visibility = types.StringValue(string(resultsItem.Visibility.Visibility))
				results.Visibility.VisibilityGroupIds = make([]types.String, 0, len(resultsItem.Visibility.VisibilityGroupIds))
				for _, v := range resultsItem.Visibility.VisibilityGroupIds {
					results.Visibility.VisibilityGroupIds = append(results.Visibility.VisibilityGroupIds, types.StringValue(v))
				}
			}

			r.Results = append(r.Results, results)
		}
	}

	return diags
}
