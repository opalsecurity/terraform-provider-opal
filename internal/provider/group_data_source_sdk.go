// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/typeconvert"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/shared"
)

func (r *GroupDataSourceModel) RefreshFromOperationsGetGroupMessageChannelsResponseBody(ctx context.Context, resp *operations.GetGroupMessageChannelsResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.MessageChannels.Channels = []tfTypes.MessageChannel{}

		for _, channelsItem := range resp.Channels {
			var channels tfTypes.MessageChannel

			channels.ID = types.StringValue(channelsItem.ID)
			channels.IsPrivate = types.BoolPointerValue(channelsItem.IsPrivate)
			channels.Name = types.StringPointerValue(channelsItem.Name)
			channels.RemoteID = types.StringPointerValue(channelsItem.RemoteID)
			if channelsItem.ThirdPartyProvider != nil {
				channels.ThirdPartyProvider = types.StringValue(string(*channelsItem.ThirdPartyProvider))
			} else {
				channels.ThirdPartyProvider = types.StringNull()
			}

			r.MessageChannels.Channels = append(r.MessageChannels.Channels, channels)
		}
	}

	return diags
}

func (r *GroupDataSourceModel) RefreshFromOperationsGetGroupVisibilityResponseBody(ctx context.Context, resp *operations.GetGroupVisibilityResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Visibility = types.StringValue(string(resp.Visibility))
		r.VisibilityGroupIds = make([]types.String, 0, len(resp.VisibilityGroupIds))
		for _, v := range resp.VisibilityGroupIds {
			r.VisibilityGroupIds = append(r.VisibilityGroupIds, types.StringValue(v))
		}
	}

	return diags
}

func (r *GroupDataSourceModel) RefreshFromSharedGroup(ctx context.Context, resp *shared.Group) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AdminOwnerID = types.StringPointerValue(resp.AdminOwnerID)
		r.AppID = types.StringPointerValue(resp.AppID)
		r.CustomRequestNotification = types.StringPointerValue(resp.CustomRequestNotification)
		r.Description = types.StringPointerValue(resp.Description)
		r.GroupBindingID = types.StringPointerValue(resp.GroupBindingID)
		r.GroupLeaderUserIds = make([]types.String, 0, len(resp.GroupLeaderUserIds))
		for _, v := range resp.GroupLeaderUserIds {
			r.GroupLeaderUserIds = append(r.GroupLeaderUserIds, types.StringValue(v))
		}
		if resp.GroupType != nil {
			r.GroupType = types.StringValue(string(*resp.GroupType))
		} else {
			r.GroupType = types.StringNull()
		}
		r.ID = types.StringValue(resp.ID)
		if resp.LastSuccessfulSync == nil {
			r.LastSuccessfulSync = nil
		} else {
			r.LastSuccessfulSync = &tfTypes.SyncTask{}
			r.LastSuccessfulSync.CompletedAt = types.StringValue(typeconvert.TimeToString(resp.LastSuccessfulSync.CompletedAt))
			r.LastSuccessfulSync.ID = types.StringValue(resp.LastSuccessfulSync.ID)
		}
		r.Name = types.StringPointerValue(resp.Name)
		if resp.RemoteInfo == nil {
			r.RemoteInfo = nil
		} else {
			r.RemoteInfo = &tfTypes.GroupRemoteInfo{}
			if resp.RemoteInfo.ActiveDirectoryGroup == nil {
				r.RemoteInfo.ActiveDirectoryGroup = nil
			} else {
				r.RemoteInfo.ActiveDirectoryGroup = &tfTypes.ActiveDirectoryGroup{}
				r.RemoteInfo.ActiveDirectoryGroup.GroupID = types.StringValue(resp.RemoteInfo.ActiveDirectoryGroup.GroupID)
			}
			if resp.RemoteInfo.AzureAdMicrosoft365Group == nil {
				r.RemoteInfo.AzureAdMicrosoft365Group = nil
			} else {
				r.RemoteInfo.AzureAdMicrosoft365Group = &tfTypes.ActiveDirectoryGroup{}
				r.RemoteInfo.AzureAdMicrosoft365Group.GroupID = types.StringValue(resp.RemoteInfo.AzureAdMicrosoft365Group.GroupID)
			}
			if resp.RemoteInfo.AzureAdSecurityGroup == nil {
				r.RemoteInfo.AzureAdSecurityGroup = nil
			} else {
				r.RemoteInfo.AzureAdSecurityGroup = &tfTypes.ActiveDirectoryGroup{}
				r.RemoteInfo.AzureAdSecurityGroup.GroupID = types.StringValue(resp.RemoteInfo.AzureAdSecurityGroup.GroupID)
			}
			if resp.RemoteInfo.DuoGroup == nil {
				r.RemoteInfo.DuoGroup = nil
			} else {
				r.RemoteInfo.DuoGroup = &tfTypes.ActiveDirectoryGroup{}
				r.RemoteInfo.DuoGroup.GroupID = types.StringValue(resp.RemoteInfo.DuoGroup.GroupID)
			}
			if resp.RemoteInfo.GithubTeam == nil {
				r.RemoteInfo.GithubTeam = nil
			} else {
				r.RemoteInfo.GithubTeam = &tfTypes.GithubTeam{}
				r.RemoteInfo.GithubTeam.TeamSlug = types.StringValue(resp.RemoteInfo.GithubTeam.TeamSlug)
			}
			if resp.RemoteInfo.GitlabGroup == nil {
				r.RemoteInfo.GitlabGroup = nil
			} else {
				r.RemoteInfo.GitlabGroup = &tfTypes.ActiveDirectoryGroup{}
				r.RemoteInfo.GitlabGroup.GroupID = types.StringValue(resp.RemoteInfo.GitlabGroup.GroupID)
			}
			if resp.RemoteInfo.GoogleGroup == nil {
				r.RemoteInfo.GoogleGroup = nil
			} else {
				r.RemoteInfo.GoogleGroup = &tfTypes.ActiveDirectoryGroup{}
				r.RemoteInfo.GoogleGroup.GroupID = types.StringValue(resp.RemoteInfo.GoogleGroup.GroupID)
			}
			if resp.RemoteInfo.LdapGroup == nil {
				r.RemoteInfo.LdapGroup = nil
			} else {
				r.RemoteInfo.LdapGroup = &tfTypes.ActiveDirectoryGroup{}
				r.RemoteInfo.LdapGroup.GroupID = types.StringValue(resp.RemoteInfo.LdapGroup.GroupID)
			}
			if resp.RemoteInfo.OktaGroup == nil {
				r.RemoteInfo.OktaGroup = nil
			} else {
				r.RemoteInfo.OktaGroup = &tfTypes.ActiveDirectoryGroup{}
				r.RemoteInfo.OktaGroup.GroupID = types.StringValue(resp.RemoteInfo.OktaGroup.GroupID)
			}
			if resp.RemoteInfo.OktaGroupRule == nil {
				r.RemoteInfo.OktaGroupRule = nil
			} else {
				r.RemoteInfo.OktaGroupRule = &tfTypes.OktaGroupRule{}
				r.RemoteInfo.OktaGroupRule.RuleID = types.StringValue(resp.RemoteInfo.OktaGroupRule.RuleID)
			}
			if resp.RemoteInfo.SnowflakeRole == nil {
				r.RemoteInfo.SnowflakeRole = nil
			} else {
				r.RemoteInfo.SnowflakeRole = &tfTypes.SnowflakeRole{}
				r.RemoteInfo.SnowflakeRole.RoleID = types.StringValue(resp.RemoteInfo.SnowflakeRole.RoleID)
			}
			if resp.RemoteInfo.WorkdayUserSecurityGroup == nil {
				r.RemoteInfo.WorkdayUserSecurityGroup = nil
			} else {
				r.RemoteInfo.WorkdayUserSecurityGroup = &tfTypes.ActiveDirectoryGroup{}
				r.RemoteInfo.WorkdayUserSecurityGroup.GroupID = types.StringValue(resp.RemoteInfo.WorkdayUserSecurityGroup.GroupID)
			}
		}
		r.RemoteName = types.StringPointerValue(resp.RemoteName)
		r.RequestConfigurations = []tfTypes.RequestConfiguration{}

		for _, requestConfigurationsItem := range resp.RequestConfigurations {
			var requestConfigurations tfTypes.RequestConfiguration

			requestConfigurations.AllowRequests = types.BoolValue(requestConfigurationsItem.AllowRequests)
			requestConfigurations.AutoApproval = types.BoolValue(requestConfigurationsItem.AutoApproval)
			if requestConfigurationsItem.Condition == nil {
				requestConfigurations.Condition = nil
			} else {
				requestConfigurations.Condition = &tfTypes.Condition{}
				requestConfigurations.Condition.GroupIds = make([]types.String, 0, len(requestConfigurationsItem.Condition.GroupIds))
				for _, v := range requestConfigurationsItem.Condition.GroupIds {
					requestConfigurations.Condition.GroupIds = append(requestConfigurations.Condition.GroupIds, types.StringValue(v))
				}
				requestConfigurations.Condition.RoleRemoteIds = make([]types.String, 0, len(requestConfigurationsItem.Condition.RoleRemoteIds))
				for _, v := range requestConfigurationsItem.Condition.RoleRemoteIds {
					requestConfigurations.Condition.RoleRemoteIds = append(requestConfigurations.Condition.RoleRemoteIds, types.StringValue(v))
				}
			}
			requestConfigurations.MaxDuration = types.Int64PointerValue(requestConfigurationsItem.MaxDuration)
			requestConfigurations.Priority = types.Int64Value(requestConfigurationsItem.Priority)
			requestConfigurations.RecommendedDuration = types.Int64PointerValue(requestConfigurationsItem.RecommendedDuration)
			requestConfigurations.RequestTemplateID = types.StringPointerValue(requestConfigurationsItem.RequestTemplateID)
			requestConfigurations.RequireMfaToRequest = types.BoolValue(requestConfigurationsItem.RequireMfaToRequest)
			requestConfigurations.RequireSupportTicket = types.BoolValue(requestConfigurationsItem.RequireSupportTicket)
			requestConfigurations.ReviewerStages = []tfTypes.ReviewerStage{}

			for _, reviewerStagesItem := range requestConfigurationsItem.ReviewerStages {
				var reviewerStages tfTypes.ReviewerStage

				if reviewerStagesItem.Operator != nil {
					reviewerStages.Operator = types.StringValue(string(*reviewerStagesItem.Operator))
				} else {
					reviewerStages.Operator = types.StringNull()
				}
				reviewerStages.OwnerIds = make([]types.String, 0, len(reviewerStagesItem.OwnerIds))
				for _, v := range reviewerStagesItem.OwnerIds {
					reviewerStages.OwnerIds = append(reviewerStages.OwnerIds, types.StringValue(v))
				}
				reviewerStages.RequireAdminApproval = types.BoolPointerValue(reviewerStagesItem.RequireAdminApproval)
				reviewerStages.RequireManagerApproval = types.BoolPointerValue(reviewerStagesItem.RequireManagerApproval)

				requestConfigurations.ReviewerStages = append(requestConfigurations.ReviewerStages, reviewerStages)
			}

			r.RequestConfigurations = append(r.RequestConfigurations, requestConfigurations)
		}
		r.RequireMfaToApprove = types.BoolPointerValue(resp.RequireMfaToApprove)
		if resp.RiskSensitivity != nil {
			r.RiskSensitivity = types.StringValue(string(*resp.RiskSensitivity))
		} else {
			r.RiskSensitivity = types.StringNull()
		}
		if resp.RiskSensitivityOverride != nil {
			r.RiskSensitivityOverride = types.StringValue(string(*resp.RiskSensitivityOverride))
		} else {
			r.RiskSensitivityOverride = types.StringNull()
		}
	}

	return diags
}

func (r *GroupDataSourceModel) ToOperationsGetGroupMessageChannelsRequest(ctx context.Context) (*operations.GetGroupMessageChannelsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetGroupMessageChannelsRequest{
		ID: id,
	}

	return &out, diags
}

func (r *GroupDataSourceModel) ToOperationsGetGroupOnCallSchedulesRequest(ctx context.Context) (*operations.GetGroupOnCallSchedulesRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetGroupOnCallSchedulesRequest{
		ID: id,
	}

	return &out, diags
}

func (r *GroupDataSourceModel) ToOperationsGetGroupRequest(ctx context.Context) (*operations.GetGroupRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetGroupRequest{
		ID: id,
	}

	return &out, diags
}

func (r *GroupDataSourceModel) ToOperationsGetGroupVisibilityRequest(ctx context.Context) (*operations.GetGroupVisibilityRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetGroupVisibilityRequest{
		ID: id,
	}

	return &out, diags
}
