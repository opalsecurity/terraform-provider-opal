// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/typeconvert"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/shared"
	"time"
)

func (r *DelegationResourceModel) RefreshFromSharedDelegation(ctx context.Context, resp *shared.Delegation) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.DelegateUserID = types.StringValue(resp.DelegateUserID)
		r.DelegatorUserID = types.StringValue(resp.DelegatorUserID)
		r.EndTime = types.StringValue(typeconvert.TimeToString(resp.EndTime))
		r.ID = types.StringValue(resp.ID)
		r.Reason = types.StringValue(resp.Reason)
		r.StartTime = types.StringValue(typeconvert.TimeToString(resp.StartTime))
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *DelegationResourceModel) ToOperationsDeleteDelegationRequest(ctx context.Context) (*operations.DeleteDelegationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var delegationID string
	delegationID = r.DelegationID.ValueString()

	out := operations.DeleteDelegationRequest{
		DelegationID: delegationID,
	}

	return &out, diags
}

func (r *DelegationResourceModel) ToSharedCreateDelegationRequest(ctx context.Context) (*shared.CreateDelegationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var delegateUserID string
	delegateUserID = r.DelegateUserID.ValueString()

	var delegatorUserID string
	delegatorUserID = r.DelegatorUserID.ValueString()

	endTime, _ := time.Parse(time.RFC3339Nano, r.EndTime.ValueString())
	var reason string
	reason = r.Reason.ValueString()

	startTime, _ := time.Parse(time.RFC3339Nano, r.StartTime.ValueString())
	out := shared.CreateDelegationRequest{
		DelegateUserID:  delegateUserID,
		DelegatorUserID: delegatorUserID,
		EndTime:         endTime,
		Reason:          reason,
		StartTime:       startTime,
	}

	return &out, diags
}
