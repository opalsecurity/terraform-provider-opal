// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/shared"
)

func (r *GroupListDataSourceModel) RefreshFromSharedPaginatedGroupsList(ctx context.Context, resp *shared.PaginatedGroupsList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Results = []tfTypes.Group{}
		if len(r.Results) > len(resp.Results) {
			r.Results = r.Results[:len(resp.Results)]
		}
		for resultsCount, resultsItem := range resp.Results {
			var results tfTypes.Group
			results.AdminOwnerID = types.StringPointerValue(resultsItem.AdminOwnerID)
			results.AppID = types.StringPointerValue(resultsItem.AppID)
			results.CustomRequestNotification = types.StringPointerValue(resultsItem.CustomRequestNotification)
			results.Description = types.StringPointerValue(resultsItem.Description)
			results.GroupBindingID = types.StringPointerValue(resultsItem.GroupBindingID)
			results.GroupLeaderUserIds = make([]types.String, 0, len(resultsItem.GroupLeaderUserIds))
			for _, v := range resultsItem.GroupLeaderUserIds {
				results.GroupLeaderUserIds = append(results.GroupLeaderUserIds, types.StringValue(v))
			}
			if resultsItem.GroupType != nil {
				results.GroupType = types.StringValue(string(*resultsItem.GroupType))
			} else {
				results.GroupType = types.StringNull()
			}
			results.ID = types.StringValue(resultsItem.ID)
			results.Name = types.StringPointerValue(resultsItem.Name)
			if resultsItem.RemoteInfo == nil {
				results.RemoteInfo = nil
			} else {
				results.RemoteInfo = &tfTypes.GroupRemoteInfo{}
				if resultsItem.RemoteInfo.ActiveDirectoryGroup == nil {
					results.RemoteInfo.ActiveDirectoryGroup = nil
				} else {
					results.RemoteInfo.ActiveDirectoryGroup = &tfTypes.ActiveDirectoryGroup{}
					results.RemoteInfo.ActiveDirectoryGroup.GroupID = types.StringValue(resultsItem.RemoteInfo.ActiveDirectoryGroup.GroupID)
				}
				if resultsItem.RemoteInfo.AzureAdMicrosoft365Group == nil {
					results.RemoteInfo.AzureAdMicrosoft365Group = nil
				} else {
					results.RemoteInfo.AzureAdMicrosoft365Group = &tfTypes.ActiveDirectoryGroup{}
					results.RemoteInfo.AzureAdMicrosoft365Group.GroupID = types.StringValue(resultsItem.RemoteInfo.AzureAdMicrosoft365Group.GroupID)
				}
				if resultsItem.RemoteInfo.AzureAdSecurityGroup == nil {
					results.RemoteInfo.AzureAdSecurityGroup = nil
				} else {
					results.RemoteInfo.AzureAdSecurityGroup = &tfTypes.ActiveDirectoryGroup{}
					results.RemoteInfo.AzureAdSecurityGroup.GroupID = types.StringValue(resultsItem.RemoteInfo.AzureAdSecurityGroup.GroupID)
				}
				if resultsItem.RemoteInfo.DuoGroup == nil {
					results.RemoteInfo.DuoGroup = nil
				} else {
					results.RemoteInfo.DuoGroup = &tfTypes.ActiveDirectoryGroup{}
					results.RemoteInfo.DuoGroup.GroupID = types.StringValue(resultsItem.RemoteInfo.DuoGroup.GroupID)
				}
				if resultsItem.RemoteInfo.GithubTeam == nil {
					results.RemoteInfo.GithubTeam = nil
				} else {
					results.RemoteInfo.GithubTeam = &tfTypes.GithubTeam{}
					results.RemoteInfo.GithubTeam.TeamSlug = types.StringValue(resultsItem.RemoteInfo.GithubTeam.TeamSlug)
				}
				if resultsItem.RemoteInfo.GitlabGroup == nil {
					results.RemoteInfo.GitlabGroup = nil
				} else {
					results.RemoteInfo.GitlabGroup = &tfTypes.ActiveDirectoryGroup{}
					results.RemoteInfo.GitlabGroup.GroupID = types.StringValue(resultsItem.RemoteInfo.GitlabGroup.GroupID)
				}
				if resultsItem.RemoteInfo.GoogleGroup == nil {
					results.RemoteInfo.GoogleGroup = nil
				} else {
					results.RemoteInfo.GoogleGroup = &tfTypes.ActiveDirectoryGroup{}
					results.RemoteInfo.GoogleGroup.GroupID = types.StringValue(resultsItem.RemoteInfo.GoogleGroup.GroupID)
				}
				if resultsItem.RemoteInfo.LdapGroup == nil {
					results.RemoteInfo.LdapGroup = nil
				} else {
					results.RemoteInfo.LdapGroup = &tfTypes.ActiveDirectoryGroup{}
					results.RemoteInfo.LdapGroup.GroupID = types.StringValue(resultsItem.RemoteInfo.LdapGroup.GroupID)
				}
				if resultsItem.RemoteInfo.OktaGroup == nil {
					results.RemoteInfo.OktaGroup = nil
				} else {
					results.RemoteInfo.OktaGroup = &tfTypes.ActiveDirectoryGroup{}
					results.RemoteInfo.OktaGroup.GroupID = types.StringValue(resultsItem.RemoteInfo.OktaGroup.GroupID)
				}
				if resultsItem.RemoteInfo.SnowflakeRole == nil {
					results.RemoteInfo.SnowflakeRole = nil
				} else {
					results.RemoteInfo.SnowflakeRole = &tfTypes.SnowflakeRole{}
					results.RemoteInfo.SnowflakeRole.RoleID = types.StringValue(resultsItem.RemoteInfo.SnowflakeRole.RoleID)
				}
			}
			results.RemoteName = types.StringPointerValue(resultsItem.RemoteName)
			results.RequestConfigurations = []tfTypes.RequestConfiguration{}
			for requestConfigurationsCount, requestConfigurationsItem := range resultsItem.RequestConfigurations {
				var requestConfigurations tfTypes.RequestConfiguration
				requestConfigurations.AllowRequests = types.BoolValue(requestConfigurationsItem.AllowRequests)
				requestConfigurations.AutoApproval = types.BoolValue(requestConfigurationsItem.AutoApproval)
				if requestConfigurationsItem.Condition == nil {
					requestConfigurations.Condition = nil
				} else {
					requestConfigurations.Condition = &tfTypes.Condition{}
					requestConfigurations.Condition.GroupIds = make([]types.String, 0, len(requestConfigurationsItem.Condition.GroupIds))
					for _, v := range requestConfigurationsItem.Condition.GroupIds {
						requestConfigurations.Condition.GroupIds = append(requestConfigurations.Condition.GroupIds, types.StringValue(v))
					}
					requestConfigurations.Condition.RoleRemoteIds = make([]types.String, 0, len(requestConfigurationsItem.Condition.RoleRemoteIds))
					for _, v := range requestConfigurationsItem.Condition.RoleRemoteIds {
						requestConfigurations.Condition.RoleRemoteIds = append(requestConfigurations.Condition.RoleRemoteIds, types.StringValue(v))
					}
				}
				requestConfigurations.MaxDuration = types.Int64PointerValue(requestConfigurationsItem.MaxDuration)
				requestConfigurations.Priority = types.Int64Value(requestConfigurationsItem.Priority)
				requestConfigurations.RecommendedDuration = types.Int64PointerValue(requestConfigurationsItem.RecommendedDuration)
				requestConfigurations.RequestTemplateID = types.StringPointerValue(requestConfigurationsItem.RequestTemplateID)
				requestConfigurations.RequireMfaToRequest = types.BoolValue(requestConfigurationsItem.RequireMfaToRequest)
				requestConfigurations.RequireSupportTicket = types.BoolValue(requestConfigurationsItem.RequireSupportTicket)
				requestConfigurations.ReviewerStages = []tfTypes.ReviewerStage{}
				for reviewerStagesCount, reviewerStagesItem := range requestConfigurationsItem.ReviewerStages {
					var reviewerStages tfTypes.ReviewerStage
					if reviewerStagesItem.Operator != nil {
						reviewerStages.Operator = types.StringValue(string(*reviewerStagesItem.Operator))
					} else {
						reviewerStages.Operator = types.StringNull()
					}
					reviewerStages.OwnerIds = make([]types.String, 0, len(reviewerStagesItem.OwnerIds))
					for _, v := range reviewerStagesItem.OwnerIds {
						reviewerStages.OwnerIds = append(reviewerStages.OwnerIds, types.StringValue(v))
					}
					reviewerStages.RequireAdminApproval = types.BoolPointerValue(reviewerStagesItem.RequireAdminApproval)
					reviewerStages.RequireManagerApproval = types.BoolPointerValue(reviewerStagesItem.RequireManagerApproval)
					if reviewerStagesCount+1 > len(requestConfigurations.ReviewerStages) {
						requestConfigurations.ReviewerStages = append(requestConfigurations.ReviewerStages, reviewerStages)
					} else {
						requestConfigurations.ReviewerStages[reviewerStagesCount].Operator = reviewerStages.Operator
						requestConfigurations.ReviewerStages[reviewerStagesCount].OwnerIds = reviewerStages.OwnerIds
						requestConfigurations.ReviewerStages[reviewerStagesCount].RequireAdminApproval = reviewerStages.RequireAdminApproval
						requestConfigurations.ReviewerStages[reviewerStagesCount].RequireManagerApproval = reviewerStages.RequireManagerApproval
					}
				}
				if requestConfigurationsCount+1 > len(results.RequestConfigurations) {
					results.RequestConfigurations = append(results.RequestConfigurations, requestConfigurations)
				} else {
					results.RequestConfigurations[requestConfigurationsCount].AllowRequests = requestConfigurations.AllowRequests
					results.RequestConfigurations[requestConfigurationsCount].AutoApproval = requestConfigurations.AutoApproval
					results.RequestConfigurations[requestConfigurationsCount].Condition = requestConfigurations.Condition
					results.RequestConfigurations[requestConfigurationsCount].MaxDuration = requestConfigurations.MaxDuration
					results.RequestConfigurations[requestConfigurationsCount].Priority = requestConfigurations.Priority
					results.RequestConfigurations[requestConfigurationsCount].RecommendedDuration = requestConfigurations.RecommendedDuration
					results.RequestConfigurations[requestConfigurationsCount].RequestTemplateID = requestConfigurations.RequestTemplateID
					results.RequestConfigurations[requestConfigurationsCount].RequireMfaToRequest = requestConfigurations.RequireMfaToRequest
					results.RequestConfigurations[requestConfigurationsCount].RequireSupportTicket = requestConfigurations.RequireSupportTicket
					results.RequestConfigurations[requestConfigurationsCount].ReviewerStages = requestConfigurations.ReviewerStages
				}
			}
			results.RequireMfaToApprove = types.BoolPointerValue(resultsItem.RequireMfaToApprove)
			if resultsItem.RiskSensitivity != nil {
				results.RiskSensitivity = types.StringValue(string(*resultsItem.RiskSensitivity))
			} else {
				results.RiskSensitivity = types.StringNull()
			}
			if resultsItem.RiskSensitivityOverride != nil {
				results.RiskSensitivityOverride = types.StringValue(string(*resultsItem.RiskSensitivityOverride))
			} else {
				results.RiskSensitivityOverride = types.StringNull()
			}
			if resultsCount+1 > len(r.Results) {
				r.Results = append(r.Results, results)
			} else {
				r.Results[resultsCount].AdminOwnerID = results.AdminOwnerID
				r.Results[resultsCount].AppID = results.AppID
				r.Results[resultsCount].CustomRequestNotification = results.CustomRequestNotification
				r.Results[resultsCount].Description = results.Description
				r.Results[resultsCount].GroupBindingID = results.GroupBindingID
				r.Results[resultsCount].GroupLeaderUserIds = results.GroupLeaderUserIds
				r.Results[resultsCount].GroupType = results.GroupType
				r.Results[resultsCount].ID = results.ID
				r.Results[resultsCount].Name = results.Name
				r.Results[resultsCount].RemoteInfo = results.RemoteInfo
				r.Results[resultsCount].RemoteName = results.RemoteName
				r.Results[resultsCount].RequestConfigurations = results.RequestConfigurations
				r.Results[resultsCount].RequireMfaToApprove = results.RequireMfaToApprove
				r.Results[resultsCount].RiskSensitivity = results.RiskSensitivity
				r.Results[resultsCount].RiskSensitivityOverride = results.RiskSensitivityOverride
			}
		}
	}

	return diags
}
