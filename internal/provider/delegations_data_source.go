// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &DelegationsDataSource{}
var _ datasource.DataSourceWithConfigure = &DelegationsDataSource{}

func NewDelegationsDataSource() datasource.DataSource {
	return &DelegationsDataSource{}
}

// DelegationsDataSource is the data source implementation.
type DelegationsDataSource struct {
	// Provider configured SDK client.
	client *sdk.OpalAPI
}

// DelegationsDataSourceModel describes the data model.
type DelegationsDataSourceModel struct {
	Cursor          types.String         `queryParam:"style=form,explode=true,name=cursor" tfsdk:"cursor"`
	DelegateUserID  types.String         `queryParam:"style=form,explode=true,name=delegate_user_id" tfsdk:"delegate_user_id"`
	DelegatorUserID types.String         `queryParam:"style=form,explode=true,name=delegator_user_id" tfsdk:"delegator_user_id"`
	Next            types.String         `tfsdk:"next"`
	Previous        types.String         `tfsdk:"previous"`
	Results         []tfTypes.Delegation `tfsdk:"results"`
	TotalCount      types.Int64          `tfsdk:"total_count"`
}

// Metadata returns the data source type name.
func (r *DelegationsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_delegations"
}

// Schema defines the schema for the data source.
func (r *DelegationsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Delegations DataSource",

		Attributes: map[string]schema.Attribute{
			"cursor": schema.StringAttribute{
				Optional:    true,
				Description: `A cursor to indicate where to start fetching results.`,
			},
			"delegate_user_id": schema.StringAttribute{
				Optional:    true,
				Description: `The delegate user ID to filter delegations by the user being delegated to.`,
			},
			"delegator_user_id": schema.StringAttribute{
				Optional:    true,
				Description: `The delegator user ID to filter delegations by the user delegating their access review requests.`,
			},
			"next": schema.StringAttribute{
				Computed:    true,
				Description: `The cursor with which to continue pagination if additional result pages exist.`,
			},
			"previous": schema.StringAttribute{
				Computed:    true,
				Description: `The cursor used to obtain the current result page.`,
			},
			"results": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"created_at": schema.StringAttribute{
							Computed:    true,
							Description: `The creation time of the delegation.`,
						},
						"delegate_user_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the user being delegated to.`,
						},
						"delegator_user_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the user delegating their access review requests.`,
						},
						"end_time": schema.StringAttribute{
							Computed:    true,
							Description: `The end time of the delegation.`,
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the delegation.`,
						},
						"reason": schema.StringAttribute{
							Computed:    true,
							Description: `The reason for the delegation.`,
						},
						"start_time": schema.StringAttribute{
							Computed:    true,
							Description: `The start time of the delegation.`,
						},
						"updated_at": schema.StringAttribute{
							Computed:    true,
							Description: `The last updated time of the delegation.`,
						},
					},
				},
				Description: `The delegations in the result set.`,
			},
			"total_count": schema.Int64Attribute{
				Computed:    true,
				Description: `The total number of items in the result set.`,
			},
		},
	}
}

func (r *DelegationsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.OpalAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.OpalAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *DelegationsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *DelegationsDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetDelegationsRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Delegations.GetDelegations(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PaginatedDelegationsList != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPaginatedDelegationsList(ctx, res.PaginatedDelegationsList)...)

	if resp.Diagnostics.HasError() {
		return
	}
	for {
		var err error

		res, err = res.Next()

		if err != nil {
			resp.Diagnostics.AddError(fmt.Sprintf("failed to retrieve next page of results: %v", err), debugResponse(res.RawResponse))
			return
		}

		if res == nil {
			break
		}

		resp.Diagnostics.Append(data.RefreshFromSharedPaginatedDelegationsList(ctx, res.PaginatedDelegationsList)...)

		if resp.Diagnostics.HasError() {
			return
		}
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
