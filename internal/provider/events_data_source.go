// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &EventsDataSource{}
var _ datasource.DataSourceWithConfigure = &EventsDataSource{}

func NewEventsDataSource() datasource.DataSource {
	return &EventsDataSource{}
}

// EventsDataSource is the data source implementation.
type EventsDataSource struct {
	client *sdk.OpalAPI
}

// EventsDataSourceModel describes the data model.
type EventsDataSourceModel struct {
	ActorFilter     types.String    `tfsdk:"actor_filter"`
	APITokenFilter  types.String    `tfsdk:"api_token_filter"`
	Cursor          types.String    `tfsdk:"cursor"`
	EndDateFilter   types.String    `tfsdk:"end_date_filter"`
	EventTypeFilter types.String    `tfsdk:"event_type_filter"`
	Next            types.String    `tfsdk:"next"`
	ObjectFilter    types.String    `tfsdk:"object_filter"`
	PageSize        types.Int64     `tfsdk:"page_size"`
	Previous        types.String    `tfsdk:"previous"`
	Results         []tfTypes.Event `tfsdk:"results"`
	StartDateFilter types.String    `tfsdk:"start_date_filter"`
}

// Metadata returns the data source type name.
func (r *EventsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_events"
}

// Schema defines the schema for the data source.
func (r *EventsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Events DataSource",

		Attributes: map[string]schema.Attribute{
			"actor_filter": schema.StringAttribute{
				Optional:    true,
				Description: `An actor filter for the events. Supply the ID of the actor.`,
			},
			"api_token_filter": schema.StringAttribute{
				Optional:    true,
				Description: `An API filter for the events. Supply the name and preview of the API token.`,
			},
			"cursor": schema.StringAttribute{
				Optional:    true,
				Description: `The pagination cursor value.`,
			},
			"end_date_filter": schema.StringAttribute{
				Optional:    true,
				Description: `An end date filter for the events.`,
			},
			"event_type_filter": schema.StringAttribute{
				Optional:    true,
				Description: `An event type filter for the events.`,
			},
			"next": schema.StringAttribute{
				Computed:    true,
				Description: `The cursor with which to continue pagination if additional result pages exist.`,
			},
			"object_filter": schema.StringAttribute{
				Optional:    true,
				Description: `An object filter for the events. Supply the ID of the object.`,
			},
			"page_size": schema.Int64Attribute{
				Optional:    true,
				Description: `Number of results to return per page. Default is 200.`,
			},
			"previous": schema.StringAttribute{
				Computed:    true,
				Description: `The cursor used to obtain the current result page.`,
			},
			"results": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"actor_email": schema.StringAttribute{
							Computed:    true,
							Description: `The email of the actor user.`,
						},
						"actor_ip_address": schema.StringAttribute{
							Computed:    true,
							Description: `The IP address of the event actor.`,
						},
						"actor_name": schema.StringAttribute{
							Computed:    true,
							Description: `The name of the actor user. Parsed as JSON.`,
						},
						"actor_user_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the actor user.`,
						},
						"api_token_name": schema.StringAttribute{
							Computed:    true,
							Description: `The name of the API token used to create the event.`,
						},
						"api_token_preview": schema.StringAttribute{
							Computed:    true,
							Description: `The preview of the API token used to create the event.`,
						},
						"created_at": schema.StringAttribute{
							Computed:    true,
							Description: `The day and time the event was created.`,
						},
						"event_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the event.`,
						},
						"event_type": schema.StringAttribute{
							Computed:    true,
							Description: `The event type.`,
						},
						"sub_events": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"additional_properties": schema.StringAttribute{
										Computed:    true,
										Description: `Parsed as JSON.`,
									},
									"sub_event_type": schema.StringAttribute{
										Computed:    true,
										Description: `The subevent type.`,
									},
								},
							},
						},
					},
				},
			},
			"start_date_filter": schema.StringAttribute{
				Optional:    true,
				Description: `A start date filter for the events.`,
			},
		},
	}
}

func (r *EventsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.OpalAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.OpalAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *EventsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *EventsDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	actorFilter := new(string)
	if !data.ActorFilter.IsUnknown() && !data.ActorFilter.IsNull() {
		*actorFilter = data.ActorFilter.ValueString()
	} else {
		actorFilter = nil
	}
	apiTokenFilter := new(string)
	if !data.APITokenFilter.IsUnknown() && !data.APITokenFilter.IsNull() {
		*apiTokenFilter = data.APITokenFilter.ValueString()
	} else {
		apiTokenFilter = nil
	}
	cursor := new(string)
	if !data.Cursor.IsUnknown() && !data.Cursor.IsNull() {
		*cursor = data.Cursor.ValueString()
	} else {
		cursor = nil
	}
	endDateFilter := new(string)
	if !data.EndDateFilter.IsUnknown() && !data.EndDateFilter.IsNull() {
		*endDateFilter = data.EndDateFilter.ValueString()
	} else {
		endDateFilter = nil
	}
	eventTypeFilter := new(string)
	if !data.EventTypeFilter.IsUnknown() && !data.EventTypeFilter.IsNull() {
		*eventTypeFilter = data.EventTypeFilter.ValueString()
	} else {
		eventTypeFilter = nil
	}
	objectFilter := new(string)
	if !data.ObjectFilter.IsUnknown() && !data.ObjectFilter.IsNull() {
		*objectFilter = data.ObjectFilter.ValueString()
	} else {
		objectFilter = nil
	}
	pageSize := new(int64)
	if !data.PageSize.IsUnknown() && !data.PageSize.IsNull() {
		*pageSize = data.PageSize.ValueInt64()
	} else {
		pageSize = nil
	}
	startDateFilter := new(string)
	if !data.StartDateFilter.IsUnknown() && !data.StartDateFilter.IsNull() {
		*startDateFilter = data.StartDateFilter.ValueString()
	} else {
		startDateFilter = nil
	}
	request := operations.GetEventsRequest{
		ActorFilter:     actorFilter,
		APITokenFilter:  apiTokenFilter,
		Cursor:          cursor,
		EndDateFilter:   endDateFilter,
		EventTypeFilter: eventTypeFilter,
		ObjectFilter:    objectFilter,
		PageSize:        pageSize,
		StartDateFilter: startDateFilter,
	}
	res, err := r.client.Events.Get(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.PaginatedEventList == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedPaginatedEventList(res.PaginatedEventList)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
