// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/shared"
)

func (r *ConfigurationTemplateResourceModel) ToSharedCreateConfigurationTemplateInfo() *shared.CreateConfigurationTemplateInfo {
	var adminOwnerID string
	adminOwnerID = r.AdminOwnerID.ValueString()

	var breakGlassUserIds []string = []string{}
	for _, breakGlassUserIdsItem := range r.BreakGlassUserIds {
		breakGlassUserIds = append(breakGlassUserIds, breakGlassUserIdsItem.ValueString())
	}
	var linkedAuditMessageChannelIds []string = []string{}
	for _, linkedAuditMessageChannelIdsItem := range r.LinkedAuditMessageChannelIds {
		linkedAuditMessageChannelIds = append(linkedAuditMessageChannelIds, linkedAuditMessageChannelIdsItem.ValueString())
	}
	var memberOncallScheduleIds []string = []string{}
	for _, memberOncallScheduleIdsItem := range r.MemberOncallScheduleIds {
		memberOncallScheduleIds = append(memberOncallScheduleIds, memberOncallScheduleIdsItem.ValueString())
	}
	var name string
	name = r.Name.ValueString()

	var requestConfigurations []shared.RequestConfiguration = []shared.RequestConfiguration{}
	for _, requestConfigurationsItem := range r.RequestConfigurations {
		var allowRequests bool
		allowRequests = requestConfigurationsItem.AllowRequests.ValueBool()

		var autoApproval bool
		autoApproval = requestConfigurationsItem.AutoApproval.ValueBool()

		var condition *shared.Condition
		if requestConfigurationsItem.Condition != nil {
			var groupIds []string = []string{}
			for _, groupIdsItem := range requestConfigurationsItem.Condition.GroupIds {
				groupIds = append(groupIds, groupIdsItem.ValueString())
			}
			var roleRemoteIds []string = []string{}
			for _, roleRemoteIdsItem := range requestConfigurationsItem.Condition.RoleRemoteIds {
				roleRemoteIds = append(roleRemoteIds, roleRemoteIdsItem.ValueString())
			}
			condition = &shared.Condition{
				GroupIds:      groupIds,
				RoleRemoteIds: roleRemoteIds,
			}
		}
		maxDuration := new(int64)
		if !requestConfigurationsItem.MaxDuration.IsUnknown() && !requestConfigurationsItem.MaxDuration.IsNull() {
			*maxDuration = requestConfigurationsItem.MaxDuration.ValueInt64()
		} else {
			maxDuration = nil
		}
		var priority int64
		priority = requestConfigurationsItem.Priority.ValueInt64()

		recommendedDuration := new(int64)
		if !requestConfigurationsItem.RecommendedDuration.IsUnknown() && !requestConfigurationsItem.RecommendedDuration.IsNull() {
			*recommendedDuration = requestConfigurationsItem.RecommendedDuration.ValueInt64()
		} else {
			recommendedDuration = nil
		}
		requestTemplateID := new(string)
		if !requestConfigurationsItem.RequestTemplateID.IsUnknown() && !requestConfigurationsItem.RequestTemplateID.IsNull() {
			*requestTemplateID = requestConfigurationsItem.RequestTemplateID.ValueString()
		} else {
			requestTemplateID = nil
		}
		var requireMfaToRequest bool
		requireMfaToRequest = requestConfigurationsItem.RequireMfaToRequest.ValueBool()

		var requireSupportTicket bool
		requireSupportTicket = requestConfigurationsItem.RequireSupportTicket.ValueBool()

		var reviewerStages []shared.ReviewerStage = []shared.ReviewerStage{}
		for _, reviewerStagesItem := range requestConfigurationsItem.ReviewerStages {
			operator := new(shared.Operator)
			if !reviewerStagesItem.Operator.IsUnknown() && !reviewerStagesItem.Operator.IsNull() {
				*operator = shared.Operator(reviewerStagesItem.Operator.ValueString())
			} else {
				operator = nil
			}
			var ownerIds []string = []string{}
			for _, ownerIdsItem := range reviewerStagesItem.OwnerIds {
				ownerIds = append(ownerIds, ownerIdsItem.ValueString())
			}
			requireAdminApproval := new(bool)
			if !reviewerStagesItem.RequireAdminApproval.IsUnknown() && !reviewerStagesItem.RequireAdminApproval.IsNull() {
				*requireAdminApproval = reviewerStagesItem.RequireAdminApproval.ValueBool()
			} else {
				requireAdminApproval = nil
			}
			var requireManagerApproval bool
			requireManagerApproval = reviewerStagesItem.RequireManagerApproval.ValueBool()

			reviewerStages = append(reviewerStages, shared.ReviewerStage{
				Operator:               operator,
				OwnerIds:               ownerIds,
				RequireAdminApproval:   requireAdminApproval,
				RequireManagerApproval: requireManagerApproval,
			})
		}
		requestConfigurations = append(requestConfigurations, shared.RequestConfiguration{
			AllowRequests:        allowRequests,
			AutoApproval:         autoApproval,
			Condition:            condition,
			MaxDuration:          maxDuration,
			Priority:             priority,
			RecommendedDuration:  recommendedDuration,
			RequestTemplateID:    requestTemplateID,
			RequireMfaToRequest:  requireMfaToRequest,
			RequireSupportTicket: requireSupportTicket,
			ReviewerStages:       reviewerStages,
		})
	}
	var requireMfaToApprove bool
	requireMfaToApprove = r.RequireMfaToApprove.ValueBool()

	var requireMfaToConnect bool
	requireMfaToConnect = r.RequireMfaToConnect.ValueBool()

	var ticketPropagation *shared.TicketPropagationConfiguration
	if r.TicketPropagation != nil {
		var enabledOnGrant bool
		enabledOnGrant = r.TicketPropagation.EnabledOnGrant.ValueBool()

		var enabledOnRevocation bool
		enabledOnRevocation = r.TicketPropagation.EnabledOnRevocation.ValueBool()

		ticketProjectID := new(string)
		if !r.TicketPropagation.TicketProjectID.IsUnknown() && !r.TicketPropagation.TicketProjectID.IsNull() {
			*ticketProjectID = r.TicketPropagation.TicketProjectID.ValueString()
		} else {
			ticketProjectID = nil
		}
		ticketProvider := new(shared.TicketingProviderEnum)
		if !r.TicketPropagation.TicketProvider.IsUnknown() && !r.TicketPropagation.TicketProvider.IsNull() {
			*ticketProvider = shared.TicketingProviderEnum(r.TicketPropagation.TicketProvider.ValueString())
		} else {
			ticketProvider = nil
		}
		ticketPropagation = &shared.TicketPropagationConfiguration{
			EnabledOnGrant:      enabledOnGrant,
			EnabledOnRevocation: enabledOnRevocation,
			TicketProjectID:     ticketProjectID,
			TicketProvider:      ticketProvider,
		}
	}
	visibility1 := shared.VisibilityTypeEnum(r.Visibility.Visibility.ValueString())
	var visibilityGroupIds []string = []string{}
	for _, visibilityGroupIdsItem := range r.Visibility.VisibilityGroupIds {
		visibilityGroupIds = append(visibilityGroupIds, visibilityGroupIdsItem.ValueString())
	}
	visibility := shared.VisibilityInfo{
		Visibility:         visibility1,
		VisibilityGroupIds: visibilityGroupIds,
	}
	out := shared.CreateConfigurationTemplateInfo{
		AdminOwnerID:                 adminOwnerID,
		BreakGlassUserIds:            breakGlassUserIds,
		LinkedAuditMessageChannelIds: linkedAuditMessageChannelIds,
		MemberOncallScheduleIds:      memberOncallScheduleIds,
		Name:                         name,
		RequestConfigurations:        requestConfigurations,
		RequireMfaToApprove:          requireMfaToApprove,
		RequireMfaToConnect:          requireMfaToConnect,
		TicketPropagation:            ticketPropagation,
		Visibility:                   visibility,
	}
	return &out
}

func (r *ConfigurationTemplateResourceModel) RefreshFromSharedConfigurationTemplate(resp *shared.ConfigurationTemplate) {
	if resp != nil {
		r.AdminOwnerID = types.StringPointerValue(resp.AdminOwnerID)
		r.BreakGlassUserIds = []types.String{}
		for _, v := range resp.BreakGlassUserIds {
			r.BreakGlassUserIds = append(r.BreakGlassUserIds, types.StringValue(v))
		}
		r.ConfigurationTemplateID = types.StringPointerValue(resp.ConfigurationTemplateID)
		r.LinkedAuditMessageChannelIds = []types.String{}
		for _, v := range resp.LinkedAuditMessageChannelIds {
			r.LinkedAuditMessageChannelIds = append(r.LinkedAuditMessageChannelIds, types.StringValue(v))
		}
		r.MemberOncallScheduleIds = []types.String{}
		for _, v := range resp.MemberOncallScheduleIds {
			r.MemberOncallScheduleIds = append(r.MemberOncallScheduleIds, types.StringValue(v))
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.RequestConfigurationID = types.StringPointerValue(resp.RequestConfigurationID)
		r.RequireMfaToApprove = types.BoolPointerValue(resp.RequireMfaToApprove)
		r.RequireMfaToConnect = types.BoolPointerValue(resp.RequireMfaToConnect)
		if resp.TicketPropagation == nil {
			r.TicketPropagation = nil
		} else {
			r.TicketPropagation = &tfTypes.TicketPropagationConfiguration{}
			r.TicketPropagation.EnabledOnGrant = types.BoolValue(resp.TicketPropagation.EnabledOnGrant)
			r.TicketPropagation.EnabledOnRevocation = types.BoolValue(resp.TicketPropagation.EnabledOnRevocation)
			r.TicketPropagation.TicketProjectID = types.StringPointerValue(resp.TicketPropagation.TicketProjectID)
			if resp.TicketPropagation.TicketProvider != nil {
				r.TicketPropagation.TicketProvider = types.StringValue(string(*resp.TicketPropagation.TicketProvider))
			} else {
				r.TicketPropagation.TicketProvider = types.StringNull()
			}
		}
		if resp.Visibility != nil {
			r.Visibility.Visibility = types.StringValue(string(resp.Visibility.Visibility))
			r.Visibility.VisibilityGroupIds = []types.String{}
			for _, v := range resp.Visibility.VisibilityGroupIds {
				r.Visibility.VisibilityGroupIds = append(r.Visibility.VisibilityGroupIds, types.StringValue(v))
			}
		}
	}
}

func (r *ConfigurationTemplateResourceModel) ToSharedUpdateConfigurationTemplateInfo() *shared.UpdateConfigurationTemplateInfo {
	adminOwnerID := new(string)
	if !r.AdminOwnerID.IsUnknown() && !r.AdminOwnerID.IsNull() {
		*adminOwnerID = r.AdminOwnerID.ValueString()
	} else {
		adminOwnerID = nil
	}
	var breakGlassUserIds []string = []string{}
	for _, breakGlassUserIdsItem := range r.BreakGlassUserIds {
		breakGlassUserIds = append(breakGlassUserIds, breakGlassUserIdsItem.ValueString())
	}
	var configurationTemplateID string
	configurationTemplateID = r.ConfigurationTemplateID.ValueString()

	var linkedAuditMessageChannelIds []string = []string{}
	for _, linkedAuditMessageChannelIdsItem := range r.LinkedAuditMessageChannelIds {
		linkedAuditMessageChannelIds = append(linkedAuditMessageChannelIds, linkedAuditMessageChannelIdsItem.ValueString())
	}
	var memberOncallScheduleIds []string = []string{}
	for _, memberOncallScheduleIdsItem := range r.MemberOncallScheduleIds {
		memberOncallScheduleIds = append(memberOncallScheduleIds, memberOncallScheduleIdsItem.ValueString())
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	var requestConfigurations []shared.RequestConfiguration = []shared.RequestConfiguration{}
	for _, requestConfigurationsItem := range r.RequestConfigurations {
		var allowRequests bool
		allowRequests = requestConfigurationsItem.AllowRequests.ValueBool()

		var autoApproval bool
		autoApproval = requestConfigurationsItem.AutoApproval.ValueBool()

		var condition *shared.Condition
		if requestConfigurationsItem.Condition != nil {
			var groupIds []string = []string{}
			for _, groupIdsItem := range requestConfigurationsItem.Condition.GroupIds {
				groupIds = append(groupIds, groupIdsItem.ValueString())
			}
			var roleRemoteIds []string = []string{}
			for _, roleRemoteIdsItem := range requestConfigurationsItem.Condition.RoleRemoteIds {
				roleRemoteIds = append(roleRemoteIds, roleRemoteIdsItem.ValueString())
			}
			condition = &shared.Condition{
				GroupIds:      groupIds,
				RoleRemoteIds: roleRemoteIds,
			}
		}
		maxDuration := new(int64)
		if !requestConfigurationsItem.MaxDuration.IsUnknown() && !requestConfigurationsItem.MaxDuration.IsNull() {
			*maxDuration = requestConfigurationsItem.MaxDuration.ValueInt64()
		} else {
			maxDuration = nil
		}
		var priority int64
		priority = requestConfigurationsItem.Priority.ValueInt64()

		recommendedDuration := new(int64)
		if !requestConfigurationsItem.RecommendedDuration.IsUnknown() && !requestConfigurationsItem.RecommendedDuration.IsNull() {
			*recommendedDuration = requestConfigurationsItem.RecommendedDuration.ValueInt64()
		} else {
			recommendedDuration = nil
		}
		requestTemplateID := new(string)
		if !requestConfigurationsItem.RequestTemplateID.IsUnknown() && !requestConfigurationsItem.RequestTemplateID.IsNull() {
			*requestTemplateID = requestConfigurationsItem.RequestTemplateID.ValueString()
		} else {
			requestTemplateID = nil
		}
		var requireMfaToRequest bool
		requireMfaToRequest = requestConfigurationsItem.RequireMfaToRequest.ValueBool()

		var requireSupportTicket bool
		requireSupportTicket = requestConfigurationsItem.RequireSupportTicket.ValueBool()

		var reviewerStages []shared.ReviewerStage = []shared.ReviewerStage{}
		for _, reviewerStagesItem := range requestConfigurationsItem.ReviewerStages {
			operator := new(shared.Operator)
			if !reviewerStagesItem.Operator.IsUnknown() && !reviewerStagesItem.Operator.IsNull() {
				*operator = shared.Operator(reviewerStagesItem.Operator.ValueString())
			} else {
				operator = nil
			}
			var ownerIds []string = []string{}
			for _, ownerIdsItem := range reviewerStagesItem.OwnerIds {
				ownerIds = append(ownerIds, ownerIdsItem.ValueString())
			}
			requireAdminApproval := new(bool)
			if !reviewerStagesItem.RequireAdminApproval.IsUnknown() && !reviewerStagesItem.RequireAdminApproval.IsNull() {
				*requireAdminApproval = reviewerStagesItem.RequireAdminApproval.ValueBool()
			} else {
				requireAdminApproval = nil
			}
			var requireManagerApproval bool
			requireManagerApproval = reviewerStagesItem.RequireManagerApproval.ValueBool()

			reviewerStages = append(reviewerStages, shared.ReviewerStage{
				Operator:               operator,
				OwnerIds:               ownerIds,
				RequireAdminApproval:   requireAdminApproval,
				RequireManagerApproval: requireManagerApproval,
			})
		}
		requestConfigurations = append(requestConfigurations, shared.RequestConfiguration{
			AllowRequests:        allowRequests,
			AutoApproval:         autoApproval,
			Condition:            condition,
			MaxDuration:          maxDuration,
			Priority:             priority,
			RecommendedDuration:  recommendedDuration,
			RequestTemplateID:    requestTemplateID,
			RequireMfaToRequest:  requireMfaToRequest,
			RequireSupportTicket: requireSupportTicket,
			ReviewerStages:       reviewerStages,
		})
	}
	requireMfaToApprove := new(bool)
	if !r.RequireMfaToApprove.IsUnknown() && !r.RequireMfaToApprove.IsNull() {
		*requireMfaToApprove = r.RequireMfaToApprove.ValueBool()
	} else {
		requireMfaToApprove = nil
	}
	requireMfaToConnect := new(bool)
	if !r.RequireMfaToConnect.IsUnknown() && !r.RequireMfaToConnect.IsNull() {
		*requireMfaToConnect = r.RequireMfaToConnect.ValueBool()
	} else {
		requireMfaToConnect = nil
	}
	var ticketPropagation *shared.TicketPropagationConfiguration
	if r.TicketPropagation != nil {
		var enabledOnGrant bool
		enabledOnGrant = r.TicketPropagation.EnabledOnGrant.ValueBool()

		var enabledOnRevocation bool
		enabledOnRevocation = r.TicketPropagation.EnabledOnRevocation.ValueBool()

		ticketProjectID := new(string)
		if !r.TicketPropagation.TicketProjectID.IsUnknown() && !r.TicketPropagation.TicketProjectID.IsNull() {
			*ticketProjectID = r.TicketPropagation.TicketProjectID.ValueString()
		} else {
			ticketProjectID = nil
		}
		ticketProvider := new(shared.TicketingProviderEnum)
		if !r.TicketPropagation.TicketProvider.IsUnknown() && !r.TicketPropagation.TicketProvider.IsNull() {
			*ticketProvider = shared.TicketingProviderEnum(r.TicketPropagation.TicketProvider.ValueString())
		} else {
			ticketProvider = nil
		}
		ticketPropagation = &shared.TicketPropagationConfiguration{
			EnabledOnGrant:      enabledOnGrant,
			EnabledOnRevocation: enabledOnRevocation,
			TicketProjectID:     ticketProjectID,
			TicketProvider:      ticketProvider,
		}
	}
	var visibility *shared.VisibilityInfo
	visibility1 := shared.VisibilityTypeEnum(r.Visibility.Visibility.ValueString())
	var visibilityGroupIds []string = []string{}
	for _, visibilityGroupIdsItem := range r.Visibility.VisibilityGroupIds {
		visibilityGroupIds = append(visibilityGroupIds, visibilityGroupIdsItem.ValueString())
	}
	visibility = &shared.VisibilityInfo{
		Visibility:         visibility1,
		VisibilityGroupIds: visibilityGroupIds,
	}
	out := shared.UpdateConfigurationTemplateInfo{
		AdminOwnerID:                 adminOwnerID,
		BreakGlassUserIds:            breakGlassUserIds,
		ConfigurationTemplateID:      configurationTemplateID,
		LinkedAuditMessageChannelIds: linkedAuditMessageChannelIds,
		MemberOncallScheduleIds:      memberOncallScheduleIds,
		Name:                         name,
		RequestConfigurations:        requestConfigurations,
		RequireMfaToApprove:          requireMfaToApprove,
		RequireMfaToConnect:          requireMfaToConnect,
		TicketPropagation:            ticketPropagation,
		Visibility:                   visibility,
	}
	return &out
}
