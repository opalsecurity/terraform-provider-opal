// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/typeconvert"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/shared"
)

func (r *DelegationsDataSourceModel) RefreshFromSharedPaginatedDelegationsList(ctx context.Context, resp *shared.PaginatedDelegationsList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Next = types.StringPointerValue(resp.Next)
		r.Previous = types.StringPointerValue(resp.Previous)
		if r.Results == nil {
			r.Results = []tfTypes.Delegation{}
		}

		for _, resultsItem := range resp.Results {
			var results tfTypes.Delegation

			results.CreatedAt = types.StringValue(typeconvert.TimeToString(resultsItem.CreatedAt))
			results.DelegateUserID = types.StringValue(resultsItem.DelegateUserID)
			results.DelegatorUserID = types.StringValue(resultsItem.DelegatorUserID)
			results.EndTime = types.StringValue(typeconvert.TimeToString(resultsItem.EndTime))
			results.ID = types.StringValue(resultsItem.ID)
			results.Reason = types.StringValue(resultsItem.Reason)
			results.StartTime = types.StringValue(typeconvert.TimeToString(resultsItem.StartTime))
			results.UpdatedAt = types.StringValue(typeconvert.TimeToString(resultsItem.UpdatedAt))

			r.Results = append(r.Results, results)
		}
		r.TotalCount = types.Int64PointerValue(resp.TotalCount)
	}

	return diags
}

func (r *DelegationsDataSourceModel) ToOperationsGetDelegationsRequest(ctx context.Context) (*operations.GetDelegationsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	delegateUserID := new(string)
	if !r.DelegateUserID.IsUnknown() && !r.DelegateUserID.IsNull() {
		*delegateUserID = r.DelegateUserID.ValueString()
	} else {
		delegateUserID = nil
	}
	delegatorUserID := new(string)
	if !r.DelegatorUserID.IsUnknown() && !r.DelegatorUserID.IsNull() {
		*delegatorUserID = r.DelegatorUserID.ValueString()
	} else {
		delegatorUserID = nil
	}
	out := operations.GetDelegationsRequest{
		DelegateUserID:  delegateUserID,
		DelegatorUserID: delegatorUserID,
	}

	return &out, diags
}
