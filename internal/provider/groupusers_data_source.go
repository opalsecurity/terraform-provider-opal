// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &GroupUsersDataSource{}
var _ datasource.DataSourceWithConfigure = &GroupUsersDataSource{}

func NewGroupUsersDataSource() datasource.DataSource {
	return &GroupUsersDataSource{}
}

// GroupUsersDataSource is the data source implementation.
type GroupUsersDataSource struct {
	// Provider configured SDK client.
	client *sdk.OpalAPI
}

// GroupUsersDataSourceModel describes the data model.
type GroupUsersDataSourceModel struct {
	GroupID types.String        `tfsdk:"group_id"`
	Results []tfTypes.GroupUser `tfsdk:"results"`
}

// Metadata returns the data source type name.
func (r *GroupUsersDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_group_users"
}

// Schema defines the schema for the data source.
func (r *GroupUsersDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "GroupUsers DataSource",

		Attributes: map[string]schema.Attribute{
			"group_id": schema.StringAttribute{
				Required:    true,
				Description: `The ID of the group.`,
			},
			"results": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"access_level": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"access_level_name": schema.StringAttribute{
									Computed:    true,
									Description: `The human-readable name of the access level.`,
								},
								"access_level_remote_id": schema.StringAttribute{
									Computed:    true,
									Description: `The machine-readable identifier of the access level.`,
								},
							},
							MarkdownDescription: `# Access Level Object` + "\n" +
								`### Description` + "\n" +
								`The ` + "`" + `GroupAccessLevel` + "`" + ` object is used to represent the level of access that a user has to a group or a group has to a group. The "default" access` + "\n" +
								`level is a ` + "`" + `GroupAccessLevel` + "`" + ` object whose fields are all empty strings.` + "\n" +
								`` + "\n" +
								`### Usage Example` + "\n" +
								`View the ` + "`" + `GroupAccessLevel` + "`" + ` of a group/user or group/group pair to see the level of access granted to the group.`,
						},
						"email": schema.StringAttribute{
							Computed:    true,
							Description: `The user's email.`,
						},
						"expiration_date": schema.StringAttribute{
							Computed:    true,
							Description: `The day and time the user's access will expire.`,
						},
						"full_name": schema.StringAttribute{
							Computed:    true,
							Description: `The user's full name.`,
						},
						"group_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the group.`,
						},
						"propagation_status": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"status": schema.StringAttribute{
									Computed:    true,
									Description: `The status of whether the user has been synced to the group or resource in the remote system.`,
								},
							},
							Description: `The state of whether the push action was propagated to the remote system. If this is null, the access was synced from the remote system.`,
						},
						"user_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the user.`,
						},
					},
				},
			},
		},
	}
}

func (r *GroupUsersDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.OpalAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.OpalAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *GroupUsersDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *GroupUsersDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetGroupUsersRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Groups.GetUsers(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.GroupUserList != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedGroupUserList(ctx, res.GroupUserList)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
