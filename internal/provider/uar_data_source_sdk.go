// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/shared"
	"time"
)

func (r *UarDataSourceModel) RefreshFromSharedUar(resp *shared.Uar) {
	if resp != nil {
		r.Deadline = types.StringValue(resp.Deadline.Format(time.RFC3339Nano))
		r.Name = types.StringValue(resp.Name)
		r.ReviewerAssignmentPolicy = types.StringValue(string(resp.ReviewerAssignmentPolicy))
		r.SelfReviewAllowed = types.BoolValue(resp.SelfReviewAllowed)
		r.SendReviewerAssignmentNotification = types.BoolValue(resp.SendReviewerAssignmentNotification)
		r.TimeZone = types.StringValue(resp.TimeZone)
		if resp.UarScope == nil {
			r.UarScope = nil
		} else {
			r.UarScope = &tfTypes.UARScope{}
			r.UarScope.Admins = []types.String{}
			for _, v := range resp.UarScope.Admins {
				r.UarScope.Admins = append(r.UarScope.Admins, types.StringValue(v))
			}
			r.UarScope.Apps = []types.String{}
			for _, v := range resp.UarScope.Apps {
				r.UarScope.Apps = append(r.UarScope.Apps, types.StringValue(v))
			}
			r.UarScope.Entities = []types.String{}
			for _, v := range resp.UarScope.Entities {
				r.UarScope.Entities = append(r.UarScope.Entities, types.StringValue(v))
			}
			if resp.UarScope.FilterOperator != nil {
				r.UarScope.FilterOperator = types.StringValue(string(*resp.UarScope.FilterOperator))
			} else {
				r.UarScope.FilterOperator = types.StringNull()
			}
			r.UarScope.GroupTypes = []types.String{}
			for _, v := range resp.UarScope.GroupTypes {
				r.UarScope.GroupTypes = append(r.UarScope.GroupTypes, types.StringValue(string(v)))
			}
			if resp.UarScope.GroupVisibility != nil {
				r.UarScope.GroupVisibility = types.StringValue(string(*resp.UarScope.GroupVisibility))
			} else {
				r.UarScope.GroupVisibility = types.StringNull()
			}
			r.UarScope.IncludeGroupBindings = types.BoolPointerValue(resp.UarScope.IncludeGroupBindings)
			r.UarScope.Names = []types.String{}
			for _, v := range resp.UarScope.Names {
				r.UarScope.Names = append(r.UarScope.Names, types.StringValue(v))
			}
			r.UarScope.ResourceTypes = []types.String{}
			for _, v := range resp.UarScope.ResourceTypes {
				r.UarScope.ResourceTypes = append(r.UarScope.ResourceTypes, types.StringValue(string(v)))
			}
			r.UarScope.Tags = []tfTypes.TagFilter{}
			if len(r.UarScope.Tags) > len(resp.UarScope.Tags) {
				r.UarScope.Tags = r.UarScope.Tags[:len(resp.UarScope.Tags)]
			}
			for tagsCount, tagsItem := range resp.UarScope.Tags {
				var tags1 tfTypes.TagFilter
				tags1.Key = types.StringValue(tagsItem.Key)
				tags1.Value = types.StringPointerValue(tagsItem.Value)
				if tagsCount+1 > len(r.UarScope.Tags) {
					r.UarScope.Tags = append(r.UarScope.Tags, tags1)
				} else {
					r.UarScope.Tags[tagsCount].Key = tags1.Key
					r.UarScope.Tags[tagsCount].Value = tags1.Value
				}
			}
			r.UarScope.Users = []types.String{}
			for _, v := range resp.UarScope.Users {
				r.UarScope.Users = append(r.UarScope.Users, types.StringValue(v))
			}
		}
		r.UarID = types.StringValue(resp.UarID)
	}
}
