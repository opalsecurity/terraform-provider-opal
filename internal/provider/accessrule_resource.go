// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/shared"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &AccessRuleResource{}
var _ resource.ResourceWithImportState = &AccessRuleResource{}

func NewAccessRuleResource() resource.Resource {
	return &AccessRuleResource{}
}

// AccessRuleResource defines the resource implementation.
type AccessRuleResource struct {
	client *sdk.OpalAPI
}

// AccessRuleResourceModel describes the resource data model.
type AccessRuleResourceModel struct {
	AccessRuleID types.String `tfsdk:"access_rule_id"`
	ConnectionID types.String `tfsdk:"connection_id"`
	ID           types.String `tfsdk:"id"`
	Key          types.String `tfsdk:"key"`
	Status       types.String `tfsdk:"status"`
	Value        types.String `tfsdk:"value"`
}

func (r *AccessRuleResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_access_rule"
}

func (r *AccessRuleResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "AccessRule Resource",
		Attributes: map[string]schema.Attribute{
			"access_rule_id": schema.StringAttribute{
				Required:    true,
				Description: `The access rule ID (group ID) of the access rule.`,
			},
			"connection_id": schema.StringAttribute{
				Required: true,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `The ID of the group.`,
			},
			"key": schema.StringAttribute{
				Required: true,
			},
			"status": schema.StringAttribute{
				Required:    true,
				Description: `The status of the access rule. must be one of ["ACTIVE", "PAUSED"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"ACTIVE",
						"PAUSED",
					),
				},
			},
			"value": schema.StringAttribute{
				Required: true,
			},
		},
	}
}

func (r *AccessRuleResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.OpalAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.OpalAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AccessRuleResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *AccessRuleResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var unless *shared.RuleConjunction
	var connectionID string
	connectionID = data.ConnectionID.ValueString()

	var key string
	key = data.Key.ValueString()

	var value string
	value = data.Value.ValueString()

	singleton1 := shared.TagSelector{
		ConnectionID: connectionID,
		Key:          key,
		Value:        value,
	}
	selectors := []shared.TagSelector{singleton1}
	singleton := shared.RuleDisjunction{
		Selectors: selectors,
	}
	clauses := []shared.RuleDisjunction{singleton}
	unless = &shared.RuleConjunction{
		Clauses: clauses,
	}
	var connectionId1 string
	connectionId1 = data.ConnectionID.ValueString()

	var key1 string
	key1 = data.Key.ValueString()

	var value1 string
	value1 = data.Value.ValueString()

	singleton3 := shared.TagSelector{
		ConnectionID: connectionId1,
		Key:          key1,
		Value:        value1,
	}
	selectors1 := []shared.TagSelector{singleton3}
	singleton2 := shared.RuleDisjunction{
		Selectors: selectors1,
	}
	clauses1 := []shared.RuleDisjunction{singleton2}
	when := shared.RuleConjunction{
		Clauses: clauses1,
	}
	ruleClauses := shared.RuleClauses{
		Unless: unless,
		When:   when,
	}
	status := shared.Status(data.Status.ValueString())
	accessRuleCondition := shared.AccessRuleCondition{
		RuleClauses: ruleClauses,
		Status:      status,
	}
	var accessRuleID string
	accessRuleID = data.AccessRuleID.ValueString()

	request := operations.UpdateAccessRuleRequest{
		AccessRuleCondition: accessRuleCondition,
		AccessRuleID:        accessRuleID,
	}
	res, err := r.client.AccessRules.UpdateAccessRule(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AccessRuleResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *AccessRuleResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var accessRuleID string
	accessRuleID = data.AccessRuleID.ValueString()

	request := operations.GetAccessRuleRequest{
		AccessRuleID: accessRuleID,
	}
	res, err := r.client.AccessRules.GetAccessRule(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AccessRuleResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *AccessRuleResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	var unless *shared.RuleConjunction
	var connectionID string
	connectionID = data.ConnectionID.ValueString()

	var key string
	key = data.Key.ValueString()

	var value string
	value = data.Value.ValueString()

	singleton1 := shared.TagSelector{
		ConnectionID: connectionID,
		Key:          key,
		Value:        value,
	}
	selectors := []shared.TagSelector{singleton1}
	singleton := shared.RuleDisjunction{
		Selectors: selectors,
	}
	clauses := []shared.RuleDisjunction{singleton}
	unless = &shared.RuleConjunction{
		Clauses: clauses,
	}
	var connectionId1 string
	connectionId1 = data.ConnectionID.ValueString()

	var key1 string
	key1 = data.Key.ValueString()

	var value1 string
	value1 = data.Value.ValueString()

	singleton3 := shared.TagSelector{
		ConnectionID: connectionId1,
		Key:          key1,
		Value:        value1,
	}
	selectors1 := []shared.TagSelector{singleton3}
	singleton2 := shared.RuleDisjunction{
		Selectors: selectors1,
	}
	clauses1 := []shared.RuleDisjunction{singleton2}
	when := shared.RuleConjunction{
		Clauses: clauses1,
	}
	ruleClauses := shared.RuleClauses{
		Unless: unless,
		When:   when,
	}
	status := shared.Status(data.Status.ValueString())
	accessRuleCondition := shared.AccessRuleCondition{
		RuleClauses: ruleClauses,
		Status:      status,
	}
	var accessRuleID string
	accessRuleID = data.AccessRuleID.ValueString()

	request := operations.UpdateAccessRuleRequest{
		AccessRuleCondition: accessRuleCondition,
		AccessRuleID:        accessRuleID,
	}
	res, err := r.client.AccessRules.UpdateAccessRule(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AccessRuleResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *AccessRuleResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var id string
	id = data.ID.ValueString()

	request := operations.DeleteGroupRequest{
		ID: id,
	}
	res, err := r.client.Groups.Delete(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *AccessRuleResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("access_rule_id"), req.ID)...)
}
