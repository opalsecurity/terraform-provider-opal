// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/typeconvert"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/shared"
)

func (r *ResourceDataSourceModel) RefreshFromSharedResource(ctx context.Context, resp *shared.Resource) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AdminOwnerID = types.StringPointerValue(resp.AdminOwnerID)
		r.AncestorResourceIds = make([]types.String, 0, len(resp.AncestorResourceIds))
		for _, v := range resp.AncestorResourceIds {
			r.AncestorResourceIds = append(r.AncestorResourceIds, types.StringValue(v))
		}
		r.AppID = types.StringPointerValue(resp.AppID)
		r.CustomRequestNotification = types.StringPointerValue(resp.CustomRequestNotification)
		r.DescendantResourceIds = make([]types.String, 0, len(resp.DescendantResourceIds))
		for _, v := range resp.DescendantResourceIds {
			r.DescendantResourceIds = append(r.DescendantResourceIds, types.StringValue(v))
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.ExtensionsDurationInMinutes = types.Int64PointerValue(resp.ExtensionsDurationInMinutes)
		r.ID = types.StringValue(resp.ID)
		if resp.LastSuccessfulSync == nil {
			r.LastSuccessfulSync = nil
		} else {
			r.LastSuccessfulSync = &tfTypes.SyncTask{}
			r.LastSuccessfulSync.CompletedAt = types.StringValue(typeconvert.TimeToString(resp.LastSuccessfulSync.CompletedAt))
			r.LastSuccessfulSync.ID = types.StringValue(resp.LastSuccessfulSync.ID)
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.ParentResourceID = types.StringPointerValue(resp.ParentResourceID)
		if resp.RemoteInfo == nil {
			r.RemoteInfo = nil
		} else {
			r.RemoteInfo = &tfTypes.ResourceRemoteInfo{}
			if resp.RemoteInfo.AwsAccount == nil {
				r.RemoteInfo.AwsAccount = nil
			} else {
				r.RemoteInfo.AwsAccount = &tfTypes.AwsAccount{}
				r.RemoteInfo.AwsAccount.AccountID = types.StringValue(resp.RemoteInfo.AwsAccount.AccountID)
				r.RemoteInfo.AwsAccount.OrganizationalUnitID = types.StringPointerValue(resp.RemoteInfo.AwsAccount.OrganizationalUnitID)
			}
			if resp.RemoteInfo.AwsEc2Instance == nil {
				r.RemoteInfo.AwsEc2Instance = nil
			} else {
				r.RemoteInfo.AwsEc2Instance = &tfTypes.AwsEc2Instance{}
				r.RemoteInfo.AwsEc2Instance.AccountID = types.StringPointerValue(resp.RemoteInfo.AwsEc2Instance.AccountID)
				r.RemoteInfo.AwsEc2Instance.InstanceID = types.StringValue(resp.RemoteInfo.AwsEc2Instance.InstanceID)
				r.RemoteInfo.AwsEc2Instance.Region = types.StringValue(resp.RemoteInfo.AwsEc2Instance.Region)
			}
			if resp.RemoteInfo.AwsEksCluster == nil {
				r.RemoteInfo.AwsEksCluster = nil
			} else {
				r.RemoteInfo.AwsEksCluster = &tfTypes.AwsEksCluster{}
				r.RemoteInfo.AwsEksCluster.AccountID = types.StringPointerValue(resp.RemoteInfo.AwsEksCluster.AccountID)
				r.RemoteInfo.AwsEksCluster.Arn = types.StringValue(resp.RemoteInfo.AwsEksCluster.Arn)
			}
			if resp.RemoteInfo.AwsIamRole == nil {
				r.RemoteInfo.AwsIamRole = nil
			} else {
				r.RemoteInfo.AwsIamRole = &tfTypes.AwsEksCluster{}
				r.RemoteInfo.AwsIamRole.AccountID = types.StringPointerValue(resp.RemoteInfo.AwsIamRole.AccountID)
				r.RemoteInfo.AwsIamRole.Arn = types.StringValue(resp.RemoteInfo.AwsIamRole.Arn)
			}
			if resp.RemoteInfo.AwsOrganizationalUnit == nil {
				r.RemoteInfo.AwsOrganizationalUnit = nil
			} else {
				r.RemoteInfo.AwsOrganizationalUnit = &tfTypes.AwsOrganizationalUnit{}
				r.RemoteInfo.AwsOrganizationalUnit.OrganizationalUnitID = types.StringValue(resp.RemoteInfo.AwsOrganizationalUnit.OrganizationalUnitID)
				r.RemoteInfo.AwsOrganizationalUnit.ParentID = types.StringPointerValue(resp.RemoteInfo.AwsOrganizationalUnit.ParentID)
			}
			if resp.RemoteInfo.AwsPermissionSet == nil {
				r.RemoteInfo.AwsPermissionSet = nil
			} else {
				r.RemoteInfo.AwsPermissionSet = &tfTypes.AwsPermissionSet{}
				r.RemoteInfo.AwsPermissionSet.AccountID = types.StringValue(resp.RemoteInfo.AwsPermissionSet.AccountID)
				r.RemoteInfo.AwsPermissionSet.Arn = types.StringValue(resp.RemoteInfo.AwsPermissionSet.Arn)
			}
			if resp.RemoteInfo.AwsRdsInstance == nil {
				r.RemoteInfo.AwsRdsInstance = nil
			} else {
				r.RemoteInfo.AwsRdsInstance = &tfTypes.AwsRdsInstance{}
				r.RemoteInfo.AwsRdsInstance.AccountID = types.StringPointerValue(resp.RemoteInfo.AwsRdsInstance.AccountID)
				r.RemoteInfo.AwsRdsInstance.InstanceID = types.StringValue(resp.RemoteInfo.AwsRdsInstance.InstanceID)
				r.RemoteInfo.AwsRdsInstance.Region = types.StringValue(resp.RemoteInfo.AwsRdsInstance.Region)
				r.RemoteInfo.AwsRdsInstance.ResourceID = types.StringValue(resp.RemoteInfo.AwsRdsInstance.ResourceID)
			}
			if resp.RemoteInfo.CustomConnector == nil {
				r.RemoteInfo.CustomConnector = nil
			} else {
				r.RemoteInfo.CustomConnector = &tfTypes.CustomConnector{}
				r.RemoteInfo.CustomConnector.CanHaveUsageEvents = types.BoolValue(resp.RemoteInfo.CustomConnector.CanHaveUsageEvents)
				r.RemoteInfo.CustomConnector.RemoteResourceID = types.StringValue(resp.RemoteInfo.CustomConnector.RemoteResourceID)
			}
			if resp.RemoteInfo.DatastaxAstraRole == nil {
				r.RemoteInfo.DatastaxAstraRole = nil
			} else {
				r.RemoteInfo.DatastaxAstraRole = &tfTypes.SnowflakeRole{}
				r.RemoteInfo.DatastaxAstraRole.RoleID = types.StringValue(resp.RemoteInfo.DatastaxAstraRole.RoleID)
			}
			if resp.RemoteInfo.GcpBigQueryDataset == nil {
				r.RemoteInfo.GcpBigQueryDataset = nil
			} else {
				r.RemoteInfo.GcpBigQueryDataset = &tfTypes.GcpBigQueryDataset{}
				r.RemoteInfo.GcpBigQueryDataset.DatasetID = types.StringValue(resp.RemoteInfo.GcpBigQueryDataset.DatasetID)
				r.RemoteInfo.GcpBigQueryDataset.ProjectID = types.StringValue(resp.RemoteInfo.GcpBigQueryDataset.ProjectID)
			}
			if resp.RemoteInfo.GcpBigQueryTable == nil {
				r.RemoteInfo.GcpBigQueryTable = nil
			} else {
				r.RemoteInfo.GcpBigQueryTable = &tfTypes.GcpBigQueryTable{}
				r.RemoteInfo.GcpBigQueryTable.DatasetID = types.StringValue(resp.RemoteInfo.GcpBigQueryTable.DatasetID)
				r.RemoteInfo.GcpBigQueryTable.ProjectID = types.StringValue(resp.RemoteInfo.GcpBigQueryTable.ProjectID)
				r.RemoteInfo.GcpBigQueryTable.TableID = types.StringValue(resp.RemoteInfo.GcpBigQueryTable.TableID)
			}
			if resp.RemoteInfo.GcpBucket == nil {
				r.RemoteInfo.GcpBucket = nil
			} else {
				r.RemoteInfo.GcpBucket = &tfTypes.GcpBucket{}
				r.RemoteInfo.GcpBucket.BucketID = types.StringValue(resp.RemoteInfo.GcpBucket.BucketID)
			}
			if resp.RemoteInfo.GcpComputeInstance == nil {
				r.RemoteInfo.GcpComputeInstance = nil
			} else {
				r.RemoteInfo.GcpComputeInstance = &tfTypes.GcpComputeInstance{}
				r.RemoteInfo.GcpComputeInstance.InstanceID = types.StringValue(resp.RemoteInfo.GcpComputeInstance.InstanceID)
				r.RemoteInfo.GcpComputeInstance.ProjectID = types.StringValue(resp.RemoteInfo.GcpComputeInstance.ProjectID)
				r.RemoteInfo.GcpComputeInstance.Zone = types.StringValue(resp.RemoteInfo.GcpComputeInstance.Zone)
			}
			if resp.RemoteInfo.GcpFolder == nil {
				r.RemoteInfo.GcpFolder = nil
			} else {
				r.RemoteInfo.GcpFolder = &tfTypes.GcpFolder{}
				r.RemoteInfo.GcpFolder.FolderID = types.StringValue(resp.RemoteInfo.GcpFolder.FolderID)
			}
			if resp.RemoteInfo.GcpGkeCluster == nil {
				r.RemoteInfo.GcpGkeCluster = nil
			} else {
				r.RemoteInfo.GcpGkeCluster = &tfTypes.GcpGkeCluster{}
				r.RemoteInfo.GcpGkeCluster.ClusterName = types.StringValue(resp.RemoteInfo.GcpGkeCluster.ClusterName)
			}
			if resp.RemoteInfo.GcpOrganization == nil {
				r.RemoteInfo.GcpOrganization = nil
			} else {
				r.RemoteInfo.GcpOrganization = &tfTypes.GcpOrganization{}
				r.RemoteInfo.GcpOrganization.OrganizationID = types.StringValue(resp.RemoteInfo.GcpOrganization.OrganizationID)
			}
			if resp.RemoteInfo.GcpProject == nil {
				r.RemoteInfo.GcpProject = nil
			} else {
				r.RemoteInfo.GcpProject = &tfTypes.GcpProject{}
				r.RemoteInfo.GcpProject.ProjectID = types.StringValue(resp.RemoteInfo.GcpProject.ProjectID)
			}
			if resp.RemoteInfo.GcpServiceAccount == nil {
				r.RemoteInfo.GcpServiceAccount = nil
			} else {
				r.RemoteInfo.GcpServiceAccount = &tfTypes.GcpServiceAccount{}
				r.RemoteInfo.GcpServiceAccount.Email = types.StringValue(resp.RemoteInfo.GcpServiceAccount.Email)
				r.RemoteInfo.GcpServiceAccount.ProjectID = types.StringValue(resp.RemoteInfo.GcpServiceAccount.ProjectID)
				r.RemoteInfo.GcpServiceAccount.ServiceAccountID = types.StringValue(resp.RemoteInfo.GcpServiceAccount.ServiceAccountID)
			}
			if resp.RemoteInfo.GcpSQLInstance == nil {
				r.RemoteInfo.GcpSQLInstance = nil
			} else {
				r.RemoteInfo.GcpSQLInstance = &tfTypes.GcpSQLInstance{}
				r.RemoteInfo.GcpSQLInstance.InstanceID = types.StringValue(resp.RemoteInfo.GcpSQLInstance.InstanceID)
				r.RemoteInfo.GcpSQLInstance.ProjectID = types.StringValue(resp.RemoteInfo.GcpSQLInstance.ProjectID)
			}
			if resp.RemoteInfo.GithubOrgRole == nil {
				r.RemoteInfo.GithubOrgRole = nil
			} else {
				r.RemoteInfo.GithubOrgRole = &tfTypes.SnowflakeRole{}
				r.RemoteInfo.GithubOrgRole.RoleID = types.StringValue(resp.RemoteInfo.GithubOrgRole.RoleID)
			}
			if resp.RemoteInfo.GithubRepo == nil {
				r.RemoteInfo.GithubRepo = nil
			} else {
				r.RemoteInfo.GithubRepo = &tfTypes.GithubRepo{}
				r.RemoteInfo.GithubRepo.RepoName = types.StringValue(resp.RemoteInfo.GithubRepo.RepoName)
			}
			if resp.RemoteInfo.GitlabProject == nil {
				r.RemoteInfo.GitlabProject = nil
			} else {
				r.RemoteInfo.GitlabProject = &tfTypes.GcpProject{}
				r.RemoteInfo.GitlabProject.ProjectID = types.StringValue(resp.RemoteInfo.GitlabProject.ProjectID)
			}
			if resp.RemoteInfo.GoogleWorkspaceRole == nil {
				r.RemoteInfo.GoogleWorkspaceRole = nil
			} else {
				r.RemoteInfo.GoogleWorkspaceRole = &tfTypes.SnowflakeRole{}
				r.RemoteInfo.GoogleWorkspaceRole.RoleID = types.StringValue(resp.RemoteInfo.GoogleWorkspaceRole.RoleID)
			}
			if resp.RemoteInfo.OktaApp == nil {
				r.RemoteInfo.OktaApp = nil
			} else {
				r.RemoteInfo.OktaApp = &tfTypes.OktaApp{}
				r.RemoteInfo.OktaApp.AppID = types.StringValue(resp.RemoteInfo.OktaApp.AppID)
			}
			if resp.RemoteInfo.OktaCustomRole == nil {
				r.RemoteInfo.OktaCustomRole = nil
			} else {
				r.RemoteInfo.OktaCustomRole = &tfTypes.SnowflakeRole{}
				r.RemoteInfo.OktaCustomRole.RoleID = types.StringValue(resp.RemoteInfo.OktaCustomRole.RoleID)
			}
			if resp.RemoteInfo.OktaStandardRole == nil {
				r.RemoteInfo.OktaStandardRole = nil
			} else {
				r.RemoteInfo.OktaStandardRole = &tfTypes.OktaStandardRole{}
				r.RemoteInfo.OktaStandardRole.RoleType = types.StringValue(resp.RemoteInfo.OktaStandardRole.RoleType)
			}
			if resp.RemoteInfo.PagerdutyRole == nil {
				r.RemoteInfo.PagerdutyRole = nil
			} else {
				r.RemoteInfo.PagerdutyRole = &tfTypes.PagerdutyRole{}
				r.RemoteInfo.PagerdutyRole.RoleName = types.StringValue(resp.RemoteInfo.PagerdutyRole.RoleName)
			}
			if resp.RemoteInfo.SalesforcePermissionSet == nil {
				r.RemoteInfo.SalesforcePermissionSet = nil
			} else {
				r.RemoteInfo.SalesforcePermissionSet = &tfTypes.SalesforcePermissionSet{}
				r.RemoteInfo.SalesforcePermissionSet.PermissionSetID = types.StringValue(resp.RemoteInfo.SalesforcePermissionSet.PermissionSetID)
			}
			if resp.RemoteInfo.SalesforceProfile == nil {
				r.RemoteInfo.SalesforceProfile = nil
			} else {
				r.RemoteInfo.SalesforceProfile = &tfTypes.SalesforceProfile{}
				r.RemoteInfo.SalesforceProfile.ProfileID = types.StringValue(resp.RemoteInfo.SalesforceProfile.ProfileID)
				r.RemoteInfo.SalesforceProfile.UserLicenseID = types.StringValue(resp.RemoteInfo.SalesforceProfile.UserLicenseID)
			}
			if resp.RemoteInfo.SalesforceRole == nil {
				r.RemoteInfo.SalesforceRole = nil
			} else {
				r.RemoteInfo.SalesforceRole = &tfTypes.SnowflakeRole{}
				r.RemoteInfo.SalesforceRole.RoleID = types.StringValue(resp.RemoteInfo.SalesforceRole.RoleID)
			}
			if resp.RemoteInfo.TeleportRole == nil {
				r.RemoteInfo.TeleportRole = nil
			} else {
				r.RemoteInfo.TeleportRole = &tfTypes.PagerdutyRole{}
				r.RemoteInfo.TeleportRole.RoleName = types.StringValue(resp.RemoteInfo.TeleportRole.RoleName)
			}
		}
		r.RequestConfigurations = []tfTypes.RequestConfiguration{}

		for _, requestConfigurationsItem := range resp.RequestConfigurations {
			var requestConfigurations tfTypes.RequestConfiguration

			requestConfigurations.AllowRequests = types.BoolValue(requestConfigurationsItem.AllowRequests)
			requestConfigurations.AutoApproval = types.BoolValue(requestConfigurationsItem.AutoApproval)
			if requestConfigurationsItem.Condition == nil {
				requestConfigurations.Condition = nil
			} else {
				requestConfigurations.Condition = &tfTypes.Condition{}
				requestConfigurations.Condition.GroupIds = make([]types.String, 0, len(requestConfigurationsItem.Condition.GroupIds))
				for _, v := range requestConfigurationsItem.Condition.GroupIds {
					requestConfigurations.Condition.GroupIds = append(requestConfigurations.Condition.GroupIds, types.StringValue(v))
				}
				requestConfigurations.Condition.RoleRemoteIds = make([]types.String, 0, len(requestConfigurationsItem.Condition.RoleRemoteIds))
				for _, v := range requestConfigurationsItem.Condition.RoleRemoteIds {
					requestConfigurations.Condition.RoleRemoteIds = append(requestConfigurations.Condition.RoleRemoteIds, types.StringValue(v))
				}
			}
			requestConfigurations.ExtensionsDurationInMinutes = types.Int64PointerValue(requestConfigurationsItem.ExtensionsDurationInMinutes)
			requestConfigurations.MaxDuration = types.Int64PointerValue(requestConfigurationsItem.MaxDuration)
			requestConfigurations.Priority = types.Int64Value(requestConfigurationsItem.Priority)
			requestConfigurations.RecommendedDuration = types.Int64PointerValue(requestConfigurationsItem.RecommendedDuration)
			requestConfigurations.RequestTemplateID = types.StringPointerValue(requestConfigurationsItem.RequestTemplateID)
			requestConfigurations.RequireMfaToRequest = types.BoolValue(requestConfigurationsItem.RequireMfaToRequest)
			requestConfigurations.RequireSupportTicket = types.BoolValue(requestConfigurationsItem.RequireSupportTicket)
			requestConfigurations.ReviewerStages = []tfTypes.ReviewerStage{}

			for _, reviewerStagesItem := range requestConfigurationsItem.ReviewerStages {
				var reviewerStages tfTypes.ReviewerStage

				if reviewerStagesItem.Operator != nil {
					reviewerStages.Operator = types.StringValue(string(*reviewerStagesItem.Operator))
				} else {
					reviewerStages.Operator = types.StringNull()
				}
				reviewerStages.OwnerIds = make([]types.String, 0, len(reviewerStagesItem.OwnerIds))
				for _, v := range reviewerStagesItem.OwnerIds {
					reviewerStages.OwnerIds = append(reviewerStages.OwnerIds, types.StringValue(v))
				}
				reviewerStages.RequireAdminApproval = types.BoolPointerValue(reviewerStagesItem.RequireAdminApproval)
				reviewerStages.RequireManagerApproval = types.BoolPointerValue(reviewerStagesItem.RequireManagerApproval)

				requestConfigurations.ReviewerStages = append(requestConfigurations.ReviewerStages, reviewerStages)
			}

			r.RequestConfigurations = append(r.RequestConfigurations, requestConfigurations)
		}
		r.RequireMfaToApprove = types.BoolPointerValue(resp.RequireMfaToApprove)
		r.RequireMfaToConnect = types.BoolPointerValue(resp.RequireMfaToConnect)
		if resp.ResourceType != nil {
			r.ResourceType = types.StringValue(string(*resp.ResourceType))
		} else {
			r.ResourceType = types.StringNull()
		}
		if resp.RiskSensitivity != nil {
			r.RiskSensitivity = types.StringValue(string(*resp.RiskSensitivity))
		} else {
			r.RiskSensitivity = types.StringNull()
		}
		if resp.RiskSensitivityOverride != nil {
			r.RiskSensitivityOverride = types.StringValue(string(*resp.RiskSensitivityOverride))
		} else {
			r.RiskSensitivityOverride = types.StringNull()
		}
		if resp.TicketPropagation == nil {
			r.TicketPropagation = nil
		} else {
			r.TicketPropagation = &tfTypes.TicketPropagationConfiguration{}
			r.TicketPropagation.EnabledOnGrant = types.BoolValue(resp.TicketPropagation.EnabledOnGrant)
			r.TicketPropagation.EnabledOnRevocation = types.BoolValue(resp.TicketPropagation.EnabledOnRevocation)
			r.TicketPropagation.TicketProjectID = types.StringPointerValue(resp.TicketPropagation.TicketProjectID)
			if resp.TicketPropagation.TicketProvider != nil {
				r.TicketPropagation.TicketProvider = types.StringValue(string(*resp.TicketPropagation.TicketProvider))
			} else {
				r.TicketPropagation.TicketProvider = types.StringNull()
			}
		}
	}

	return diags
}

func (r *ResourceDataSourceModel) ToOperationsGetResourceIDRequest(ctx context.Context) (*operations.GetResourceIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetResourceIDRequest{
		ID: id,
	}

	return &out, diags
}
