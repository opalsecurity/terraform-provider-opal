// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/provider/typeconvert"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/shared"
)

func (r *AppsDataSourceModel) ToOperationsGetAppsRequest(ctx context.Context) (*operations.GetAppsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	appTypeFilter := make([]shared.AppTypeEnum, 0, len(r.AppTypeFilter))
	for _, appTypeFilterItem := range r.AppTypeFilter {
		appTypeFilter = append(appTypeFilter, shared.AppTypeEnum(appTypeFilterItem.ValueString()))
	}
	ownerFilter := new(string)
	if !r.OwnerFilter.IsUnknown() && !r.OwnerFilter.IsNull() {
		*ownerFilter = r.OwnerFilter.ValueString()
	} else {
		ownerFilter = nil
	}
	out := operations.GetAppsRequest{
		AppTypeFilter: appTypeFilter,
		OwnerFilter:   ownerFilter,
	}

	return &out, diags
}

func (r *AppsDataSourceModel) RefreshFromSharedAppsList(ctx context.Context, resp *shared.AppsList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Apps = []tfTypes.App{}
		if len(r.Apps) > len(resp.Apps) {
			r.Apps = r.Apps[:len(resp.Apps)]
		}
		for appsCount, appsItem := range resp.Apps {
			var apps tfTypes.App
			apps.AdminOwnerID = types.StringValue(appsItem.AdminOwnerID)
			apps.Description = types.StringValue(appsItem.Description)
			apps.ID = types.StringValue(appsItem.ID)
			apps.Name = types.StringValue(appsItem.Name)
			apps.Type = types.StringValue(appsItem.Type)
			apps.Validations = []tfTypes.AppValidation{}
			for validationsCount, validationsItem := range appsItem.Validations {
				var validations tfTypes.AppValidation
				validations.Details = types.StringPointerValue(validationsItem.Details)
				validations.Key = types.StringValue(validationsItem.Key)
				nameResult, _ := json.Marshal(validationsItem.Name)
				validations.Name = types.StringValue(string(nameResult))
				validations.Severity = types.StringValue(string(validationsItem.Severity))
				validations.Status = types.StringValue(string(validationsItem.Status))
				validations.UpdatedAt = types.StringValue(typeconvert.TimeToString(validationsItem.UpdatedAt))
				validations.UsageReason = types.StringPointerValue(validationsItem.UsageReason)
				if validationsCount+1 > len(apps.Validations) {
					apps.Validations = append(apps.Validations, validations)
				} else {
					apps.Validations[validationsCount].Details = validations.Details
					apps.Validations[validationsCount].Key = validations.Key
					apps.Validations[validationsCount].Name = validations.Name
					apps.Validations[validationsCount].Severity = validations.Severity
					apps.Validations[validationsCount].Status = validations.Status
					apps.Validations[validationsCount].UpdatedAt = validations.UpdatedAt
					apps.Validations[validationsCount].UsageReason = validations.UsageReason
				}
			}
			if appsCount+1 > len(r.Apps) {
				r.Apps = append(r.Apps, apps)
			} else {
				r.Apps[appsCount].AdminOwnerID = apps.AdminOwnerID
				r.Apps[appsCount].Description = apps.Description
				r.Apps[appsCount].ID = apps.ID
				r.Apps[appsCount].Name = apps.Name
				r.Apps[appsCount].Type = apps.Type
				r.Apps[appsCount].Validations = apps.Validations
			}
		}
	}

	return diags
}
