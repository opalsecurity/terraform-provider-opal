// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/shared"
	"time"
)

func (r *AppsDataSourceModel) RefreshFromSharedAppsList(resp *shared.AppsList) {
	if resp != nil {
		r.Apps = []tfTypes.App{}
		if len(r.Apps) > len(resp.Apps) {
			r.Apps = r.Apps[:len(resp.Apps)]
		}
		for appsCount, appsItem := range resp.Apps {
			var apps1 tfTypes.App
			apps1.AdminOwnerID = types.StringValue(appsItem.AdminOwnerID)
			apps1.Description = types.StringValue(appsItem.Description)
			apps1.ID = types.StringValue(appsItem.ID)
			apps1.Name = types.StringValue(appsItem.Name)
			apps1.Type = types.StringValue(appsItem.Type)
			apps1.Validations = []tfTypes.AppValidation{}
			for validationsCount, validationsItem := range appsItem.Validations {
				var validations1 tfTypes.AppValidation
				validations1.Details = types.StringPointerValue(validationsItem.Details)
				validations1.Key = types.StringValue(validationsItem.Key)
				nameResult, _ := json.Marshal(validationsItem.Name)
				validations1.Name = types.StringValue(string(nameResult))
				validations1.Severity = types.StringValue(string(validationsItem.Severity))
				validations1.Status = types.StringValue(string(validationsItem.Status))
				validations1.UpdatedAt = types.StringValue(validationsItem.UpdatedAt.Format(time.RFC3339Nano))
				validations1.UsageReason = types.StringPointerValue(validationsItem.UsageReason)
				if validationsCount+1 > len(apps1.Validations) {
					apps1.Validations = append(apps1.Validations, validations1)
				} else {
					apps1.Validations[validationsCount].Details = validations1.Details
					apps1.Validations[validationsCount].Key = validations1.Key
					apps1.Validations[validationsCount].Name = validations1.Name
					apps1.Validations[validationsCount].Severity = validations1.Severity
					apps1.Validations[validationsCount].Status = validations1.Status
					apps1.Validations[validationsCount].UpdatedAt = validations1.UpdatedAt
					apps1.Validations[validationsCount].UsageReason = validations1.UsageReason
				}
			}
			if appsCount+1 > len(r.Apps) {
				r.Apps = append(r.Apps, apps1)
			} else {
				r.Apps[appsCount].AdminOwnerID = apps1.AdminOwnerID
				r.Apps[appsCount].Description = apps1.Description
				r.Apps[appsCount].ID = apps1.ID
				r.Apps[appsCount].Name = apps1.Name
				r.Apps[appsCount].Type = apps1.Type
				r.Apps[appsCount].Validations = apps1.Validations
			}
		}
	}
}
