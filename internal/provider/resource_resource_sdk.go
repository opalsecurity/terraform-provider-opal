// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/typeconvert"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/shared"
)

func (r *ResourceResourceModel) RefreshFromSharedResource(ctx context.Context, resp *shared.Resource) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AdminOwnerID = types.StringPointerValue(resp.AdminOwnerID)
		r.AncestorResourceIds = make([]types.String, 0, len(resp.AncestorResourceIds))
		for _, v := range resp.AncestorResourceIds {
			r.AncestorResourceIds = append(r.AncestorResourceIds, types.StringValue(v))
		}
		r.AppID = types.StringPointerValue(resp.AppID)
		r.CustomRequestNotification = types.StringPointerValue(resp.CustomRequestNotification)
		r.DescendantResourceIds = make([]types.String, 0, len(resp.DescendantResourceIds))
		for _, v := range resp.DescendantResourceIds {
			r.DescendantResourceIds = append(r.DescendantResourceIds, types.StringValue(v))
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.ExtensionsDurationInMinutes = types.Int64PointerValue(resp.ExtensionsDurationInMinutes)
		r.ID = types.StringValue(resp.ID)
		if resp.LastSuccessfulSync == nil {
			r.LastSuccessfulSync = nil
		} else {
			r.LastSuccessfulSync = &tfTypes.SyncTask{}
			r.LastSuccessfulSync.CompletedAt = types.StringValue(typeconvert.TimeToString(resp.LastSuccessfulSync.CompletedAt))
			r.LastSuccessfulSync.ID = types.StringValue(resp.LastSuccessfulSync.ID)
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.ParentResourceID = types.StringPointerValue(resp.ParentResourceID)
		if resp.RemoteInfo == nil {
			r.RemoteInfo = nil
		} else {
			r.RemoteInfo = &tfTypes.ResourceRemoteInfo{}
			if resp.RemoteInfo.AnthropicWorkspace == nil {
				r.RemoteInfo.AnthropicWorkspace = nil
			} else {
				r.RemoteInfo.AnthropicWorkspace = &tfTypes.AnthropicWorkspace{}
				r.RemoteInfo.AnthropicWorkspace.WorkspaceID = types.StringValue(resp.RemoteInfo.AnthropicWorkspace.WorkspaceID)
			}
			if resp.RemoteInfo.AwsAccount == nil {
				r.RemoteInfo.AwsAccount = nil
			} else {
				r.RemoteInfo.AwsAccount = &tfTypes.AwsAccount{}
				r.RemoteInfo.AwsAccount.AccountID = types.StringValue(resp.RemoteInfo.AwsAccount.AccountID)
				r.RemoteInfo.AwsAccount.OrganizationalUnitID = types.StringPointerValue(resp.RemoteInfo.AwsAccount.OrganizationalUnitID)
			}
			if resp.RemoteInfo.AwsEc2Instance == nil {
				r.RemoteInfo.AwsEc2Instance = nil
			} else {
				r.RemoteInfo.AwsEc2Instance = &tfTypes.AwsEc2Instance{}
				r.RemoteInfo.AwsEc2Instance.AccountID = types.StringPointerValue(resp.RemoteInfo.AwsEc2Instance.AccountID)
				r.RemoteInfo.AwsEc2Instance.InstanceID = types.StringValue(resp.RemoteInfo.AwsEc2Instance.InstanceID)
				r.RemoteInfo.AwsEc2Instance.Region = types.StringValue(resp.RemoteInfo.AwsEc2Instance.Region)
			}
			if resp.RemoteInfo.AwsEksCluster == nil {
				r.RemoteInfo.AwsEksCluster = nil
			} else {
				r.RemoteInfo.AwsEksCluster = &tfTypes.AwsEksCluster{}
				r.RemoteInfo.AwsEksCluster.AccountID = types.StringPointerValue(resp.RemoteInfo.AwsEksCluster.AccountID)
				r.RemoteInfo.AwsEksCluster.Arn = types.StringValue(resp.RemoteInfo.AwsEksCluster.Arn)
			}
			if resp.RemoteInfo.AwsIamRole == nil {
				r.RemoteInfo.AwsIamRole = nil
			} else {
				r.RemoteInfo.AwsIamRole = &tfTypes.AwsEksCluster{}
				r.RemoteInfo.AwsIamRole.AccountID = types.StringPointerValue(resp.RemoteInfo.AwsIamRole.AccountID)
				r.RemoteInfo.AwsIamRole.Arn = types.StringValue(resp.RemoteInfo.AwsIamRole.Arn)
			}
			if resp.RemoteInfo.AwsOrganizationalUnit == nil {
				r.RemoteInfo.AwsOrganizationalUnit = nil
			} else {
				r.RemoteInfo.AwsOrganizationalUnit = &tfTypes.AwsOrganizationalUnit{}
				r.RemoteInfo.AwsOrganizationalUnit.OrganizationalUnitID = types.StringValue(resp.RemoteInfo.AwsOrganizationalUnit.OrganizationalUnitID)
				r.RemoteInfo.AwsOrganizationalUnit.ParentID = types.StringPointerValue(resp.RemoteInfo.AwsOrganizationalUnit.ParentID)
			}
			if resp.RemoteInfo.AwsPermissionSet == nil {
				r.RemoteInfo.AwsPermissionSet = nil
			} else {
				r.RemoteInfo.AwsPermissionSet = &tfTypes.AwsPermissionSet{}
				r.RemoteInfo.AwsPermissionSet.AccountID = types.StringValue(resp.RemoteInfo.AwsPermissionSet.AccountID)
				r.RemoteInfo.AwsPermissionSet.Arn = types.StringValue(resp.RemoteInfo.AwsPermissionSet.Arn)
			}
			if resp.RemoteInfo.AwsRdsInstance == nil {
				r.RemoteInfo.AwsRdsInstance = nil
			} else {
				r.RemoteInfo.AwsRdsInstance = &tfTypes.AwsRdsInstance{}
				r.RemoteInfo.AwsRdsInstance.AccountID = types.StringPointerValue(resp.RemoteInfo.AwsRdsInstance.AccountID)
				r.RemoteInfo.AwsRdsInstance.InstanceID = types.StringValue(resp.RemoteInfo.AwsRdsInstance.InstanceID)
				r.RemoteInfo.AwsRdsInstance.Region = types.StringValue(resp.RemoteInfo.AwsRdsInstance.Region)
				r.RemoteInfo.AwsRdsInstance.ResourceID = types.StringValue(resp.RemoteInfo.AwsRdsInstance.ResourceID)
			}
			if resp.RemoteInfo.AzureEnterpriseApp == nil {
				r.RemoteInfo.AzureEnterpriseApp = nil
			} else {
				r.RemoteInfo.AzureEnterpriseApp = &tfTypes.AzureEnterpriseApp{}
				r.RemoteInfo.AzureEnterpriseApp.ResourceID = types.StringValue(resp.RemoteInfo.AzureEnterpriseApp.ResourceID)
			}
			if resp.RemoteInfo.AzureEntraIDRole == nil {
				r.RemoteInfo.AzureEntraIDRole = nil
			} else {
				r.RemoteInfo.AzureEntraIDRole = &tfTypes.AzureEnterpriseApp{}
				r.RemoteInfo.AzureEntraIDRole.ResourceID = types.StringValue(resp.RemoteInfo.AzureEntraIDRole.ResourceID)
			}
			if resp.RemoteInfo.AzureManagementGroup == nil {
				r.RemoteInfo.AzureManagementGroup = nil
			} else {
				r.RemoteInfo.AzureManagementGroup = &tfTypes.AzureEnterpriseApp{}
				r.RemoteInfo.AzureManagementGroup.ResourceID = types.StringValue(resp.RemoteInfo.AzureManagementGroup.ResourceID)
			}
			if resp.RemoteInfo.AzureResourceGroup == nil {
				r.RemoteInfo.AzureResourceGroup = nil
			} else {
				r.RemoteInfo.AzureResourceGroup = &tfTypes.AzureEnterpriseApp{}
				r.RemoteInfo.AzureResourceGroup.ResourceID = types.StringValue(resp.RemoteInfo.AzureResourceGroup.ResourceID)
			}
			if resp.RemoteInfo.AzureSQLDatabase == nil {
				r.RemoteInfo.AzureSQLDatabase = nil
			} else {
				r.RemoteInfo.AzureSQLDatabase = &tfTypes.AzureEnterpriseApp{}
				r.RemoteInfo.AzureSQLDatabase.ResourceID = types.StringValue(resp.RemoteInfo.AzureSQLDatabase.ResourceID)
			}
			if resp.RemoteInfo.AzureSQLManagedDatabase == nil {
				r.RemoteInfo.AzureSQLManagedDatabase = nil
			} else {
				r.RemoteInfo.AzureSQLManagedDatabase = &tfTypes.AzureEnterpriseApp{}
				r.RemoteInfo.AzureSQLManagedDatabase.ResourceID = types.StringValue(resp.RemoteInfo.AzureSQLManagedDatabase.ResourceID)
			}
			if resp.RemoteInfo.AzureSQLManagedInstance == nil {
				r.RemoteInfo.AzureSQLManagedInstance = nil
			} else {
				r.RemoteInfo.AzureSQLManagedInstance = &tfTypes.AzureEnterpriseApp{}
				r.RemoteInfo.AzureSQLManagedInstance.ResourceID = types.StringValue(resp.RemoteInfo.AzureSQLManagedInstance.ResourceID)
			}
			if resp.RemoteInfo.AzureSQLServer == nil {
				r.RemoteInfo.AzureSQLServer = nil
			} else {
				r.RemoteInfo.AzureSQLServer = &tfTypes.AzureEnterpriseApp{}
				r.RemoteInfo.AzureSQLServer.ResourceID = types.StringValue(resp.RemoteInfo.AzureSQLServer.ResourceID)
			}
			if resp.RemoteInfo.AzureStorageAccount == nil {
				r.RemoteInfo.AzureStorageAccount = nil
			} else {
				r.RemoteInfo.AzureStorageAccount = &tfTypes.AzureEnterpriseApp{}
				r.RemoteInfo.AzureStorageAccount.ResourceID = types.StringValue(resp.RemoteInfo.AzureStorageAccount.ResourceID)
			}
			if resp.RemoteInfo.AzureStorageContainer == nil {
				r.RemoteInfo.AzureStorageContainer = nil
			} else {
				r.RemoteInfo.AzureStorageContainer = &tfTypes.AzureEnterpriseApp{}
				r.RemoteInfo.AzureStorageContainer.ResourceID = types.StringValue(resp.RemoteInfo.AzureStorageContainer.ResourceID)
			}
			if resp.RemoteInfo.AzureSubscription == nil {
				r.RemoteInfo.AzureSubscription = nil
			} else {
				r.RemoteInfo.AzureSubscription = &tfTypes.AzureEnterpriseApp{}
				r.RemoteInfo.AzureSubscription.ResourceID = types.StringValue(resp.RemoteInfo.AzureSubscription.ResourceID)
			}
			if resp.RemoteInfo.AzureUserAssignedManagedIdentity == nil {
				r.RemoteInfo.AzureUserAssignedManagedIdentity = nil
			} else {
				r.RemoteInfo.AzureUserAssignedManagedIdentity = &tfTypes.AzureEnterpriseApp{}
				r.RemoteInfo.AzureUserAssignedManagedIdentity.ResourceID = types.StringValue(resp.RemoteInfo.AzureUserAssignedManagedIdentity.ResourceID)
			}
			if resp.RemoteInfo.AzureVirtualMachine == nil {
				r.RemoteInfo.AzureVirtualMachine = nil
			} else {
				r.RemoteInfo.AzureVirtualMachine = &tfTypes.AzureEnterpriseApp{}
				r.RemoteInfo.AzureVirtualMachine.ResourceID = types.StringValue(resp.RemoteInfo.AzureVirtualMachine.ResourceID)
			}
			if resp.RemoteInfo.CoupaRole == nil {
				r.RemoteInfo.CoupaRole = nil
			} else {
				r.RemoteInfo.CoupaRole = &tfTypes.SnowflakeRole{}
				r.RemoteInfo.CoupaRole.RoleID = types.StringValue(resp.RemoteInfo.CoupaRole.RoleID)
			}
			if resp.RemoteInfo.CursorOrganization == nil {
				r.RemoteInfo.CursorOrganization = nil
			} else {
				r.RemoteInfo.CursorOrganization = &tfTypes.CursorOrganization{}
				r.RemoteInfo.CursorOrganization.OrgID = types.StringValue(resp.RemoteInfo.CursorOrganization.OrgID)
			}
			if resp.RemoteInfo.CustomConnector == nil {
				r.RemoteInfo.CustomConnector = nil
			} else {
				r.RemoteInfo.CustomConnector = &tfTypes.CustomConnector{}
				r.RemoteInfo.CustomConnector.CanHaveUsageEvents = types.BoolValue(resp.RemoteInfo.CustomConnector.CanHaveUsageEvents)
				r.RemoteInfo.CustomConnector.RemoteResourceID = types.StringValue(resp.RemoteInfo.CustomConnector.RemoteResourceID)
			}
			if resp.RemoteInfo.DatastaxAstraRole == nil {
				r.RemoteInfo.DatastaxAstraRole = nil
			} else {
				r.RemoteInfo.DatastaxAstraRole = &tfTypes.SnowflakeRole{}
				r.RemoteInfo.DatastaxAstraRole.RoleID = types.StringValue(resp.RemoteInfo.DatastaxAstraRole.RoleID)
			}
			if resp.RemoteInfo.GcpBigQueryDataset == nil {
				r.RemoteInfo.GcpBigQueryDataset = nil
			} else {
				r.RemoteInfo.GcpBigQueryDataset = &tfTypes.GcpBigQueryDataset{}
				r.RemoteInfo.GcpBigQueryDataset.DatasetID = types.StringValue(resp.RemoteInfo.GcpBigQueryDataset.DatasetID)
				r.RemoteInfo.GcpBigQueryDataset.ProjectID = types.StringValue(resp.RemoteInfo.GcpBigQueryDataset.ProjectID)
			}
			if resp.RemoteInfo.GcpBigQueryTable == nil {
				r.RemoteInfo.GcpBigQueryTable = nil
			} else {
				r.RemoteInfo.GcpBigQueryTable = &tfTypes.GcpBigQueryTable{}
				r.RemoteInfo.GcpBigQueryTable.DatasetID = types.StringValue(resp.RemoteInfo.GcpBigQueryTable.DatasetID)
				r.RemoteInfo.GcpBigQueryTable.ProjectID = types.StringValue(resp.RemoteInfo.GcpBigQueryTable.ProjectID)
				r.RemoteInfo.GcpBigQueryTable.TableID = types.StringValue(resp.RemoteInfo.GcpBigQueryTable.TableID)
			}
			if resp.RemoteInfo.GcpBucket == nil {
				r.RemoteInfo.GcpBucket = nil
			} else {
				r.RemoteInfo.GcpBucket = &tfTypes.GcpBucket{}
				r.RemoteInfo.GcpBucket.BucketID = types.StringValue(resp.RemoteInfo.GcpBucket.BucketID)
			}
			if resp.RemoteInfo.GcpComputeInstance == nil {
				r.RemoteInfo.GcpComputeInstance = nil
			} else {
				r.RemoteInfo.GcpComputeInstance = &tfTypes.GcpComputeInstance{}
				r.RemoteInfo.GcpComputeInstance.InstanceID = types.StringValue(resp.RemoteInfo.GcpComputeInstance.InstanceID)
				r.RemoteInfo.GcpComputeInstance.ProjectID = types.StringValue(resp.RemoteInfo.GcpComputeInstance.ProjectID)
				r.RemoteInfo.GcpComputeInstance.Zone = types.StringValue(resp.RemoteInfo.GcpComputeInstance.Zone)
			}
			if resp.RemoteInfo.GcpFolder == nil {
				r.RemoteInfo.GcpFolder = nil
			} else {
				r.RemoteInfo.GcpFolder = &tfTypes.GcpFolder{}
				r.RemoteInfo.GcpFolder.FolderID = types.StringValue(resp.RemoteInfo.GcpFolder.FolderID)
			}
			if resp.RemoteInfo.GcpGkeCluster == nil {
				r.RemoteInfo.GcpGkeCluster = nil
			} else {
				r.RemoteInfo.GcpGkeCluster = &tfTypes.GcpGkeCluster{}
				r.RemoteInfo.GcpGkeCluster.ClusterName = types.StringValue(resp.RemoteInfo.GcpGkeCluster.ClusterName)
			}
			if resp.RemoteInfo.GcpOrganization == nil {
				r.RemoteInfo.GcpOrganization = nil
			} else {
				r.RemoteInfo.GcpOrganization = &tfTypes.GcpOrganization{}
				r.RemoteInfo.GcpOrganization.OrganizationID = types.StringValue(resp.RemoteInfo.GcpOrganization.OrganizationID)
			}
			if resp.RemoteInfo.GcpProject == nil {
				r.RemoteInfo.GcpProject = nil
			} else {
				r.RemoteInfo.GcpProject = &tfTypes.GcpProject{}
				r.RemoteInfo.GcpProject.ProjectID = types.StringValue(resp.RemoteInfo.GcpProject.ProjectID)
			}
			if resp.RemoteInfo.GcpServiceAccount == nil {
				r.RemoteInfo.GcpServiceAccount = nil
			} else {
				r.RemoteInfo.GcpServiceAccount = &tfTypes.GcpServiceAccount{}
				r.RemoteInfo.GcpServiceAccount.Email = types.StringValue(resp.RemoteInfo.GcpServiceAccount.Email)
				r.RemoteInfo.GcpServiceAccount.ProjectID = types.StringValue(resp.RemoteInfo.GcpServiceAccount.ProjectID)
				r.RemoteInfo.GcpServiceAccount.ServiceAccountID = types.StringValue(resp.RemoteInfo.GcpServiceAccount.ServiceAccountID)
			}
			if resp.RemoteInfo.GcpSQLInstance == nil {
				r.RemoteInfo.GcpSQLInstance = nil
			} else {
				r.RemoteInfo.GcpSQLInstance = &tfTypes.GcpSQLInstance{}
				r.RemoteInfo.GcpSQLInstance.InstanceID = types.StringValue(resp.RemoteInfo.GcpSQLInstance.InstanceID)
				r.RemoteInfo.GcpSQLInstance.ProjectID = types.StringValue(resp.RemoteInfo.GcpSQLInstance.ProjectID)
			}
			if resp.RemoteInfo.GithubOrg == nil {
				r.RemoteInfo.GithubOrg = nil
			} else {
				r.RemoteInfo.GithubOrg = &tfTypes.GithubOrg{}
				r.RemoteInfo.GithubOrg.OrgName = types.StringValue(resp.RemoteInfo.GithubOrg.OrgName)
			}
			if resp.RemoteInfo.GithubOrgRole == nil {
				r.RemoteInfo.GithubOrgRole = nil
			} else {
				r.RemoteInfo.GithubOrgRole = &tfTypes.SnowflakeRole{}
				r.RemoteInfo.GithubOrgRole.RoleID = types.StringValue(resp.RemoteInfo.GithubOrgRole.RoleID)
			}
			if resp.RemoteInfo.GithubRepo == nil {
				r.RemoteInfo.GithubRepo = nil
			} else {
				r.RemoteInfo.GithubRepo = &tfTypes.GithubRepo{}
				r.RemoteInfo.GithubRepo.RepoName = types.StringValue(resp.RemoteInfo.GithubRepo.RepoName)
			}
			if resp.RemoteInfo.GitlabProject == nil {
				r.RemoteInfo.GitlabProject = nil
			} else {
				r.RemoteInfo.GitlabProject = &tfTypes.GcpProject{}
				r.RemoteInfo.GitlabProject.ProjectID = types.StringValue(resp.RemoteInfo.GitlabProject.ProjectID)
			}
			if resp.RemoteInfo.GoogleWorkspaceRole == nil {
				r.RemoteInfo.GoogleWorkspaceRole = nil
			} else {
				r.RemoteInfo.GoogleWorkspaceRole = &tfTypes.SnowflakeRole{}
				r.RemoteInfo.GoogleWorkspaceRole.RoleID = types.StringValue(resp.RemoteInfo.GoogleWorkspaceRole.RoleID)
			}
			if resp.RemoteInfo.OktaApp == nil {
				r.RemoteInfo.OktaApp = nil
			} else {
				r.RemoteInfo.OktaApp = &tfTypes.OktaApp{}
				r.RemoteInfo.OktaApp.AppID = types.StringValue(resp.RemoteInfo.OktaApp.AppID)
			}
			if resp.RemoteInfo.OktaCustomRole == nil {
				r.RemoteInfo.OktaCustomRole = nil
			} else {
				r.RemoteInfo.OktaCustomRole = &tfTypes.SnowflakeRole{}
				r.RemoteInfo.OktaCustomRole.RoleID = types.StringValue(resp.RemoteInfo.OktaCustomRole.RoleID)
			}
			if resp.RemoteInfo.OktaStandardRole == nil {
				r.RemoteInfo.OktaStandardRole = nil
			} else {
				r.RemoteInfo.OktaStandardRole = &tfTypes.OktaStandardRole{}
				r.RemoteInfo.OktaStandardRole.RoleType = types.StringValue(resp.RemoteInfo.OktaStandardRole.RoleType)
			}
			if resp.RemoteInfo.OpenaiPlatformProject == nil {
				r.RemoteInfo.OpenaiPlatformProject = nil
			} else {
				r.RemoteInfo.OpenaiPlatformProject = &tfTypes.GcpProject{}
				r.RemoteInfo.OpenaiPlatformProject.ProjectID = types.StringValue(resp.RemoteInfo.OpenaiPlatformProject.ProjectID)
			}
			if resp.RemoteInfo.OpenaiPlatformServiceAccount == nil {
				r.RemoteInfo.OpenaiPlatformServiceAccount = nil
			} else {
				r.RemoteInfo.OpenaiPlatformServiceAccount = &tfTypes.OpenaiPlatformServiceAccount{}
				r.RemoteInfo.OpenaiPlatformServiceAccount.ProjectID = types.StringValue(resp.RemoteInfo.OpenaiPlatformServiceAccount.ProjectID)
				r.RemoteInfo.OpenaiPlatformServiceAccount.ServiceAccountID = types.StringValue(resp.RemoteInfo.OpenaiPlatformServiceAccount.ServiceAccountID)
			}
			if resp.RemoteInfo.PagerdutyRole == nil {
				r.RemoteInfo.PagerdutyRole = nil
			} else {
				r.RemoteInfo.PagerdutyRole = &tfTypes.PagerdutyRole{}
				r.RemoteInfo.PagerdutyRole.RoleName = types.StringValue(resp.RemoteInfo.PagerdutyRole.RoleName)
			}
			if resp.RemoteInfo.SalesforcePermissionSet == nil {
				r.RemoteInfo.SalesforcePermissionSet = nil
			} else {
				r.RemoteInfo.SalesforcePermissionSet = &tfTypes.SalesforcePermissionSet{}
				r.RemoteInfo.SalesforcePermissionSet.PermissionSetID = types.StringValue(resp.RemoteInfo.SalesforcePermissionSet.PermissionSetID)
			}
			if resp.RemoteInfo.SalesforceProfile == nil {
				r.RemoteInfo.SalesforceProfile = nil
			} else {
				r.RemoteInfo.SalesforceProfile = &tfTypes.SalesforceProfile{}
				r.RemoteInfo.SalesforceProfile.ProfileID = types.StringValue(resp.RemoteInfo.SalesforceProfile.ProfileID)
				r.RemoteInfo.SalesforceProfile.UserLicenseID = types.StringValue(resp.RemoteInfo.SalesforceProfile.UserLicenseID)
			}
			if resp.RemoteInfo.SalesforceRole == nil {
				r.RemoteInfo.SalesforceRole = nil
			} else {
				r.RemoteInfo.SalesforceRole = &tfTypes.SnowflakeRole{}
				r.RemoteInfo.SalesforceRole.RoleID = types.StringValue(resp.RemoteInfo.SalesforceRole.RoleID)
			}
			if resp.RemoteInfo.TeleportRole == nil {
				r.RemoteInfo.TeleportRole = nil
			} else {
				r.RemoteInfo.TeleportRole = &tfTypes.PagerdutyRole{}
				r.RemoteInfo.TeleportRole.RoleName = types.StringValue(resp.RemoteInfo.TeleportRole.RoleName)
			}
		}
		r.RequestConfigurations = []tfTypes.RequestConfiguration{}

		for _, requestConfigurationsItem := range resp.RequestConfigurations {
			var requestConfigurations tfTypes.RequestConfiguration

			requestConfigurations.AllowRequests = types.BoolValue(requestConfigurationsItem.AllowRequests)
			requestConfigurations.AutoApproval = types.BoolValue(requestConfigurationsItem.AutoApproval)
			if requestConfigurationsItem.Condition == nil {
				requestConfigurations.Condition = nil
			} else {
				requestConfigurations.Condition = &tfTypes.Condition{}
				requestConfigurations.Condition.GroupIds = make([]types.String, 0, len(requestConfigurationsItem.Condition.GroupIds))
				for _, v := range requestConfigurationsItem.Condition.GroupIds {
					requestConfigurations.Condition.GroupIds = append(requestConfigurations.Condition.GroupIds, types.StringValue(v))
				}
				requestConfigurations.Condition.RoleRemoteIds = make([]types.String, 0, len(requestConfigurationsItem.Condition.RoleRemoteIds))
				for _, v := range requestConfigurationsItem.Condition.RoleRemoteIds {
					requestConfigurations.Condition.RoleRemoteIds = append(requestConfigurations.Condition.RoleRemoteIds, types.StringValue(v))
				}
			}
			requestConfigurations.ExtensionsDurationInMinutes = types.Int64PointerValue(requestConfigurationsItem.ExtensionsDurationInMinutes)
			requestConfigurations.MaxDuration = types.Int64PointerValue(requestConfigurationsItem.MaxDuration)
			requestConfigurations.Priority = types.Int64Value(requestConfigurationsItem.Priority)
			requestConfigurations.RecommendedDuration = types.Int64PointerValue(requestConfigurationsItem.RecommendedDuration)
			requestConfigurations.RequestTemplateID = types.StringPointerValue(requestConfigurationsItem.RequestTemplateID)
			requestConfigurations.RequireMfaToRequest = types.BoolValue(requestConfigurationsItem.RequireMfaToRequest)
			requestConfigurations.RequireSupportTicket = types.BoolValue(requestConfigurationsItem.RequireSupportTicket)
			requestConfigurations.ReviewerStages = []tfTypes.ReviewerStage{}

			for _, reviewerStagesItem := range requestConfigurationsItem.ReviewerStages {
				var reviewerStages tfTypes.ReviewerStage

				if reviewerStagesItem.Operator != nil {
					reviewerStages.Operator = types.StringValue(string(*reviewerStagesItem.Operator))
				} else {
					reviewerStages.Operator = types.StringNull()
				}
				reviewerStages.OwnerIds = make([]types.String, 0, len(reviewerStagesItem.OwnerIds))
				for _, v := range reviewerStagesItem.OwnerIds {
					reviewerStages.OwnerIds = append(reviewerStages.OwnerIds, types.StringValue(v))
				}
				reviewerStages.RequireAdminApproval = types.BoolPointerValue(reviewerStagesItem.RequireAdminApproval)
				reviewerStages.RequireManagerApproval = types.BoolPointerValue(reviewerStagesItem.RequireManagerApproval)

				requestConfigurations.ReviewerStages = append(requestConfigurations.ReviewerStages, reviewerStages)
			}

			r.RequestConfigurations = append(r.RequestConfigurations, requestConfigurations)
		}
		r.RequireMfaToApprove = types.BoolPointerValue(resp.RequireMfaToApprove)
		r.RequireMfaToConnect = types.BoolPointerValue(resp.RequireMfaToConnect)
		if resp.ResourceType != nil {
			r.ResourceType = types.StringValue(string(*resp.ResourceType))
		} else {
			r.ResourceType = types.StringNull()
		}
		if resp.RiskSensitivity != nil {
			r.RiskSensitivity = types.StringValue(string(*resp.RiskSensitivity))
		} else {
			r.RiskSensitivity = types.StringNull()
		}
		if resp.RiskSensitivityOverride != nil {
			r.RiskSensitivityOverride = types.StringValue(string(*resp.RiskSensitivityOverride))
		} else {
			r.RiskSensitivityOverride = types.StringNull()
		}
		if resp.TicketPropagation == nil {
			r.TicketPropagation = nil
		} else {
			r.TicketPropagation = &tfTypes.TicketPropagationConfiguration{}
			r.TicketPropagation.EnabledOnGrant = types.BoolValue(resp.TicketPropagation.EnabledOnGrant)
			r.TicketPropagation.EnabledOnRevocation = types.BoolValue(resp.TicketPropagation.EnabledOnRevocation)
			r.TicketPropagation.TicketProjectID = types.StringPointerValue(resp.TicketPropagation.TicketProjectID)
			if resp.TicketPropagation.TicketProvider != nil {
				r.TicketPropagation.TicketProvider = types.StringValue(string(*resp.TicketPropagation.TicketProvider))
			} else {
				r.TicketPropagation.TicketProvider = types.StringNull()
			}
		}
	}

	return diags
}

func (r *ResourceResourceModel) RefreshFromSharedUpdateResourceInfo(ctx context.Context, resp *shared.UpdateResourceInfo) diag.Diagnostics {
	var diags diag.Diagnostics

	r.AdminOwnerID = types.StringPointerValue(resp.AdminOwnerID)
	r.CustomRequestNotification = types.StringPointerValue(resp.CustomRequestNotification)
	r.Description = types.StringPointerValue(resp.Description)
	r.ExtensionsDurationInMinutes = types.Int64PointerValue(resp.ExtensionsDurationInMinutes)
	r.ID = types.StringValue(resp.ID)
	r.Name = types.StringPointerValue(resp.Name)
	r.RequestConfigurations = []tfTypes.RequestConfiguration{}

	for _, requestConfigurationsItem := range resp.RequestConfigurations {
		var requestConfigurations tfTypes.RequestConfiguration

		requestConfigurations.AllowRequests = types.BoolValue(requestConfigurationsItem.AllowRequests)
		requestConfigurations.AutoApproval = types.BoolValue(requestConfigurationsItem.AutoApproval)
		if requestConfigurationsItem.Condition == nil {
			requestConfigurations.Condition = nil
		} else {
			requestConfigurations.Condition = &tfTypes.Condition{}
			requestConfigurations.Condition.GroupIds = make([]types.String, 0, len(requestConfigurationsItem.Condition.GroupIds))
			for _, v := range requestConfigurationsItem.Condition.GroupIds {
				requestConfigurations.Condition.GroupIds = append(requestConfigurations.Condition.GroupIds, types.StringValue(v))
			}
			requestConfigurations.Condition.RoleRemoteIds = make([]types.String, 0, len(requestConfigurationsItem.Condition.RoleRemoteIds))
			for _, v := range requestConfigurationsItem.Condition.RoleRemoteIds {
				requestConfigurations.Condition.RoleRemoteIds = append(requestConfigurations.Condition.RoleRemoteIds, types.StringValue(v))
			}
		}
		requestConfigurations.ExtensionsDurationInMinutes = types.Int64PointerValue(requestConfigurationsItem.ExtensionsDurationInMinutes)
		requestConfigurations.MaxDuration = types.Int64PointerValue(requestConfigurationsItem.MaxDuration)
		requestConfigurations.Priority = types.Int64Value(requestConfigurationsItem.Priority)
		requestConfigurations.RecommendedDuration = types.Int64PointerValue(requestConfigurationsItem.RecommendedDuration)
		requestConfigurations.RequestTemplateID = types.StringPointerValue(requestConfigurationsItem.RequestTemplateID)
		requestConfigurations.RequireMfaToRequest = types.BoolValue(requestConfigurationsItem.RequireMfaToRequest)
		requestConfigurations.RequireSupportTicket = types.BoolValue(requestConfigurationsItem.RequireSupportTicket)
		requestConfigurations.ReviewerStages = []tfTypes.ReviewerStage{}

		for _, reviewerStagesItem := range requestConfigurationsItem.ReviewerStages {
			var reviewerStages tfTypes.ReviewerStage

			if reviewerStagesItem.Operator != nil {
				reviewerStages.Operator = types.StringValue(string(*reviewerStagesItem.Operator))
			} else {
				reviewerStages.Operator = types.StringNull()
			}
			reviewerStages.OwnerIds = make([]types.String, 0, len(reviewerStagesItem.OwnerIds))
			for _, v := range reviewerStagesItem.OwnerIds {
				reviewerStages.OwnerIds = append(reviewerStages.OwnerIds, types.StringValue(v))
			}
			reviewerStages.RequireAdminApproval = types.BoolPointerValue(reviewerStagesItem.RequireAdminApproval)
			reviewerStages.RequireManagerApproval = types.BoolPointerValue(reviewerStagesItem.RequireManagerApproval)

			requestConfigurations.ReviewerStages = append(requestConfigurations.ReviewerStages, reviewerStages)
		}

		r.RequestConfigurations = append(r.RequestConfigurations, requestConfigurations)
	}
	r.RequireMfaToApprove = types.BoolPointerValue(resp.RequireMfaToApprove)
	r.RequireMfaToConnect = types.BoolPointerValue(resp.RequireMfaToConnect)
	if resp.RiskSensitivityOverride != nil {
		r.RiskSensitivityOverride = types.StringValue(string(*resp.RiskSensitivityOverride))
	} else {
		r.RiskSensitivityOverride = types.StringNull()
	}
	if resp.TicketPropagation == nil {
		r.TicketPropagation = nil
	} else {
		r.TicketPropagation = &tfTypes.TicketPropagationConfiguration{}
		r.TicketPropagation.EnabledOnGrant = types.BoolValue(resp.TicketPropagation.EnabledOnGrant)
		r.TicketPropagation.EnabledOnRevocation = types.BoolValue(resp.TicketPropagation.EnabledOnRevocation)
		r.TicketPropagation.TicketProjectID = types.StringPointerValue(resp.TicketPropagation.TicketProjectID)
		if resp.TicketPropagation.TicketProvider != nil {
			r.TicketPropagation.TicketProvider = types.StringValue(string(*resp.TicketPropagation.TicketProvider))
		} else {
			r.TicketPropagation.TicketProvider = types.StringNull()
		}
	}

	return diags
}

func (r *ResourceResourceModel) ToOperationsDeleteResourceRequest(ctx context.Context) (*operations.DeleteResourceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteResourceRequest{
		ID: id,
	}

	return &out, diags
}

func (r *ResourceResourceModel) ToOperationsGetResourceIDRequest(ctx context.Context) (*operations.GetResourceIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetResourceIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *ResourceResourceModel) ToOperationsUpdateResourceVisibilityRequest(ctx context.Context) (*operations.UpdateResourceVisibilityRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	visibilityInfo, visibilityInfoDiags := r.ToSharedVisibilityInfo(ctx)
	diags.Append(visibilityInfoDiags...)

	if diags.HasError() {
		return nil, diags
	}

	var id string
	id = r.ID.ValueString()

	out := operations.UpdateResourceVisibilityRequest{
		VisibilityInfo: *visibilityInfo,
		ID:             id,
	}

	return &out, diags
}

func (r *ResourceResourceModel) ToSharedCreateResourceInfo(ctx context.Context) (*shared.CreateResourceInfo, diag.Diagnostics) {
	var diags diag.Diagnostics

	var appID string
	appID = r.AppID.ValueString()

	customRequestNotification := new(string)
	if !r.CustomRequestNotification.IsUnknown() && !r.CustomRequestNotification.IsNull() {
		*customRequestNotification = r.CustomRequestNotification.ValueString()
	} else {
		customRequestNotification = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var name string
	name = r.Name.ValueString()

	var remoteInfo *shared.ResourceRemoteInfo
	if r.RemoteInfo != nil {
		var anthropicWorkspace *shared.AnthropicWorkspace
		if r.RemoteInfo.AnthropicWorkspace != nil {
			var workspaceID string
			workspaceID = r.RemoteInfo.AnthropicWorkspace.WorkspaceID.ValueString()

			anthropicWorkspace = &shared.AnthropicWorkspace{
				WorkspaceID: workspaceID,
			}
		}
		var awsAccount *shared.AwsAccount
		if r.RemoteInfo.AwsAccount != nil {
			var accountID string
			accountID = r.RemoteInfo.AwsAccount.AccountID.ValueString()

			organizationalUnitID := new(string)
			if !r.RemoteInfo.AwsAccount.OrganizationalUnitID.IsUnknown() && !r.RemoteInfo.AwsAccount.OrganizationalUnitID.IsNull() {
				*organizationalUnitID = r.RemoteInfo.AwsAccount.OrganizationalUnitID.ValueString()
			} else {
				organizationalUnitID = nil
			}
			awsAccount = &shared.AwsAccount{
				AccountID:            accountID,
				OrganizationalUnitID: organizationalUnitID,
			}
		}
		var awsEc2Instance *shared.AwsEc2Instance
		if r.RemoteInfo.AwsEc2Instance != nil {
			accountId1 := new(string)
			if !r.RemoteInfo.AwsEc2Instance.AccountID.IsUnknown() && !r.RemoteInfo.AwsEc2Instance.AccountID.IsNull() {
				*accountId1 = r.RemoteInfo.AwsEc2Instance.AccountID.ValueString()
			} else {
				accountId1 = nil
			}
			var instanceID string
			instanceID = r.RemoteInfo.AwsEc2Instance.InstanceID.ValueString()

			var region string
			region = r.RemoteInfo.AwsEc2Instance.Region.ValueString()

			awsEc2Instance = &shared.AwsEc2Instance{
				AccountID:  accountId1,
				InstanceID: instanceID,
				Region:     region,
			}
		}
		var awsEksCluster *shared.AwsEksCluster
		if r.RemoteInfo.AwsEksCluster != nil {
			accountId2 := new(string)
			if !r.RemoteInfo.AwsEksCluster.AccountID.IsUnknown() && !r.RemoteInfo.AwsEksCluster.AccountID.IsNull() {
				*accountId2 = r.RemoteInfo.AwsEksCluster.AccountID.ValueString()
			} else {
				accountId2 = nil
			}
			var arn string
			arn = r.RemoteInfo.AwsEksCluster.Arn.ValueString()

			awsEksCluster = &shared.AwsEksCluster{
				AccountID: accountId2,
				Arn:       arn,
			}
		}
		var awsIamRole *shared.AwsIamRole
		if r.RemoteInfo.AwsIamRole != nil {
			accountId3 := new(string)
			if !r.RemoteInfo.AwsIamRole.AccountID.IsUnknown() && !r.RemoteInfo.AwsIamRole.AccountID.IsNull() {
				*accountId3 = r.RemoteInfo.AwsIamRole.AccountID.ValueString()
			} else {
				accountId3 = nil
			}
			var arn1 string
			arn1 = r.RemoteInfo.AwsIamRole.Arn.ValueString()

			awsIamRole = &shared.AwsIamRole{
				AccountID: accountId3,
				Arn:       arn1,
			}
		}
		var awsOrganizationalUnit *shared.AwsOrganizationalUnit
		if r.RemoteInfo.AwsOrganizationalUnit != nil {
			var organizationalUnitId1 string
			organizationalUnitId1 = r.RemoteInfo.AwsOrganizationalUnit.OrganizationalUnitID.ValueString()

			parentID := new(string)
			if !r.RemoteInfo.AwsOrganizationalUnit.ParentID.IsUnknown() && !r.RemoteInfo.AwsOrganizationalUnit.ParentID.IsNull() {
				*parentID = r.RemoteInfo.AwsOrganizationalUnit.ParentID.ValueString()
			} else {
				parentID = nil
			}
			awsOrganizationalUnit = &shared.AwsOrganizationalUnit{
				OrganizationalUnitID: organizationalUnitId1,
				ParentID:             parentID,
			}
		}
		var awsPermissionSet *shared.AwsPermissionSet
		if r.RemoteInfo.AwsPermissionSet != nil {
			var accountId4 string
			accountId4 = r.RemoteInfo.AwsPermissionSet.AccountID.ValueString()

			var arn2 string
			arn2 = r.RemoteInfo.AwsPermissionSet.Arn.ValueString()

			awsPermissionSet = &shared.AwsPermissionSet{
				AccountID: accountId4,
				Arn:       arn2,
			}
		}
		var awsRdsInstance *shared.AwsRdsInstance
		if r.RemoteInfo.AwsRdsInstance != nil {
			accountId5 := new(string)
			if !r.RemoteInfo.AwsRdsInstance.AccountID.IsUnknown() && !r.RemoteInfo.AwsRdsInstance.AccountID.IsNull() {
				*accountId5 = r.RemoteInfo.AwsRdsInstance.AccountID.ValueString()
			} else {
				accountId5 = nil
			}
			var instanceId1 string
			instanceId1 = r.RemoteInfo.AwsRdsInstance.InstanceID.ValueString()

			var region1 string
			region1 = r.RemoteInfo.AwsRdsInstance.Region.ValueString()

			var resourceID string
			resourceID = r.RemoteInfo.AwsRdsInstance.ResourceID.ValueString()

			awsRdsInstance = &shared.AwsRdsInstance{
				AccountID:  accountId5,
				InstanceID: instanceId1,
				Region:     region1,
				ResourceID: resourceID,
			}
		}
		var azureEnterpriseApp *shared.AzureEnterpriseApp
		if r.RemoteInfo.AzureEnterpriseApp != nil {
			var resourceId1 string
			resourceId1 = r.RemoteInfo.AzureEnterpriseApp.ResourceID.ValueString()

			azureEnterpriseApp = &shared.AzureEnterpriseApp{
				ResourceID: resourceId1,
			}
		}
		var azureEntraIDRole *shared.AzureEntraIDRole
		if r.RemoteInfo.AzureEntraIDRole != nil {
			var resourceId2 string
			resourceId2 = r.RemoteInfo.AzureEntraIDRole.ResourceID.ValueString()

			azureEntraIDRole = &shared.AzureEntraIDRole{
				ResourceID: resourceId2,
			}
		}
		var azureManagementGroup *shared.AzureManagementGroup
		if r.RemoteInfo.AzureManagementGroup != nil {
			var resourceId3 string
			resourceId3 = r.RemoteInfo.AzureManagementGroup.ResourceID.ValueString()

			azureManagementGroup = &shared.AzureManagementGroup{
				ResourceID: resourceId3,
			}
		}
		var azureResourceGroup *shared.AzureResourceGroup
		if r.RemoteInfo.AzureResourceGroup != nil {
			var resourceId4 string
			resourceId4 = r.RemoteInfo.AzureResourceGroup.ResourceID.ValueString()

			azureResourceGroup = &shared.AzureResourceGroup{
				ResourceID: resourceId4,
			}
		}
		var azureSQLDatabase *shared.AzureSQLDatabase
		if r.RemoteInfo.AzureSQLDatabase != nil {
			var resourceId5 string
			resourceId5 = r.RemoteInfo.AzureSQLDatabase.ResourceID.ValueString()

			azureSQLDatabase = &shared.AzureSQLDatabase{
				ResourceID: resourceId5,
			}
		}
		var azureSQLManagedDatabase *shared.AzureSQLManagedDatabase
		if r.RemoteInfo.AzureSQLManagedDatabase != nil {
			var resourceId6 string
			resourceId6 = r.RemoteInfo.AzureSQLManagedDatabase.ResourceID.ValueString()

			azureSQLManagedDatabase = &shared.AzureSQLManagedDatabase{
				ResourceID: resourceId6,
			}
		}
		var azureSQLManagedInstance *shared.AzureSQLManagedInstance
		if r.RemoteInfo.AzureSQLManagedInstance != nil {
			var resourceId7 string
			resourceId7 = r.RemoteInfo.AzureSQLManagedInstance.ResourceID.ValueString()

			azureSQLManagedInstance = &shared.AzureSQLManagedInstance{
				ResourceID: resourceId7,
			}
		}
		var azureSQLServer *shared.AzureSQLServer
		if r.RemoteInfo.AzureSQLServer != nil {
			var resourceId8 string
			resourceId8 = r.RemoteInfo.AzureSQLServer.ResourceID.ValueString()

			azureSQLServer = &shared.AzureSQLServer{
				ResourceID: resourceId8,
			}
		}
		var azureStorageAccount *shared.AzureStorageAccount
		if r.RemoteInfo.AzureStorageAccount != nil {
			var resourceId9 string
			resourceId9 = r.RemoteInfo.AzureStorageAccount.ResourceID.ValueString()

			azureStorageAccount = &shared.AzureStorageAccount{
				ResourceID: resourceId9,
			}
		}
		var azureStorageContainer *shared.AzureStorageContainer
		if r.RemoteInfo.AzureStorageContainer != nil {
			var resourceId10 string
			resourceId10 = r.RemoteInfo.AzureStorageContainer.ResourceID.ValueString()

			azureStorageContainer = &shared.AzureStorageContainer{
				ResourceID: resourceId10,
			}
		}
		var azureSubscription *shared.AzureSubscription
		if r.RemoteInfo.AzureSubscription != nil {
			var resourceId11 string
			resourceId11 = r.RemoteInfo.AzureSubscription.ResourceID.ValueString()

			azureSubscription = &shared.AzureSubscription{
				ResourceID: resourceId11,
			}
		}
		var azureUserAssignedManagedIdentity *shared.AzureUserAssignedManagedIdentity
		if r.RemoteInfo.AzureUserAssignedManagedIdentity != nil {
			var resourceId12 string
			resourceId12 = r.RemoteInfo.AzureUserAssignedManagedIdentity.ResourceID.ValueString()

			azureUserAssignedManagedIdentity = &shared.AzureUserAssignedManagedIdentity{
				ResourceID: resourceId12,
			}
		}
		var azureVirtualMachine *shared.AzureVirtualMachine
		if r.RemoteInfo.AzureVirtualMachine != nil {
			var resourceId13 string
			resourceId13 = r.RemoteInfo.AzureVirtualMachine.ResourceID.ValueString()

			azureVirtualMachine = &shared.AzureVirtualMachine{
				ResourceID: resourceId13,
			}
		}
		var coupaRole *shared.CoupaRole
		if r.RemoteInfo.CoupaRole != nil {
			var roleID string
			roleID = r.RemoteInfo.CoupaRole.RoleID.ValueString()

			coupaRole = &shared.CoupaRole{
				RoleID: roleID,
			}
		}
		var cursorOrganization *shared.CursorOrganization
		if r.RemoteInfo.CursorOrganization != nil {
			var orgID string
			orgID = r.RemoteInfo.CursorOrganization.OrgID.ValueString()

			cursorOrganization = &shared.CursorOrganization{
				OrgID: orgID,
			}
		}
		var customConnector *shared.CustomConnector
		if r.RemoteInfo.CustomConnector != nil {
			var canHaveUsageEvents bool
			canHaveUsageEvents = r.RemoteInfo.CustomConnector.CanHaveUsageEvents.ValueBool()

			var remoteResourceID string
			remoteResourceID = r.RemoteInfo.CustomConnector.RemoteResourceID.ValueString()

			customConnector = &shared.CustomConnector{
				CanHaveUsageEvents: canHaveUsageEvents,
				RemoteResourceID:   remoteResourceID,
			}
		}
		var datastaxAstraRole *shared.DatastaxAstraRole
		if r.RemoteInfo.DatastaxAstraRole != nil {
			var roleId1 string
			roleId1 = r.RemoteInfo.DatastaxAstraRole.RoleID.ValueString()

			datastaxAstraRole = &shared.DatastaxAstraRole{
				RoleID: roleId1,
			}
		}
		var gcpBigQueryDataset *shared.GcpBigQueryDataset
		if r.RemoteInfo.GcpBigQueryDataset != nil {
			var datasetID string
			datasetID = r.RemoteInfo.GcpBigQueryDataset.DatasetID.ValueString()

			var projectID string
			projectID = r.RemoteInfo.GcpBigQueryDataset.ProjectID.ValueString()

			gcpBigQueryDataset = &shared.GcpBigQueryDataset{
				DatasetID: datasetID,
				ProjectID: projectID,
			}
		}
		var gcpBigQueryTable *shared.GcpBigQueryTable
		if r.RemoteInfo.GcpBigQueryTable != nil {
			var datasetId1 string
			datasetId1 = r.RemoteInfo.GcpBigQueryTable.DatasetID.ValueString()

			var projectId1 string
			projectId1 = r.RemoteInfo.GcpBigQueryTable.ProjectID.ValueString()

			var tableID string
			tableID = r.RemoteInfo.GcpBigQueryTable.TableID.ValueString()

			gcpBigQueryTable = &shared.GcpBigQueryTable{
				DatasetID: datasetId1,
				ProjectID: projectId1,
				TableID:   tableID,
			}
		}
		var gcpBucket *shared.GcpBucket
		if r.RemoteInfo.GcpBucket != nil {
			var bucketID string
			bucketID = r.RemoteInfo.GcpBucket.BucketID.ValueString()

			gcpBucket = &shared.GcpBucket{
				BucketID: bucketID,
			}
		}
		var gcpComputeInstance *shared.GcpComputeInstance
		if r.RemoteInfo.GcpComputeInstance != nil {
			var instanceId2 string
			instanceId2 = r.RemoteInfo.GcpComputeInstance.InstanceID.ValueString()

			var projectId2 string
			projectId2 = r.RemoteInfo.GcpComputeInstance.ProjectID.ValueString()

			var zone string
			zone = r.RemoteInfo.GcpComputeInstance.Zone.ValueString()

			gcpComputeInstance = &shared.GcpComputeInstance{
				InstanceID: instanceId2,
				ProjectID:  projectId2,
				Zone:       zone,
			}
		}
		var gcpFolder *shared.GcpFolder
		if r.RemoteInfo.GcpFolder != nil {
			var folderID string
			folderID = r.RemoteInfo.GcpFolder.FolderID.ValueString()

			gcpFolder = &shared.GcpFolder{
				FolderID: folderID,
			}
		}
		var gcpGkeCluster *shared.GcpGkeCluster
		if r.RemoteInfo.GcpGkeCluster != nil {
			var clusterName string
			clusterName = r.RemoteInfo.GcpGkeCluster.ClusterName.ValueString()

			gcpGkeCluster = &shared.GcpGkeCluster{
				ClusterName: clusterName,
			}
		}
		var gcpOrganization *shared.GcpOrganization
		if r.RemoteInfo.GcpOrganization != nil {
			var organizationID string
			organizationID = r.RemoteInfo.GcpOrganization.OrganizationID.ValueString()

			gcpOrganization = &shared.GcpOrganization{
				OrganizationID: organizationID,
			}
		}
		var gcpProject *shared.GcpProject
		if r.RemoteInfo.GcpProject != nil {
			var projectId3 string
			projectId3 = r.RemoteInfo.GcpProject.ProjectID.ValueString()

			gcpProject = &shared.GcpProject{
				ProjectID: projectId3,
			}
		}
		var gcpServiceAccount *shared.GcpServiceAccount
		if r.RemoteInfo.GcpServiceAccount != nil {
			var email string
			email = r.RemoteInfo.GcpServiceAccount.Email.ValueString()

			var projectId4 string
			projectId4 = r.RemoteInfo.GcpServiceAccount.ProjectID.ValueString()

			var serviceAccountID string
			serviceAccountID = r.RemoteInfo.GcpServiceAccount.ServiceAccountID.ValueString()

			gcpServiceAccount = &shared.GcpServiceAccount{
				Email:            email,
				ProjectID:        projectId4,
				ServiceAccountID: serviceAccountID,
			}
		}
		var gcpSQLInstance *shared.GcpSQLInstance
		if r.RemoteInfo.GcpSQLInstance != nil {
			var instanceId3 string
			instanceId3 = r.RemoteInfo.GcpSQLInstance.InstanceID.ValueString()

			var projectId5 string
			projectId5 = r.RemoteInfo.GcpSQLInstance.ProjectID.ValueString()

			gcpSQLInstance = &shared.GcpSQLInstance{
				InstanceID: instanceId3,
				ProjectID:  projectId5,
			}
		}
		var githubOrg *shared.GithubOrg
		if r.RemoteInfo.GithubOrg != nil {
			var orgName string
			orgName = r.RemoteInfo.GithubOrg.OrgName.ValueString()

			githubOrg = &shared.GithubOrg{
				OrgName: orgName,
			}
		}
		var githubOrgRole *shared.GithubOrgRole
		if r.RemoteInfo.GithubOrgRole != nil {
			var roleId2 string
			roleId2 = r.RemoteInfo.GithubOrgRole.RoleID.ValueString()

			githubOrgRole = &shared.GithubOrgRole{
				RoleID: roleId2,
			}
		}
		var githubRepo *shared.GithubRepo
		if r.RemoteInfo.GithubRepo != nil {
			var repoName string
			repoName = r.RemoteInfo.GithubRepo.RepoName.ValueString()

			githubRepo = &shared.GithubRepo{
				RepoName: repoName,
			}
		}
		var gitlabProject *shared.GitlabProject
		if r.RemoteInfo.GitlabProject != nil {
			var projectId6 string
			projectId6 = r.RemoteInfo.GitlabProject.ProjectID.ValueString()

			gitlabProject = &shared.GitlabProject{
				ProjectID: projectId6,
			}
		}
		var googleWorkspaceRole *shared.GoogleWorkspaceRole
		if r.RemoteInfo.GoogleWorkspaceRole != nil {
			var roleId3 string
			roleId3 = r.RemoteInfo.GoogleWorkspaceRole.RoleID.ValueString()

			googleWorkspaceRole = &shared.GoogleWorkspaceRole{
				RoleID: roleId3,
			}
		}
		var oktaApp *shared.OktaApp
		if r.RemoteInfo.OktaApp != nil {
			var appId1 string
			appId1 = r.RemoteInfo.OktaApp.AppID.ValueString()

			oktaApp = &shared.OktaApp{
				AppID: appId1,
			}
		}
		var oktaCustomRole *shared.OktaCustomRole
		if r.RemoteInfo.OktaCustomRole != nil {
			var roleId4 string
			roleId4 = r.RemoteInfo.OktaCustomRole.RoleID.ValueString()

			oktaCustomRole = &shared.OktaCustomRole{
				RoleID: roleId4,
			}
		}
		var oktaStandardRole *shared.OktaStandardRole
		if r.RemoteInfo.OktaStandardRole != nil {
			var roleType string
			roleType = r.RemoteInfo.OktaStandardRole.RoleType.ValueString()

			oktaStandardRole = &shared.OktaStandardRole{
				RoleType: roleType,
			}
		}
		var openaiPlatformProject *shared.OpenaiPlatformProject
		if r.RemoteInfo.OpenaiPlatformProject != nil {
			var projectId7 string
			projectId7 = r.RemoteInfo.OpenaiPlatformProject.ProjectID.ValueString()

			openaiPlatformProject = &shared.OpenaiPlatformProject{
				ProjectID: projectId7,
			}
		}
		var openaiPlatformServiceAccount *shared.OpenaiPlatformServiceAccount
		if r.RemoteInfo.OpenaiPlatformServiceAccount != nil {
			var projectId8 string
			projectId8 = r.RemoteInfo.OpenaiPlatformServiceAccount.ProjectID.ValueString()

			var serviceAccountId1 string
			serviceAccountId1 = r.RemoteInfo.OpenaiPlatformServiceAccount.ServiceAccountID.ValueString()

			openaiPlatformServiceAccount = &shared.OpenaiPlatformServiceAccount{
				ProjectID:        projectId8,
				ServiceAccountID: serviceAccountId1,
			}
		}
		var pagerdutyRole *shared.PagerdutyRole
		if r.RemoteInfo.PagerdutyRole != nil {
			var roleName string
			roleName = r.RemoteInfo.PagerdutyRole.RoleName.ValueString()

			pagerdutyRole = &shared.PagerdutyRole{
				RoleName: roleName,
			}
		}
		var salesforcePermissionSet *shared.SalesforcePermissionSet
		if r.RemoteInfo.SalesforcePermissionSet != nil {
			var permissionSetID string
			permissionSetID = r.RemoteInfo.SalesforcePermissionSet.PermissionSetID.ValueString()

			salesforcePermissionSet = &shared.SalesforcePermissionSet{
				PermissionSetID: permissionSetID,
			}
		}
		var salesforceProfile *shared.SalesforceProfile
		if r.RemoteInfo.SalesforceProfile != nil {
			var profileID string
			profileID = r.RemoteInfo.SalesforceProfile.ProfileID.ValueString()

			var userLicenseID string
			userLicenseID = r.RemoteInfo.SalesforceProfile.UserLicenseID.ValueString()

			salesforceProfile = &shared.SalesforceProfile{
				ProfileID:     profileID,
				UserLicenseID: userLicenseID,
			}
		}
		var salesforceRole *shared.SalesforceRole
		if r.RemoteInfo.SalesforceRole != nil {
			var roleId5 string
			roleId5 = r.RemoteInfo.SalesforceRole.RoleID.ValueString()

			salesforceRole = &shared.SalesforceRole{
				RoleID: roleId5,
			}
		}
		var teleportRole *shared.TeleportRole
		if r.RemoteInfo.TeleportRole != nil {
			var roleName1 string
			roleName1 = r.RemoteInfo.TeleportRole.RoleName.ValueString()

			teleportRole = &shared.TeleportRole{
				RoleName: roleName1,
			}
		}
		remoteInfo = &shared.ResourceRemoteInfo{
			AnthropicWorkspace:               anthropicWorkspace,
			AwsAccount:                       awsAccount,
			AwsEc2Instance:                   awsEc2Instance,
			AwsEksCluster:                    awsEksCluster,
			AwsIamRole:                       awsIamRole,
			AwsOrganizationalUnit:            awsOrganizationalUnit,
			AwsPermissionSet:                 awsPermissionSet,
			AwsRdsInstance:                   awsRdsInstance,
			AzureEnterpriseApp:               azureEnterpriseApp,
			AzureEntraIDRole:                 azureEntraIDRole,
			AzureManagementGroup:             azureManagementGroup,
			AzureResourceGroup:               azureResourceGroup,
			AzureSQLDatabase:                 azureSQLDatabase,
			AzureSQLManagedDatabase:          azureSQLManagedDatabase,
			AzureSQLManagedInstance:          azureSQLManagedInstance,
			AzureSQLServer:                   azureSQLServer,
			AzureStorageAccount:              azureStorageAccount,
			AzureStorageContainer:            azureStorageContainer,
			AzureSubscription:                azureSubscription,
			AzureUserAssignedManagedIdentity: azureUserAssignedManagedIdentity,
			AzureVirtualMachine:              azureVirtualMachine,
			CoupaRole:                        coupaRole,
			CursorOrganization:               cursorOrganization,
			CustomConnector:                  customConnector,
			DatastaxAstraRole:                datastaxAstraRole,
			GcpBigQueryDataset:               gcpBigQueryDataset,
			GcpBigQueryTable:                 gcpBigQueryTable,
			GcpBucket:                        gcpBucket,
			GcpComputeInstance:               gcpComputeInstance,
			GcpFolder:                        gcpFolder,
			GcpGkeCluster:                    gcpGkeCluster,
			GcpOrganization:                  gcpOrganization,
			GcpProject:                       gcpProject,
			GcpServiceAccount:                gcpServiceAccount,
			GcpSQLInstance:                   gcpSQLInstance,
			GithubOrg:                        githubOrg,
			GithubOrgRole:                    githubOrgRole,
			GithubRepo:                       githubRepo,
			GitlabProject:                    gitlabProject,
			GoogleWorkspaceRole:              googleWorkspaceRole,
			OktaApp:                          oktaApp,
			OktaCustomRole:                   oktaCustomRole,
			OktaStandardRole:                 oktaStandardRole,
			OpenaiPlatformProject:            openaiPlatformProject,
			OpenaiPlatformServiceAccount:     openaiPlatformServiceAccount,
			PagerdutyRole:                    pagerdutyRole,
			SalesforcePermissionSet:          salesforcePermissionSet,
			SalesforceProfile:                salesforceProfile,
			SalesforceRole:                   salesforceRole,
			TeleportRole:                     teleportRole,
		}
	}
	resourceType := shared.ResourceTypeEnum(r.ResourceType.ValueString())
	riskSensitivityOverride := new(shared.RiskSensitivityEnum)
	if !r.RiskSensitivityOverride.IsUnknown() && !r.RiskSensitivityOverride.IsNull() {
		*riskSensitivityOverride = shared.RiskSensitivityEnum(r.RiskSensitivityOverride.ValueString())
	} else {
		riskSensitivityOverride = nil
	}
	out := shared.CreateResourceInfo{
		AppID:                     appID,
		CustomRequestNotification: customRequestNotification,
		Description:               description,
		Name:                      name,
		RemoteInfo:                remoteInfo,
		ResourceType:              resourceType,
		RiskSensitivityOverride:   riskSensitivityOverride,
	}

	return &out, diags
}

func (r *ResourceResourceModel) ToSharedUpdateResourceInfo(ctx context.Context) (*shared.UpdateResourceInfo, diag.Diagnostics) {
	var diags diag.Diagnostics

	adminOwnerID := new(string)
	if !r.AdminOwnerID.IsUnknown() && !r.AdminOwnerID.IsNull() {
		*adminOwnerID = r.AdminOwnerID.ValueString()
	} else {
		adminOwnerID = nil
	}
	customRequestNotification := new(string)
	if !r.CustomRequestNotification.IsUnknown() && !r.CustomRequestNotification.IsNull() {
		*customRequestNotification = r.CustomRequestNotification.ValueString()
	} else {
		customRequestNotification = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	extensionsDurationInMinutes := new(int64)
	if !r.ExtensionsDurationInMinutes.IsUnknown() && !r.ExtensionsDurationInMinutes.IsNull() {
		*extensionsDurationInMinutes = r.ExtensionsDurationInMinutes.ValueInt64()
	} else {
		extensionsDurationInMinutes = nil
	}
	var id string
	id = r.ID.ValueString()

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	requestConfigurations := make([]shared.RequestConfiguration, 0, len(r.RequestConfigurations))
	for _, requestConfigurationsItem := range r.RequestConfigurations {
		var allowRequests bool
		allowRequests = requestConfigurationsItem.AllowRequests.ValueBool()

		var autoApproval bool
		autoApproval = requestConfigurationsItem.AutoApproval.ValueBool()

		var condition *shared.Condition
		if requestConfigurationsItem.Condition != nil {
			groupIds := make([]string, 0, len(requestConfigurationsItem.Condition.GroupIds))
			for _, groupIdsItem := range requestConfigurationsItem.Condition.GroupIds {
				groupIds = append(groupIds, groupIdsItem.ValueString())
			}
			roleRemoteIds := make([]string, 0, len(requestConfigurationsItem.Condition.RoleRemoteIds))
			for _, roleRemoteIdsItem := range requestConfigurationsItem.Condition.RoleRemoteIds {
				roleRemoteIds = append(roleRemoteIds, roleRemoteIdsItem.ValueString())
			}
			condition = &shared.Condition{
				GroupIds:      groupIds,
				RoleRemoteIds: roleRemoteIds,
			}
		}
		extensionsDurationInMinutes1 := new(int64)
		if !requestConfigurationsItem.ExtensionsDurationInMinutes.IsUnknown() && !requestConfigurationsItem.ExtensionsDurationInMinutes.IsNull() {
			*extensionsDurationInMinutes1 = requestConfigurationsItem.ExtensionsDurationInMinutes.ValueInt64()
		} else {
			extensionsDurationInMinutes1 = nil
		}
		maxDuration := new(int64)
		if !requestConfigurationsItem.MaxDuration.IsUnknown() && !requestConfigurationsItem.MaxDuration.IsNull() {
			*maxDuration = requestConfigurationsItem.MaxDuration.ValueInt64()
		} else {
			maxDuration = nil
		}
		var priority int64
		priority = requestConfigurationsItem.Priority.ValueInt64()

		recommendedDuration := new(int64)
		if !requestConfigurationsItem.RecommendedDuration.IsUnknown() && !requestConfigurationsItem.RecommendedDuration.IsNull() {
			*recommendedDuration = requestConfigurationsItem.RecommendedDuration.ValueInt64()
		} else {
			recommendedDuration = nil
		}
		requestTemplateID := new(string)
		if !requestConfigurationsItem.RequestTemplateID.IsUnknown() && !requestConfigurationsItem.RequestTemplateID.IsNull() {
			*requestTemplateID = requestConfigurationsItem.RequestTemplateID.ValueString()
		} else {
			requestTemplateID = nil
		}
		var requireMfaToRequest bool
		requireMfaToRequest = requestConfigurationsItem.RequireMfaToRequest.ValueBool()

		var requireSupportTicket bool
		requireSupportTicket = requestConfigurationsItem.RequireSupportTicket.ValueBool()

		reviewerStages := make([]shared.ReviewerStage, 0, len(requestConfigurationsItem.ReviewerStages))
		for _, reviewerStagesItem := range requestConfigurationsItem.ReviewerStages {
			operator := new(shared.Operator)
			if !reviewerStagesItem.Operator.IsUnknown() && !reviewerStagesItem.Operator.IsNull() {
				*operator = shared.Operator(reviewerStagesItem.Operator.ValueString())
			} else {
				operator = nil
			}
			ownerIds := make([]string, 0, len(reviewerStagesItem.OwnerIds))
			for _, ownerIdsItem := range reviewerStagesItem.OwnerIds {
				ownerIds = append(ownerIds, ownerIdsItem.ValueString())
			}
			requireAdminApproval := new(bool)
			if !reviewerStagesItem.RequireAdminApproval.IsUnknown() && !reviewerStagesItem.RequireAdminApproval.IsNull() {
				*requireAdminApproval = reviewerStagesItem.RequireAdminApproval.ValueBool()
			} else {
				requireAdminApproval = nil
			}
			requireManagerApproval := new(bool)
			if !reviewerStagesItem.RequireManagerApproval.IsUnknown() && !reviewerStagesItem.RequireManagerApproval.IsNull() {
				*requireManagerApproval = reviewerStagesItem.RequireManagerApproval.ValueBool()
			} else {
				requireManagerApproval = nil
			}
			reviewerStages = append(reviewerStages, shared.ReviewerStage{
				Operator:               operator,
				OwnerIds:               ownerIds,
				RequireAdminApproval:   requireAdminApproval,
				RequireManagerApproval: requireManagerApproval,
			})
		}
		requestConfigurations = append(requestConfigurations, shared.RequestConfiguration{
			AllowRequests:               allowRequests,
			AutoApproval:                autoApproval,
			Condition:                   condition,
			ExtensionsDurationInMinutes: extensionsDurationInMinutes1,
			MaxDuration:                 maxDuration,
			Priority:                    priority,
			RecommendedDuration:         recommendedDuration,
			RequestTemplateID:           requestTemplateID,
			RequireMfaToRequest:         requireMfaToRequest,
			RequireSupportTicket:        requireSupportTicket,
			ReviewerStages:              reviewerStages,
		})
	}
	requireMfaToApprove := new(bool)
	if !r.RequireMfaToApprove.IsUnknown() && !r.RequireMfaToApprove.IsNull() {
		*requireMfaToApprove = r.RequireMfaToApprove.ValueBool()
	} else {
		requireMfaToApprove = nil
	}
	requireMfaToConnect := new(bool)
	if !r.RequireMfaToConnect.IsUnknown() && !r.RequireMfaToConnect.IsNull() {
		*requireMfaToConnect = r.RequireMfaToConnect.ValueBool()
	} else {
		requireMfaToConnect = nil
	}
	riskSensitivityOverride := new(shared.RiskSensitivityEnum)
	if !r.RiskSensitivityOverride.IsUnknown() && !r.RiskSensitivityOverride.IsNull() {
		*riskSensitivityOverride = shared.RiskSensitivityEnum(r.RiskSensitivityOverride.ValueString())
	} else {
		riskSensitivityOverride = nil
	}
	var ticketPropagation *shared.TicketPropagationConfiguration
	if r.TicketPropagation != nil {
		var enabledOnGrant bool
		enabledOnGrant = r.TicketPropagation.EnabledOnGrant.ValueBool()

		var enabledOnRevocation bool
		enabledOnRevocation = r.TicketPropagation.EnabledOnRevocation.ValueBool()

		ticketProjectID := new(string)
		if !r.TicketPropagation.TicketProjectID.IsUnknown() && !r.TicketPropagation.TicketProjectID.IsNull() {
			*ticketProjectID = r.TicketPropagation.TicketProjectID.ValueString()
		} else {
			ticketProjectID = nil
		}
		ticketProvider := new(shared.TicketingProviderEnum)
		if !r.TicketPropagation.TicketProvider.IsUnknown() && !r.TicketPropagation.TicketProvider.IsNull() {
			*ticketProvider = shared.TicketingProviderEnum(r.TicketPropagation.TicketProvider.ValueString())
		} else {
			ticketProvider = nil
		}
		ticketPropagation = &shared.TicketPropagationConfiguration{
			EnabledOnGrant:      enabledOnGrant,
			EnabledOnRevocation: enabledOnRevocation,
			TicketProjectID:     ticketProjectID,
			TicketProvider:      ticketProvider,
		}
	}
	out := shared.UpdateResourceInfo{
		AdminOwnerID:                adminOwnerID,
		CustomRequestNotification:   customRequestNotification,
		Description:                 description,
		ExtensionsDurationInMinutes: extensionsDurationInMinutes,
		ID:                          id,
		Name:                        name,
		RequestConfigurations:       requestConfigurations,
		RequireMfaToApprove:         requireMfaToApprove,
		RequireMfaToConnect:         requireMfaToConnect,
		RiskSensitivityOverride:     riskSensitivityOverride,
		TicketPropagation:           ticketPropagation,
	}

	return &out, diags
}

func (r *ResourceResourceModel) ToSharedUpdateResourceInfoList(ctx context.Context) (*shared.UpdateResourceInfoList, diag.Diagnostics) {
	var diags diag.Diagnostics

	resources, resourcesDiags := r.ToSharedUpdateResourceInfo(ctx)
	diags.Append(resourcesDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateResourceInfoList{
		Resources: []shared.UpdateResourceInfo{*resources},
	}

	return &out, diags
}

func (r *ResourceResourceModel) ToSharedVisibilityInfo(ctx context.Context) (*shared.VisibilityInfo, diag.Diagnostics) {
	var diags diag.Diagnostics

	visibility := shared.VisibilityTypeEnum(r.Visibility.ValueString())
	visibilityGroupIds := make([]string, 0, len(r.VisibilityGroupIds))
	for _, visibilityGroupIdsItem := range r.VisibilityGroupIds {
		visibilityGroupIds = append(visibilityGroupIds, visibilityGroupIdsItem.ValueString())
	}
	out := shared.VisibilityInfo{
		Visibility:         visibility,
		VisibilityGroupIds: visibilityGroupIds,
	}

	return &out, diags
}
