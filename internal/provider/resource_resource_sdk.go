// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/shared"
)

func (r *ResourceResourceModel) ToSharedCreateResourceInfo() *shared.CreateResourceInfo {
	appID := r.AppID.ValueString()
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	name := r.Name.ValueString()
	var remoteInfo *shared.ResourceRemoteInfo
	if r.RemoteInfo != nil {
		var awsAccount *shared.AwsAccount
		if r.RemoteInfo.AwsAccount != nil {
			accountID := r.RemoteInfo.AwsAccount.AccountID.ValueString()
			awsAccount = &shared.AwsAccount{
				AccountID: accountID,
			}
		}
		var awsEc2Instance *shared.AwsEc2Instance
		if r.RemoteInfo.AwsEc2Instance != nil {
			accountId1 := new(string)
			if !r.RemoteInfo.AwsEc2Instance.AccountID.IsUnknown() && !r.RemoteInfo.AwsEc2Instance.AccountID.IsNull() {
				*accountId1 = r.RemoteInfo.AwsEc2Instance.AccountID.ValueString()
			} else {
				accountId1 = nil
			}
			instanceID := r.RemoteInfo.AwsEc2Instance.InstanceID.ValueString()
			region := r.RemoteInfo.AwsEc2Instance.Region.ValueString()
			awsEc2Instance = &shared.AwsEc2Instance{
				AccountID:  accountId1,
				InstanceID: instanceID,
				Region:     region,
			}
		}
		var awsEksCluster *shared.AwsEksCluster
		if r.RemoteInfo.AwsEksCluster != nil {
			accountId2 := new(string)
			if !r.RemoteInfo.AwsEksCluster.AccountID.IsUnknown() && !r.RemoteInfo.AwsEksCluster.AccountID.IsNull() {
				*accountId2 = r.RemoteInfo.AwsEksCluster.AccountID.ValueString()
			} else {
				accountId2 = nil
			}
			arn := r.RemoteInfo.AwsEksCluster.Arn.ValueString()
			awsEksCluster = &shared.AwsEksCluster{
				AccountID: accountId2,
				Arn:       arn,
			}
		}
		var awsIamRole *shared.AwsIamRole
		if r.RemoteInfo.AwsIamRole != nil {
			accountId3 := new(string)
			if !r.RemoteInfo.AwsIamRole.AccountID.IsUnknown() && !r.RemoteInfo.AwsIamRole.AccountID.IsNull() {
				*accountId3 = r.RemoteInfo.AwsIamRole.AccountID.ValueString()
			} else {
				accountId3 = nil
			}
			arn1 := r.RemoteInfo.AwsIamRole.Arn.ValueString()
			awsIamRole = &shared.AwsIamRole{
				AccountID: accountId3,
				Arn:       arn1,
			}
		}
		var awsPermissionSet *shared.AwsPermissionSet
		if r.RemoteInfo.AwsPermissionSet != nil {
			accountId4 := r.RemoteInfo.AwsPermissionSet.AccountID.ValueString()
			arn2 := r.RemoteInfo.AwsPermissionSet.Arn.ValueString()
			awsPermissionSet = &shared.AwsPermissionSet{
				AccountID: accountId4,
				Arn:       arn2,
			}
		}
		var awsRdsInstance *shared.AwsRdsInstance
		if r.RemoteInfo.AwsRdsInstance != nil {
			accountId5 := new(string)
			if !r.RemoteInfo.AwsRdsInstance.AccountID.IsUnknown() && !r.RemoteInfo.AwsRdsInstance.AccountID.IsNull() {
				*accountId5 = r.RemoteInfo.AwsRdsInstance.AccountID.ValueString()
			} else {
				accountId5 = nil
			}
			instanceId1 := r.RemoteInfo.AwsRdsInstance.InstanceID.ValueString()
			region1 := r.RemoteInfo.AwsRdsInstance.Region.ValueString()
			resourceID := r.RemoteInfo.AwsRdsInstance.ResourceID.ValueString()
			awsRdsInstance = &shared.AwsRdsInstance{
				AccountID:  accountId5,
				InstanceID: instanceId1,
				Region:     region1,
				ResourceID: resourceID,
			}
		}
		var gcpBigQueryDataset *shared.GcpBigQueryDataset
		if r.RemoteInfo.GcpBigQueryDataset != nil {
			datasetID := r.RemoteInfo.GcpBigQueryDataset.DatasetID.ValueString()
			projectID := r.RemoteInfo.GcpBigQueryDataset.ProjectID.ValueString()
			gcpBigQueryDataset = &shared.GcpBigQueryDataset{
				DatasetID: datasetID,
				ProjectID: projectID,
			}
		}
		var gcpBigQueryTable *shared.GcpBigQueryTable
		if r.RemoteInfo.GcpBigQueryTable != nil {
			datasetId1 := r.RemoteInfo.GcpBigQueryTable.DatasetID.ValueString()
			projectId1 := r.RemoteInfo.GcpBigQueryTable.ProjectID.ValueString()
			tableID := r.RemoteInfo.GcpBigQueryTable.TableID.ValueString()
			gcpBigQueryTable = &shared.GcpBigQueryTable{
				DatasetID: datasetId1,
				ProjectID: projectId1,
				TableID:   tableID,
			}
		}
		var gcpBucket *shared.GcpBucket
		if r.RemoteInfo.GcpBucket != nil {
			bucketID := r.RemoteInfo.GcpBucket.BucketID.ValueString()
			gcpBucket = &shared.GcpBucket{
				BucketID: bucketID,
			}
		}
		var gcpComputeInstance *shared.GcpComputeInstance
		if r.RemoteInfo.GcpComputeInstance != nil {
			instanceId2 := r.RemoteInfo.GcpComputeInstance.InstanceID.ValueString()
			projectId2 := r.RemoteInfo.GcpComputeInstance.ProjectID.ValueString()
			zone := r.RemoteInfo.GcpComputeInstance.Zone.ValueString()
			gcpComputeInstance = &shared.GcpComputeInstance{
				InstanceID: instanceId2,
				ProjectID:  projectId2,
				Zone:       zone,
			}
		}
		var gcpFolder *shared.GcpFolder
		if r.RemoteInfo.GcpFolder != nil {
			folderID := r.RemoteInfo.GcpFolder.FolderID.ValueString()
			gcpFolder = &shared.GcpFolder{
				FolderID: folderID,
			}
		}
		var gcpGkeCluster *shared.GcpGkeCluster
		if r.RemoteInfo.GcpGkeCluster != nil {
			clusterName := r.RemoteInfo.GcpGkeCluster.ClusterName.ValueString()
			gcpGkeCluster = &shared.GcpGkeCluster{
				ClusterName: clusterName,
			}
		}
		var gcpOrganization *shared.GcpOrganization
		if r.RemoteInfo.GcpOrganization != nil {
			organizationID := r.RemoteInfo.GcpOrganization.OrganizationID.ValueString()
			gcpOrganization = &shared.GcpOrganization{
				OrganizationID: organizationID,
			}
		}
		var gcpProject *shared.GcpProject
		if r.RemoteInfo.GcpProject != nil {
			projectId3 := r.RemoteInfo.GcpProject.ProjectID.ValueString()
			gcpProject = &shared.GcpProject{
				ProjectID: projectId3,
			}
		}
		var gcpSQLInstance *shared.GcpSQLInstance
		if r.RemoteInfo.GcpSQLInstance != nil {
			instanceId3 := r.RemoteInfo.GcpSQLInstance.InstanceID.ValueString()
			projectId4 := r.RemoteInfo.GcpSQLInstance.ProjectID.ValueString()
			gcpSQLInstance = &shared.GcpSQLInstance{
				InstanceID: instanceId3,
				ProjectID:  projectId4,
			}
		}
		var githubRepo *shared.GithubRepo
		if r.RemoteInfo.GithubRepo != nil {
			repoName := r.RemoteInfo.GithubRepo.RepoName.ValueString()
			githubRepo = &shared.GithubRepo{
				RepoName: repoName,
			}
		}
		var gitlabProject *shared.GitlabProject
		if r.RemoteInfo.GitlabProject != nil {
			projectId5 := r.RemoteInfo.GitlabProject.ProjectID.ValueString()
			gitlabProject = &shared.GitlabProject{
				ProjectID: projectId5,
			}
		}
		var oktaApp *shared.OktaApp
		if r.RemoteInfo.OktaApp != nil {
			appId1 := r.RemoteInfo.OktaApp.AppID.ValueString()
			oktaApp = &shared.OktaApp{
				AppID: appId1,
			}
		}
		var oktaCustomRole *shared.OktaCustomRole
		if r.RemoteInfo.OktaCustomRole != nil {
			roleID := r.RemoteInfo.OktaCustomRole.RoleID.ValueString()
			oktaCustomRole = &shared.OktaCustomRole{
				RoleID: roleID,
			}
		}
		var oktaStandardRole *shared.OktaStandardRole
		if r.RemoteInfo.OktaStandardRole != nil {
			roleType := r.RemoteInfo.OktaStandardRole.RoleType.ValueString()
			oktaStandardRole = &shared.OktaStandardRole{
				RoleType: roleType,
			}
		}
		var pagerdutyRole *shared.PagerdutyRole
		if r.RemoteInfo.PagerdutyRole != nil {
			roleName := r.RemoteInfo.PagerdutyRole.RoleName.ValueString()
			pagerdutyRole = &shared.PagerdutyRole{
				RoleName: roleName,
			}
		}
		var salesforcePermissionSet *shared.SalesforcePermissionSet
		if r.RemoteInfo.SalesforcePermissionSet != nil {
			permissionSetID := r.RemoteInfo.SalesforcePermissionSet.PermissionSetID.ValueString()
			salesforcePermissionSet = &shared.SalesforcePermissionSet{
				PermissionSetID: permissionSetID,
			}
		}
		var salesforceProfile *shared.SalesforceProfile
		if r.RemoteInfo.SalesforceProfile != nil {
			profileID := r.RemoteInfo.SalesforceProfile.ProfileID.ValueString()
			userLicenseID := r.RemoteInfo.SalesforceProfile.UserLicenseID.ValueString()
			salesforceProfile = &shared.SalesforceProfile{
				ProfileID:     profileID,
				UserLicenseID: userLicenseID,
			}
		}
		var salesforceRole *shared.SalesforceRole
		if r.RemoteInfo.SalesforceRole != nil {
			roleId1 := r.RemoteInfo.SalesforceRole.RoleID.ValueString()
			salesforceRole = &shared.SalesforceRole{
				RoleID: roleId1,
			}
		}
		var teleportRole *shared.TeleportRole
		if r.RemoteInfo.TeleportRole != nil {
			roleName1 := r.RemoteInfo.TeleportRole.RoleName.ValueString()
			teleportRole = &shared.TeleportRole{
				RoleName: roleName1,
			}
		}
		remoteInfo = &shared.ResourceRemoteInfo{
			AwsAccount:              awsAccount,
			AwsEc2Instance:          awsEc2Instance,
			AwsEksCluster:           awsEksCluster,
			AwsIamRole:              awsIamRole,
			AwsPermissionSet:        awsPermissionSet,
			AwsRdsInstance:          awsRdsInstance,
			GcpBigQueryDataset:      gcpBigQueryDataset,
			GcpBigQueryTable:        gcpBigQueryTable,
			GcpBucket:               gcpBucket,
			GcpComputeInstance:      gcpComputeInstance,
			GcpFolder:               gcpFolder,
			GcpGkeCluster:           gcpGkeCluster,
			GcpOrganization:         gcpOrganization,
			GcpProject:              gcpProject,
			GcpSQLInstance:          gcpSQLInstance,
			GithubRepo:              githubRepo,
			GitlabProject:           gitlabProject,
			OktaApp:                 oktaApp,
			OktaCustomRole:          oktaCustomRole,
			OktaStandardRole:        oktaStandardRole,
			PagerdutyRole:           pagerdutyRole,
			SalesforcePermissionSet: salesforcePermissionSet,
			SalesforceProfile:       salesforceProfile,
			SalesforceRole:          salesforceRole,
			TeleportRole:            teleportRole,
		}
	}
	resourceType := shared.ResourceTypeEnum(r.ResourceType.ValueString())
	out := shared.CreateResourceInfo{
		AppID:        appID,
		Description:  description,
		Name:         name,
		RemoteInfo:   remoteInfo,
		ResourceType: resourceType,
	}
	return &out
}

func (r *ResourceResourceModel) RefreshFromSharedResource(resp *shared.Resource) {
	if resp != nil {
		r.AdminOwnerID = types.StringPointerValue(resp.AdminOwnerID)
		r.AppID = types.StringPointerValue(resp.AppID)
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringPointerValue(resp.Name)
		r.ParentResourceID = types.StringPointerValue(resp.ParentResourceID)
		if resp.RemoteInfo == nil {
			r.RemoteInfo = nil
		} else {
			r.RemoteInfo = &tfTypes.ResourceRemoteInfo{}
			if resp.RemoteInfo.AwsAccount == nil {
				r.RemoteInfo.AwsAccount = nil
			} else {
				r.RemoteInfo.AwsAccount = &tfTypes.AwsAccount{}
				r.RemoteInfo.AwsAccount.AccountID = types.StringValue(resp.RemoteInfo.AwsAccount.AccountID)
			}
			if resp.RemoteInfo.AwsEc2Instance == nil {
				r.RemoteInfo.AwsEc2Instance = nil
			} else {
				r.RemoteInfo.AwsEc2Instance = &tfTypes.AwsEc2Instance{}
				r.RemoteInfo.AwsEc2Instance.AccountID = types.StringPointerValue(resp.RemoteInfo.AwsEc2Instance.AccountID)
				r.RemoteInfo.AwsEc2Instance.InstanceID = types.StringValue(resp.RemoteInfo.AwsEc2Instance.InstanceID)
				r.RemoteInfo.AwsEc2Instance.Region = types.StringValue(resp.RemoteInfo.AwsEc2Instance.Region)
			}
			if resp.RemoteInfo.AwsEksCluster == nil {
				r.RemoteInfo.AwsEksCluster = nil
			} else {
				r.RemoteInfo.AwsEksCluster = &tfTypes.AwsEksCluster{}
				r.RemoteInfo.AwsEksCluster.AccountID = types.StringPointerValue(resp.RemoteInfo.AwsEksCluster.AccountID)
				r.RemoteInfo.AwsEksCluster.Arn = types.StringValue(resp.RemoteInfo.AwsEksCluster.Arn)
			}
			if resp.RemoteInfo.AwsIamRole == nil {
				r.RemoteInfo.AwsIamRole = nil
			} else {
				r.RemoteInfo.AwsIamRole = &tfTypes.AwsEksCluster{}
				r.RemoteInfo.AwsIamRole.AccountID = types.StringPointerValue(resp.RemoteInfo.AwsIamRole.AccountID)
				r.RemoteInfo.AwsIamRole.Arn = types.StringValue(resp.RemoteInfo.AwsIamRole.Arn)
			}
			if resp.RemoteInfo.AwsPermissionSet == nil {
				r.RemoteInfo.AwsPermissionSet = nil
			} else {
				r.RemoteInfo.AwsPermissionSet = &tfTypes.AwsPermissionSet{}
				r.RemoteInfo.AwsPermissionSet.AccountID = types.StringValue(resp.RemoteInfo.AwsPermissionSet.AccountID)
				r.RemoteInfo.AwsPermissionSet.Arn = types.StringValue(resp.RemoteInfo.AwsPermissionSet.Arn)
			}
			if resp.RemoteInfo.AwsRdsInstance == nil {
				r.RemoteInfo.AwsRdsInstance = nil
			} else {
				r.RemoteInfo.AwsRdsInstance = &tfTypes.AwsRdsInstance{}
				r.RemoteInfo.AwsRdsInstance.AccountID = types.StringPointerValue(resp.RemoteInfo.AwsRdsInstance.AccountID)
				r.RemoteInfo.AwsRdsInstance.InstanceID = types.StringValue(resp.RemoteInfo.AwsRdsInstance.InstanceID)
				r.RemoteInfo.AwsRdsInstance.Region = types.StringValue(resp.RemoteInfo.AwsRdsInstance.Region)
				r.RemoteInfo.AwsRdsInstance.ResourceID = types.StringValue(resp.RemoteInfo.AwsRdsInstance.ResourceID)
			}
			if resp.RemoteInfo.GcpBigQueryDataset == nil {
				r.RemoteInfo.GcpBigQueryDataset = nil
			} else {
				r.RemoteInfo.GcpBigQueryDataset = &tfTypes.GcpBigQueryDataset{}
				r.RemoteInfo.GcpBigQueryDataset.DatasetID = types.StringValue(resp.RemoteInfo.GcpBigQueryDataset.DatasetID)
				r.RemoteInfo.GcpBigQueryDataset.ProjectID = types.StringValue(resp.RemoteInfo.GcpBigQueryDataset.ProjectID)
			}
			if resp.RemoteInfo.GcpBigQueryTable == nil {
				r.RemoteInfo.GcpBigQueryTable = nil
			} else {
				r.RemoteInfo.GcpBigQueryTable = &tfTypes.GcpBigQueryTable{}
				r.RemoteInfo.GcpBigQueryTable.DatasetID = types.StringValue(resp.RemoteInfo.GcpBigQueryTable.DatasetID)
				r.RemoteInfo.GcpBigQueryTable.ProjectID = types.StringValue(resp.RemoteInfo.GcpBigQueryTable.ProjectID)
				r.RemoteInfo.GcpBigQueryTable.TableID = types.StringValue(resp.RemoteInfo.GcpBigQueryTable.TableID)
			}
			if resp.RemoteInfo.GcpBucket == nil {
				r.RemoteInfo.GcpBucket = nil
			} else {
				r.RemoteInfo.GcpBucket = &tfTypes.GcpBucket{}
				r.RemoteInfo.GcpBucket.BucketID = types.StringValue(resp.RemoteInfo.GcpBucket.BucketID)
			}
			if resp.RemoteInfo.GcpComputeInstance == nil {
				r.RemoteInfo.GcpComputeInstance = nil
			} else {
				r.RemoteInfo.GcpComputeInstance = &tfTypes.GcpComputeInstance{}
				r.RemoteInfo.GcpComputeInstance.InstanceID = types.StringValue(resp.RemoteInfo.GcpComputeInstance.InstanceID)
				r.RemoteInfo.GcpComputeInstance.ProjectID = types.StringValue(resp.RemoteInfo.GcpComputeInstance.ProjectID)
				r.RemoteInfo.GcpComputeInstance.Zone = types.StringValue(resp.RemoteInfo.GcpComputeInstance.Zone)
			}
			if resp.RemoteInfo.GcpFolder == nil {
				r.RemoteInfo.GcpFolder = nil
			} else {
				r.RemoteInfo.GcpFolder = &tfTypes.GcpFolder{}
				r.RemoteInfo.GcpFolder.FolderID = types.StringValue(resp.RemoteInfo.GcpFolder.FolderID)
			}
			if resp.RemoteInfo.GcpGkeCluster == nil {
				r.RemoteInfo.GcpGkeCluster = nil
			} else {
				r.RemoteInfo.GcpGkeCluster = &tfTypes.GcpGkeCluster{}
				r.RemoteInfo.GcpGkeCluster.ClusterName = types.StringValue(resp.RemoteInfo.GcpGkeCluster.ClusterName)
			}
			if resp.RemoteInfo.GcpOrganization == nil {
				r.RemoteInfo.GcpOrganization = nil
			} else {
				r.RemoteInfo.GcpOrganization = &tfTypes.GcpOrganization{}
				r.RemoteInfo.GcpOrganization.OrganizationID = types.StringValue(resp.RemoteInfo.GcpOrganization.OrganizationID)
			}
			if resp.RemoteInfo.GcpProject == nil {
				r.RemoteInfo.GcpProject = nil
			} else {
				r.RemoteInfo.GcpProject = &tfTypes.GcpProject{}
				r.RemoteInfo.GcpProject.ProjectID = types.StringValue(resp.RemoteInfo.GcpProject.ProjectID)
			}
			if resp.RemoteInfo.GcpSQLInstance == nil {
				r.RemoteInfo.GcpSQLInstance = nil
			} else {
				r.RemoteInfo.GcpSQLInstance = &tfTypes.GcpSQLInstance{}
				r.RemoteInfo.GcpSQLInstance.InstanceID = types.StringValue(resp.RemoteInfo.GcpSQLInstance.InstanceID)
				r.RemoteInfo.GcpSQLInstance.ProjectID = types.StringValue(resp.RemoteInfo.GcpSQLInstance.ProjectID)
			}
			if resp.RemoteInfo.GithubRepo == nil {
				r.RemoteInfo.GithubRepo = nil
			} else {
				r.RemoteInfo.GithubRepo = &tfTypes.GithubRepo{}
				r.RemoteInfo.GithubRepo.RepoName = types.StringValue(resp.RemoteInfo.GithubRepo.RepoName)
			}
			if resp.RemoteInfo.GitlabProject == nil {
				r.RemoteInfo.GitlabProject = nil
			} else {
				r.RemoteInfo.GitlabProject = &tfTypes.GcpProject{}
				r.RemoteInfo.GitlabProject.ProjectID = types.StringValue(resp.RemoteInfo.GitlabProject.ProjectID)
			}
			if resp.RemoteInfo.OktaApp == nil {
				r.RemoteInfo.OktaApp = nil
			} else {
				r.RemoteInfo.OktaApp = &tfTypes.OktaApp{}
				r.RemoteInfo.OktaApp.AppID = types.StringValue(resp.RemoteInfo.OktaApp.AppID)
			}
			if resp.RemoteInfo.OktaCustomRole == nil {
				r.RemoteInfo.OktaCustomRole = nil
			} else {
				r.RemoteInfo.OktaCustomRole = &tfTypes.OktaCustomRole{}
				r.RemoteInfo.OktaCustomRole.RoleID = types.StringValue(resp.RemoteInfo.OktaCustomRole.RoleID)
			}
			if resp.RemoteInfo.OktaStandardRole == nil {
				r.RemoteInfo.OktaStandardRole = nil
			} else {
				r.RemoteInfo.OktaStandardRole = &tfTypes.OktaStandardRole{}
				r.RemoteInfo.OktaStandardRole.RoleType = types.StringValue(resp.RemoteInfo.OktaStandardRole.RoleType)
			}
			if resp.RemoteInfo.PagerdutyRole == nil {
				r.RemoteInfo.PagerdutyRole = nil
			} else {
				r.RemoteInfo.PagerdutyRole = &tfTypes.PagerdutyRole{}
				r.RemoteInfo.PagerdutyRole.RoleName = types.StringValue(resp.RemoteInfo.PagerdutyRole.RoleName)
			}
			if resp.RemoteInfo.SalesforcePermissionSet == nil {
				r.RemoteInfo.SalesforcePermissionSet = nil
			} else {
				r.RemoteInfo.SalesforcePermissionSet = &tfTypes.SalesforcePermissionSet{}
				r.RemoteInfo.SalesforcePermissionSet.PermissionSetID = types.StringValue(resp.RemoteInfo.SalesforcePermissionSet.PermissionSetID)
			}
			if resp.RemoteInfo.SalesforceProfile == nil {
				r.RemoteInfo.SalesforceProfile = nil
			} else {
				r.RemoteInfo.SalesforceProfile = &tfTypes.SalesforceProfile{}
				r.RemoteInfo.SalesforceProfile.ProfileID = types.StringValue(resp.RemoteInfo.SalesforceProfile.ProfileID)
				r.RemoteInfo.SalesforceProfile.UserLicenseID = types.StringValue(resp.RemoteInfo.SalesforceProfile.UserLicenseID)
			}
			if resp.RemoteInfo.SalesforceRole == nil {
				r.RemoteInfo.SalesforceRole = nil
			} else {
				r.RemoteInfo.SalesforceRole = &tfTypes.OktaCustomRole{}
				r.RemoteInfo.SalesforceRole.RoleID = types.StringValue(resp.RemoteInfo.SalesforceRole.RoleID)
			}
			if resp.RemoteInfo.TeleportRole == nil {
				r.RemoteInfo.TeleportRole = nil
			} else {
				r.RemoteInfo.TeleportRole = &tfTypes.PagerdutyRole{}
				r.RemoteInfo.TeleportRole.RoleName = types.StringValue(resp.RemoteInfo.TeleportRole.RoleName)
			}
		}
		if len(r.RequestConfigurations) > len(resp.RequestConfigurations) {
			r.RequestConfigurations = r.RequestConfigurations[:len(resp.RequestConfigurations)]
		}
		for requestConfigurationsCount, requestConfigurationsItem := range resp.RequestConfigurations {
			var requestConfigurations1 tfTypes.RequestConfiguration
			requestConfigurations1.AllowRequests = types.BoolValue(requestConfigurationsItem.AllowRequests)
			requestConfigurations1.AutoApproval = types.BoolValue(requestConfigurationsItem.AutoApproval)
			if requestConfigurationsItem.Condition == nil {
				requestConfigurations1.Condition = nil
			} else {
				requestConfigurations1.Condition = &tfTypes.Condition{}
				requestConfigurations1.Condition.GroupIds = []types.String{}
				for _, v := range requestConfigurationsItem.Condition.GroupIds {
					requestConfigurations1.Condition.GroupIds = append(requestConfigurations1.Condition.GroupIds, types.StringValue(v))
				}
				requestConfigurations1.Condition.RoleRemoteIds = []types.String{}
				for _, v := range requestConfigurationsItem.Condition.RoleRemoteIds {
					requestConfigurations1.Condition.RoleRemoteIds = append(requestConfigurations1.Condition.RoleRemoteIds, types.StringValue(v))
				}
			}
			requestConfigurations1.MaxDuration = types.Int64PointerValue(requestConfigurationsItem.MaxDuration)
			requestConfigurations1.Priority = types.Int64Value(requestConfigurationsItem.Priority)
			requestConfigurations1.RecommendedDuration = types.Int64PointerValue(requestConfigurationsItem.RecommendedDuration)
			requestConfigurations1.RequestTemplateID = types.StringPointerValue(requestConfigurationsItem.RequestTemplateID)
			requestConfigurations1.RequireMfaToRequest = types.BoolValue(requestConfigurationsItem.RequireMfaToRequest)
			requestConfigurations1.RequireSupportTicket = types.BoolValue(requestConfigurationsItem.RequireSupportTicket)
			for reviewerStagesCount, reviewerStagesItem := range requestConfigurationsItem.ReviewerStages {
				var reviewerStages1 tfTypes.ReviewerStage
				if reviewerStagesItem.Operator != nil {
					reviewerStages1.Operator = types.StringValue(string(*reviewerStagesItem.Operator))
				} else {
					reviewerStages1.Operator = types.StringNull()
				}
				reviewerStages1.OwnerIds = []types.String{}
				for _, v := range reviewerStagesItem.OwnerIds {
					reviewerStages1.OwnerIds = append(reviewerStages1.OwnerIds, types.StringValue(v))
				}
				reviewerStages1.RequireAdminApproval = types.BoolPointerValue(reviewerStagesItem.RequireAdminApproval)
				reviewerStages1.RequireManagerApproval = types.BoolValue(reviewerStagesItem.RequireManagerApproval)
				if reviewerStagesCount+1 > len(requestConfigurations1.ReviewerStages) {
					requestConfigurations1.ReviewerStages = append(requestConfigurations1.ReviewerStages, reviewerStages1)
				} else {
					requestConfigurations1.ReviewerStages[reviewerStagesCount].Operator = reviewerStages1.Operator
					requestConfigurations1.ReviewerStages[reviewerStagesCount].OwnerIds = reviewerStages1.OwnerIds
					requestConfigurations1.ReviewerStages[reviewerStagesCount].RequireAdminApproval = reviewerStages1.RequireAdminApproval
					requestConfigurations1.ReviewerStages[reviewerStagesCount].RequireManagerApproval = reviewerStages1.RequireManagerApproval
				}
			}
			if requestConfigurationsCount+1 > len(r.RequestConfigurations) {
				r.RequestConfigurations = append(r.RequestConfigurations, requestConfigurations1)
			} else {
				r.RequestConfigurations[requestConfigurationsCount].AllowRequests = requestConfigurations1.AllowRequests
				r.RequestConfigurations[requestConfigurationsCount].AutoApproval = requestConfigurations1.AutoApproval
				r.RequestConfigurations[requestConfigurationsCount].Condition = requestConfigurations1.Condition
				r.RequestConfigurations[requestConfigurationsCount].MaxDuration = requestConfigurations1.MaxDuration
				r.RequestConfigurations[requestConfigurationsCount].Priority = requestConfigurations1.Priority
				r.RequestConfigurations[requestConfigurationsCount].RecommendedDuration = requestConfigurations1.RecommendedDuration
				r.RequestConfigurations[requestConfigurationsCount].RequestTemplateID = requestConfigurations1.RequestTemplateID
				r.RequestConfigurations[requestConfigurationsCount].RequireMfaToRequest = requestConfigurations1.RequireMfaToRequest
				r.RequestConfigurations[requestConfigurationsCount].RequireSupportTicket = requestConfigurations1.RequireSupportTicket
				r.RequestConfigurations[requestConfigurationsCount].ReviewerStages = requestConfigurations1.ReviewerStages
			}
		}
		r.RequireMfaToApprove = types.BoolPointerValue(resp.RequireMfaToApprove)
		r.RequireMfaToConnect = types.BoolPointerValue(resp.RequireMfaToConnect)
		if resp.ResourceType != nil {
			r.ResourceType = types.StringValue(string(*resp.ResourceType))
		} else {
			r.ResourceType = types.StringNull()
		}
	}
}

func (r *ResourceResourceModel) ToSharedUpdateResourceInfo() *shared.UpdateResourceInfo {
	adminOwnerID := new(string)
	if !r.AdminOwnerID.IsUnknown() && !r.AdminOwnerID.IsNull() {
		*adminOwnerID = r.AdminOwnerID.ValueString()
	} else {
		adminOwnerID = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	var requestConfigurations []shared.RequestConfiguration = []shared.RequestConfiguration{}
	for _, requestConfigurationsItem := range r.RequestConfigurations {
		allowRequests := requestConfigurationsItem.AllowRequests.ValueBool()
		autoApproval := requestConfigurationsItem.AutoApproval.ValueBool()
		var condition *shared.Condition
		if requestConfigurationsItem.Condition != nil {
			var groupIds []string = []string{}
			for _, groupIdsItem := range requestConfigurationsItem.Condition.GroupIds {
				groupIds = append(groupIds, groupIdsItem.ValueString())
			}
			var roleRemoteIds []string = []string{}
			for _, roleRemoteIdsItem := range requestConfigurationsItem.Condition.RoleRemoteIds {
				roleRemoteIds = append(roleRemoteIds, roleRemoteIdsItem.ValueString())
			}
			condition = &shared.Condition{
				GroupIds:      groupIds,
				RoleRemoteIds: roleRemoteIds,
			}
		}
		maxDuration := new(int64)
		if !requestConfigurationsItem.MaxDuration.IsUnknown() && !requestConfigurationsItem.MaxDuration.IsNull() {
			*maxDuration = requestConfigurationsItem.MaxDuration.ValueInt64()
		} else {
			maxDuration = nil
		}
		priority := requestConfigurationsItem.Priority.ValueInt64()
		recommendedDuration := new(int64)
		if !requestConfigurationsItem.RecommendedDuration.IsUnknown() && !requestConfigurationsItem.RecommendedDuration.IsNull() {
			*recommendedDuration = requestConfigurationsItem.RecommendedDuration.ValueInt64()
		} else {
			recommendedDuration = nil
		}
		requestTemplateID := new(string)
		if !requestConfigurationsItem.RequestTemplateID.IsUnknown() && !requestConfigurationsItem.RequestTemplateID.IsNull() {
			*requestTemplateID = requestConfigurationsItem.RequestTemplateID.ValueString()
		} else {
			requestTemplateID = nil
		}
		requireMfaToRequest := requestConfigurationsItem.RequireMfaToRequest.ValueBool()
		requireSupportTicket := requestConfigurationsItem.RequireSupportTicket.ValueBool()
		var reviewerStages []shared.ReviewerStage = []shared.ReviewerStage{}
		for _, reviewerStagesItem := range requestConfigurationsItem.ReviewerStages {
			operator := new(shared.Operator)
			if !reviewerStagesItem.Operator.IsUnknown() && !reviewerStagesItem.Operator.IsNull() {
				*operator = shared.Operator(reviewerStagesItem.Operator.ValueString())
			} else {
				operator = nil
			}
			var ownerIds []string = []string{}
			for _, ownerIdsItem := range reviewerStagesItem.OwnerIds {
				ownerIds = append(ownerIds, ownerIdsItem.ValueString())
			}
			requireAdminApproval := new(bool)
			if !reviewerStagesItem.RequireAdminApproval.IsUnknown() && !reviewerStagesItem.RequireAdminApproval.IsNull() {
				*requireAdminApproval = reviewerStagesItem.RequireAdminApproval.ValueBool()
			} else {
				requireAdminApproval = nil
			}
			requireManagerApproval := reviewerStagesItem.RequireManagerApproval.ValueBool()
			reviewerStages = append(reviewerStages, shared.ReviewerStage{
				Operator:               operator,
				OwnerIds:               ownerIds,
				RequireAdminApproval:   requireAdminApproval,
				RequireManagerApproval: requireManagerApproval,
			})
		}
		requestConfigurations = append(requestConfigurations, shared.RequestConfiguration{
			AllowRequests:        allowRequests,
			AutoApproval:         autoApproval,
			Condition:            condition,
			MaxDuration:          maxDuration,
			Priority:             priority,
			RecommendedDuration:  recommendedDuration,
			RequestTemplateID:    requestTemplateID,
			RequireMfaToRequest:  requireMfaToRequest,
			RequireSupportTicket: requireSupportTicket,
			ReviewerStages:       reviewerStages,
		})
	}
	requireMfaToApprove := new(bool)
	if !r.RequireMfaToApprove.IsUnknown() && !r.RequireMfaToApprove.IsNull() {
		*requireMfaToApprove = r.RequireMfaToApprove.ValueBool()
	} else {
		requireMfaToApprove = nil
	}
	requireMfaToConnect := new(bool)
	if !r.RequireMfaToConnect.IsUnknown() && !r.RequireMfaToConnect.IsNull() {
		*requireMfaToConnect = r.RequireMfaToConnect.ValueBool()
	} else {
		requireMfaToConnect = nil
	}
	out := shared.UpdateResourceInfo{
		AdminOwnerID:          adminOwnerID,
		Description:           description,
		ID:                    id,
		Name:                  name,
		RequestConfigurations: requestConfigurations,
		RequireMfaToApprove:   requireMfaToApprove,
		RequireMfaToConnect:   requireMfaToConnect,
	}
	return &out
}

func (r *ResourceResourceModel) RefreshFromSharedUpdateResourceInfo(resp shared.UpdateResourceInfo) {
	r.AdminOwnerID = types.StringPointerValue(resp.AdminOwnerID)
	r.Description = types.StringPointerValue(resp.Description)
	r.ID = types.StringPointerValue(resp.ID)
	r.Name = types.StringPointerValue(resp.Name)
	if len(r.RequestConfigurations) > len(resp.RequestConfigurations) {
		r.RequestConfigurations = r.RequestConfigurations[:len(resp.RequestConfigurations)]
	}
	for requestConfigurationsCount, requestConfigurationsItem := range resp.RequestConfigurations {
		var requestConfigurations1 tfTypes.RequestConfiguration
		requestConfigurations1.AllowRequests = types.BoolValue(requestConfigurationsItem.AllowRequests)
		requestConfigurations1.AutoApproval = types.BoolValue(requestConfigurationsItem.AutoApproval)
		if requestConfigurationsItem.Condition == nil {
			requestConfigurations1.Condition = nil
		} else {
			requestConfigurations1.Condition = &tfTypes.Condition{}
			requestConfigurations1.Condition.GroupIds = []types.String{}
			for _, v := range requestConfigurationsItem.Condition.GroupIds {
				requestConfigurations1.Condition.GroupIds = append(requestConfigurations1.Condition.GroupIds, types.StringValue(v))
			}
			requestConfigurations1.Condition.RoleRemoteIds = []types.String{}
			for _, v := range requestConfigurationsItem.Condition.RoleRemoteIds {
				requestConfigurations1.Condition.RoleRemoteIds = append(requestConfigurations1.Condition.RoleRemoteIds, types.StringValue(v))
			}
		}
		requestConfigurations1.MaxDuration = types.Int64PointerValue(requestConfigurationsItem.MaxDuration)
		requestConfigurations1.Priority = types.Int64Value(requestConfigurationsItem.Priority)
		requestConfigurations1.RecommendedDuration = types.Int64PointerValue(requestConfigurationsItem.RecommendedDuration)
		requestConfigurations1.RequestTemplateID = types.StringPointerValue(requestConfigurationsItem.RequestTemplateID)
		requestConfigurations1.RequireMfaToRequest = types.BoolValue(requestConfigurationsItem.RequireMfaToRequest)
		requestConfigurations1.RequireSupportTicket = types.BoolValue(requestConfigurationsItem.RequireSupportTicket)
		for reviewerStagesCount, reviewerStagesItem := range requestConfigurationsItem.ReviewerStages {
			var reviewerStages1 tfTypes.ReviewerStage
			if reviewerStagesItem.Operator != nil {
				reviewerStages1.Operator = types.StringValue(string(*reviewerStagesItem.Operator))
			} else {
				reviewerStages1.Operator = types.StringNull()
			}
			reviewerStages1.OwnerIds = []types.String{}
			for _, v := range reviewerStagesItem.OwnerIds {
				reviewerStages1.OwnerIds = append(reviewerStages1.OwnerIds, types.StringValue(v))
			}
			reviewerStages1.RequireAdminApproval = types.BoolPointerValue(reviewerStagesItem.RequireAdminApproval)
			reviewerStages1.RequireManagerApproval = types.BoolValue(reviewerStagesItem.RequireManagerApproval)
			if reviewerStagesCount+1 > len(requestConfigurations1.ReviewerStages) {
				requestConfigurations1.ReviewerStages = append(requestConfigurations1.ReviewerStages, reviewerStages1)
			} else {
				requestConfigurations1.ReviewerStages[reviewerStagesCount].Operator = reviewerStages1.Operator
				requestConfigurations1.ReviewerStages[reviewerStagesCount].OwnerIds = reviewerStages1.OwnerIds
				requestConfigurations1.ReviewerStages[reviewerStagesCount].RequireAdminApproval = reviewerStages1.RequireAdminApproval
				requestConfigurations1.ReviewerStages[reviewerStagesCount].RequireManagerApproval = reviewerStages1.RequireManagerApproval
			}
		}
		if requestConfigurationsCount+1 > len(r.RequestConfigurations) {
			r.RequestConfigurations = append(r.RequestConfigurations, requestConfigurations1)
		} else {
			r.RequestConfigurations[requestConfigurationsCount].AllowRequests = requestConfigurations1.AllowRequests
			r.RequestConfigurations[requestConfigurationsCount].AutoApproval = requestConfigurations1.AutoApproval
			r.RequestConfigurations[requestConfigurationsCount].Condition = requestConfigurations1.Condition
			r.RequestConfigurations[requestConfigurationsCount].MaxDuration = requestConfigurations1.MaxDuration
			r.RequestConfigurations[requestConfigurationsCount].Priority = requestConfigurations1.Priority
			r.RequestConfigurations[requestConfigurationsCount].RecommendedDuration = requestConfigurations1.RecommendedDuration
			r.RequestConfigurations[requestConfigurationsCount].RequestTemplateID = requestConfigurations1.RequestTemplateID
			r.RequestConfigurations[requestConfigurationsCount].RequireMfaToRequest = requestConfigurations1.RequireMfaToRequest
			r.RequestConfigurations[requestConfigurationsCount].RequireSupportTicket = requestConfigurations1.RequireSupportTicket
			r.RequestConfigurations[requestConfigurationsCount].ReviewerStages = requestConfigurations1.ReviewerStages
		}
	}
	r.RequireMfaToApprove = types.BoolPointerValue(resp.RequireMfaToApprove)
	r.RequireMfaToConnect = types.BoolPointerValue(resp.RequireMfaToConnect)
}

func (r *ResourceResourceModel) ToSharedVisibilityInfo() *shared.VisibilityInfo {
	visibility := shared.VisibilityTypeEnum(r.Visibility.ValueString())
	var visibilityGroupIds []string = []string{}
	for _, visibilityGroupIdsItem := range r.VisibilityGroupIds {
		visibilityGroupIds = append(visibilityGroupIds, visibilityGroupIdsItem.ValueString())
	}
	out := shared.VisibilityInfo{
		Visibility:         visibility,
		VisibilityGroupIds: visibilityGroupIds,
	}
	return &out
}
