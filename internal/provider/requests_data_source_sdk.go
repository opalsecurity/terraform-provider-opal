// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/typeconvert"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/shared"
)

func (r *RequestsDataSourceModel) RefreshFromSharedRequestList(ctx context.Context, resp *shared.RequestList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Cursor = types.StringPointerValue(resp.Cursor)
		r.Requests = []tfTypes.Request{}

		for _, requestsItem := range resp.Requests {
			var requests tfTypes.Request

			requests.CreatedAt = types.StringValue(typeconvert.TimeToString(requestsItem.CreatedAt))
			requests.CustomFieldsResponses = []tfTypes.RequestCustomFieldResponse{}

			for _, customFieldsResponsesItem := range requestsItem.CustomFieldsResponses {
				var customFieldsResponses tfTypes.RequestCustomFieldResponse

				customFieldsResponses.FieldName = types.StringValue(customFieldsResponsesItem.FieldName)
				customFieldsResponses.FieldType = types.StringValue(string(customFieldsResponsesItem.FieldType))
				if customFieldsResponsesItem.FieldValue.Str != nil {
					customFieldsResponses.FieldValue.Str = types.StringPointerValue(customFieldsResponsesItem.FieldValue.Str)
				}
				if customFieldsResponsesItem.FieldValue.Boolean != nil {
					customFieldsResponses.FieldValue.Boolean = types.BoolPointerValue(customFieldsResponsesItem.FieldValue.Boolean)
				}

				requests.CustomFieldsResponses = append(requests.CustomFieldsResponses, customFieldsResponses)
			}
			requests.DurationMinutes = types.Int64PointerValue(requestsItem.DurationMinutes)
			requests.ID = types.StringValue(requestsItem.ID)
			requests.Reason = types.StringValue(requestsItem.Reason)
			requests.RequestedItemsList = []tfTypes.RequestedItem{}

			for _, requestedItemsListItem := range requestsItem.RequestedItemsList {
				var requestedItemsList tfTypes.RequestedItem

				requestedItemsList.AccessLevelName = types.StringPointerValue(requestedItemsListItem.AccessLevelName)
				requestedItemsList.AccessLevelRemoteID = types.StringPointerValue(requestedItemsListItem.AccessLevelRemoteID)
				requestedItemsList.GroupID = types.StringPointerValue(requestedItemsListItem.GroupID)
				requestedItemsList.Name = types.StringPointerValue(requestedItemsListItem.Name)
				requestedItemsList.RemoteID = types.StringPointerValue(requestedItemsListItem.RemoteID)
				requestedItemsList.RemoteName = types.StringPointerValue(requestedItemsListItem.RemoteName)
				requestedItemsList.ResourceID = types.StringPointerValue(requestedItemsListItem.ResourceID)

				requests.RequestedItemsList = append(requests.RequestedItemsList, requestedItemsList)
			}
			requests.RequesterID = types.StringValue(requestsItem.RequesterID)
			if requestsItem.Stages == nil {
				requests.Stages = nil
			} else {
				requests.Stages = &tfTypes.RequestItemStages{}
				requests.Stages.RequestedItemName = types.StringValue(requestsItem.Stages.RequestedItemName)
				requests.Stages.RequestedRoleName = types.StringPointerValue(requestsItem.Stages.RequestedRoleName)
				requests.Stages.Stages = []tfTypes.RequestStage{}

				for _, stagesItem := range requestsItem.Stages.Stages {
					var stages tfTypes.RequestStage

					stages.Operator = types.StringValue(string(stagesItem.Operator))
					stages.Reviewers = []tfTypes.RequestReviewer{}

					for _, reviewersItem := range stagesItem.Reviewers {
						var reviewers tfTypes.RequestReviewer

						reviewers.ID = types.StringValue(reviewersItem.ID)
						reviewers.Status = types.StringValue(string(reviewersItem.Status))

						stages.Reviewers = append(stages.Reviewers, reviewers)
					}
					stages.Stage = types.Int64Value(stagesItem.Stage)

					requests.Stages.Stages = append(requests.Stages.Stages, stages)
				}
			}
			requests.Status = types.StringValue(string(requestsItem.Status))
			requests.TargetGroupID = types.StringPointerValue(requestsItem.TargetGroupID)
			requests.TargetUserID = types.StringPointerValue(requestsItem.TargetUserID)
			requests.UpdatedAt = types.StringValue(typeconvert.TimeToString(requestsItem.UpdatedAt))

			r.Requests = append(r.Requests, requests)
		}
	}

	return diags
}

func (r *RequestsDataSourceModel) ToOperationsGetRequestsRequest(ctx context.Context) (*operations.GetRequestsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	cursor := new(string)
	if !r.Cursor.IsUnknown() && !r.Cursor.IsNull() {
		*cursor = r.Cursor.ValueString()
	} else {
		cursor = nil
	}
	endDateFilter := new(string)
	if !r.EndDateFilter.IsUnknown() && !r.EndDateFilter.IsNull() {
		*endDateFilter = r.EndDateFilter.ValueString()
	} else {
		endDateFilter = nil
	}
	pageSize := new(int64)
	if !r.PageSize.IsUnknown() && !r.PageSize.IsNull() {
		*pageSize = r.PageSize.ValueInt64()
	} else {
		pageSize = nil
	}
	requesterID := new(string)
	if !r.RequesterID.IsUnknown() && !r.RequesterID.IsNull() {
		*requesterID = r.RequesterID.ValueString()
	} else {
		requesterID = nil
	}
	showPendingOnly := new(bool)
	if !r.ShowPendingOnly.IsUnknown() && !r.ShowPendingOnly.IsNull() {
		*showPendingOnly = r.ShowPendingOnly.ValueBool()
	} else {
		showPendingOnly = nil
	}
	startDateFilter := new(string)
	if !r.StartDateFilter.IsUnknown() && !r.StartDateFilter.IsNull() {
		*startDateFilter = r.StartDateFilter.ValueString()
	} else {
		startDateFilter = nil
	}
	targetUserID := new(string)
	if !r.TargetUserID.IsUnknown() && !r.TargetUserID.IsNull() {
		*targetUserID = r.TargetUserID.ValueString()
	} else {
		targetUserID = nil
	}
	out := operations.GetRequestsRequest{
		Cursor:          cursor,
		EndDateFilter:   endDateFilter,
		PageSize:        pageSize,
		RequesterID:     requesterID,
		ShowPendingOnly: showPendingOnly,
		StartDateFilter: startDateFilter,
		TargetUserID:    targetUserID,
	}

	return &out, diags
}
