// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/shared"
)

func (r *ScopedRolePermissionListResourceModel) RefreshFromSharedScopedRolePermissionList(ctx context.Context, resp *shared.ScopedRolePermissionList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Permissions = []tfTypes.ScopedRolePermission{}

		for _, permissionsItem := range resp.Permissions {
			var permissions tfTypes.ScopedRolePermission

			permissions.AllowAll = types.BoolValue(permissionsItem.AllowAll)
			permissions.PermissionName = types.StringValue(string(permissionsItem.PermissionName))
			permissions.TargetIds = make([]types.String, 0, len(permissionsItem.TargetIds))
			for _, v := range permissionsItem.TargetIds {
				permissions.TargetIds = append(permissions.TargetIds, types.StringValue(v))
			}
			permissions.TargetType = types.StringValue(string(permissionsItem.TargetType))

			r.Permissions = append(r.Permissions, permissions)
		}
	}

	return diags
}

func (r *ScopedRolePermissionListResourceModel) ToOperationsGetResourceScopedRolePermissionsRequest(ctx context.Context) (*operations.GetResourceScopedRolePermissionsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var resourceID string
	resourceID = r.ResourceID.ValueString()

	out := operations.GetResourceScopedRolePermissionsRequest{
		ResourceID: resourceID,
	}

	return &out, diags
}

func (r *ScopedRolePermissionListResourceModel) ToOperationsSetResourceScopedRolePermissionsRequest(ctx context.Context) (*operations.SetResourceScopedRolePermissionsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	scopedRolePermissionList, scopedRolePermissionListDiags := r.ToSharedScopedRolePermissionList(ctx)
	diags.Append(scopedRolePermissionListDiags...)

	if diags.HasError() {
		return nil, diags
	}

	var resourceID string
	resourceID = r.ResourceID.ValueString()

	out := operations.SetResourceScopedRolePermissionsRequest{
		ScopedRolePermissionList: *scopedRolePermissionList,
		ResourceID:               resourceID,
	}

	return &out, diags
}

func (r *ScopedRolePermissionListResourceModel) ToSharedScopedRolePermissionList(ctx context.Context) (*shared.ScopedRolePermissionList, diag.Diagnostics) {
	var diags diag.Diagnostics

	permissions := make([]shared.ScopedRolePermission, 0, len(r.Permissions))
	for _, permissionsItem := range r.Permissions {
		var allowAll bool
		allowAll = permissionsItem.AllowAll.ValueBool()

		permissionName := shared.RolePermissionNameEnum(permissionsItem.PermissionName.ValueString())
		targetIds := make([]string, 0, len(permissionsItem.TargetIds))
		for _, targetIdsItem := range permissionsItem.TargetIds {
			targetIds = append(targetIds, targetIdsItem.ValueString())
		}
		targetType := shared.RolePermissionTargetTypeEnum(permissionsItem.TargetType.ValueString())
		permissions = append(permissions, shared.ScopedRolePermission{
			AllowAll:       allowAll,
			PermissionName: permissionName,
			TargetIds:      targetIds,
			TargetType:     targetType,
		})
	}
	out := shared.ScopedRolePermissionList{
		Permissions: permissions,
	}

	return &out, diags
}
