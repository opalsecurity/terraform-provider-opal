// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/shared"
)

func (r *UsersDataSourceModel) ToOperationsGetUsersRequest(ctx context.Context) (*operations.GetUsersRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	cursor := new(string)
	if !r.Cursor.IsUnknown() && !r.Cursor.IsNull() {
		*cursor = r.Cursor.ValueString()
	} else {
		cursor = nil
	}
	pageSize := new(int64)
	if !r.PageSize.IsUnknown() && !r.PageSize.IsNull() {
		*pageSize = r.PageSize.ValueInt64()
	} else {
		pageSize = nil
	}
	out := operations.GetUsersRequest{
		Cursor:   cursor,
		PageSize: pageSize,
	}

	return &out, diags
}

func (r *UsersDataSourceModel) RefreshFromSharedPaginatedUsersList(ctx context.Context, resp *shared.PaginatedUsersList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Next = types.StringPointerValue(resp.Next)
		r.Previous = types.StringPointerValue(resp.Previous)
		r.Results = []tfTypes.User{}
		if len(r.Results) > len(resp.Results) {
			r.Results = r.Results[:len(resp.Results)]
		}
		for resultsCount, resultsItem := range resp.Results {
			var results tfTypes.User
			results.Email = types.StringValue(resultsItem.Email)
			results.FirstName = types.StringValue(resultsItem.FirstName)
			if resultsItem.HrIdpStatus != nil {
				results.HrIdpStatus = types.StringValue(string(*resultsItem.HrIdpStatus))
			} else {
				results.HrIdpStatus = types.StringNull()
			}
			results.ID = types.StringValue(resultsItem.ID)
			results.LastName = types.StringValue(resultsItem.LastName)
			results.Name = types.StringValue(resultsItem.Name)
			results.Position = types.StringValue(resultsItem.Position)
			if resultsCount+1 > len(r.Results) {
				r.Results = append(r.Results, results)
			} else {
				r.Results[resultsCount].Email = results.Email
				r.Results[resultsCount].FirstName = results.FirstName
				r.Results[resultsCount].HrIdpStatus = results.HrIdpStatus
				r.Results[resultsCount].ID = results.ID
				r.Results[resultsCount].LastName = results.LastName
				r.Results[resultsCount].Name = results.Name
				r.Results[resultsCount].Position = results.Position
			}
		}
	}

	return diags
}
