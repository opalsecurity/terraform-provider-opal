// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/shared"
)

func (r *OwnerResourceModel) RefreshFromSharedOwner(ctx context.Context, resp *shared.Owner) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AccessRequestEscalationPeriod = types.Int64PointerValue(resp.AccessRequestEscalationPeriod)
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringValue(resp.ID)
		r.Name = types.StringPointerValue(resp.Name)
		r.ReviewerMessageChannelID = types.StringPointerValue(resp.ReviewerMessageChannelID)
		r.SourceGroupID = types.StringPointerValue(resp.SourceGroupID)
	}

	return diags
}

func (r *OwnerResourceModel) RefreshFromSharedUpdateOwnerInfo(ctx context.Context, resp *shared.UpdateOwnerInfo) diag.Diagnostics {
	var diags diag.Diagnostics

	r.AccessRequestEscalationPeriod = types.Int64PointerValue(resp.AccessRequestEscalationPeriod)
	r.Description = types.StringPointerValue(resp.Description)
	r.ID = types.StringValue(resp.ID)
	r.Name = types.StringPointerValue(resp.Name)
	r.ReviewerMessageChannelID = types.StringPointerValue(resp.ReviewerMessageChannelID)
	r.SourceGroupID = types.StringPointerValue(resp.SourceGroupID)

	return diags
}

func (r *OwnerResourceModel) ToOperationsDeleteOwnerRequest(ctx context.Context) (*operations.DeleteOwnerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteOwnerRequest{
		ID: id,
	}

	return &out, diags
}

func (r *OwnerResourceModel) ToOperationsGetOwnerIDRequest(ctx context.Context) (*operations.GetOwnerIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetOwnerIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *OwnerResourceModel) ToOperationsUpdateOwnerUsersRequest(ctx context.Context) (*operations.UpdateOwnerUsersRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	userIDList, userIDListDiags := r.ToSharedUserIDList(ctx)
	diags.Append(userIDListDiags...)

	if diags.HasError() {
		return nil, diags
	}

	var id string
	id = r.ID.ValueString()

	out := operations.UpdateOwnerUsersRequest{
		UserIDList: *userIDList,
		ID:         id,
	}

	return &out, diags
}

func (r *OwnerResourceModel) ToSharedCreateOwnerInfo(ctx context.Context) (*shared.CreateOwnerInfo, diag.Diagnostics) {
	var diags diag.Diagnostics

	accessRequestEscalationPeriod := new(int64)
	if !r.AccessRequestEscalationPeriod.IsUnknown() && !r.AccessRequestEscalationPeriod.IsNull() {
		*accessRequestEscalationPeriod = r.AccessRequestEscalationPeriod.ValueInt64()
	} else {
		accessRequestEscalationPeriod = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var name string
	name = r.Name.ValueString()

	reviewerMessageChannelID := new(string)
	if !r.ReviewerMessageChannelID.IsUnknown() && !r.ReviewerMessageChannelID.IsNull() {
		*reviewerMessageChannelID = r.ReviewerMessageChannelID.ValueString()
	} else {
		reviewerMessageChannelID = nil
	}
	sourceGroupID := new(string)
	if !r.SourceGroupID.IsUnknown() && !r.SourceGroupID.IsNull() {
		*sourceGroupID = r.SourceGroupID.ValueString()
	} else {
		sourceGroupID = nil
	}
	userIds := make([]string, 0, len(r.UserIds))
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}
	out := shared.CreateOwnerInfo{
		AccessRequestEscalationPeriod: accessRequestEscalationPeriod,
		Description:                   description,
		Name:                          name,
		ReviewerMessageChannelID:      reviewerMessageChannelID,
		SourceGroupID:                 sourceGroupID,
		UserIds:                       userIds,
	}

	return &out, diags
}

func (r *OwnerResourceModel) ToSharedUpdateOwnerInfo(ctx context.Context) (*shared.UpdateOwnerInfo, diag.Diagnostics) {
	var diags diag.Diagnostics

	accessRequestEscalationPeriod := new(int64)
	if !r.AccessRequestEscalationPeriod.IsUnknown() && !r.AccessRequestEscalationPeriod.IsNull() {
		*accessRequestEscalationPeriod = r.AccessRequestEscalationPeriod.ValueInt64()
	} else {
		accessRequestEscalationPeriod = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var id string
	id = r.ID.ValueString()

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	reviewerMessageChannelID := new(string)
	if !r.ReviewerMessageChannelID.IsUnknown() && !r.ReviewerMessageChannelID.IsNull() {
		*reviewerMessageChannelID = r.ReviewerMessageChannelID.ValueString()
	} else {
		reviewerMessageChannelID = nil
	}
	sourceGroupID := new(string)
	if !r.SourceGroupID.IsUnknown() && !r.SourceGroupID.IsNull() {
		*sourceGroupID = r.SourceGroupID.ValueString()
	} else {
		sourceGroupID = nil
	}
	out := shared.UpdateOwnerInfo{
		AccessRequestEscalationPeriod: accessRequestEscalationPeriod,
		Description:                   description,
		ID:                            id,
		Name:                          name,
		ReviewerMessageChannelID:      reviewerMessageChannelID,
		SourceGroupID:                 sourceGroupID,
	}

	return &out, diags
}

func (r *OwnerResourceModel) ToSharedUpdateOwnerInfoList(ctx context.Context) (*shared.UpdateOwnerInfoList, diag.Diagnostics) {
	var diags diag.Diagnostics

	owners, ownersDiags := r.ToSharedUpdateOwnerInfo(ctx)
	diags.Append(ownersDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateOwnerInfoList{
		Owners: []shared.UpdateOwnerInfo{*owners},
	}

	return &out, diags
}

func (r *OwnerResourceModel) ToSharedUserIDList(ctx context.Context) (*shared.UserIDList, diag.Diagnostics) {
	var diags diag.Diagnostics

	userIds := make([]string, 0, len(r.UserIds))
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}
	out := shared.UserIDList{
		UserIds: userIds,
	}

	return &out, diags
}
