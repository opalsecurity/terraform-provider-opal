// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/typeconvert"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/shared"
)

func (r *GroupUsersDataSourceModel) RefreshFromSharedGroupUserList(ctx context.Context, resp *shared.GroupUserList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Results = []tfTypes.GroupUser{}

		for _, resultsItem := range resp.Results {
			var results tfTypes.GroupUser

			if resultsItem.AccessLevel == nil {
				results.AccessLevel = nil
			} else {
				results.AccessLevel = &tfTypes.ResourceAccessLevel{}
				results.AccessLevel.AccessLevelName = types.StringValue(resultsItem.AccessLevel.AccessLevelName)
				results.AccessLevel.AccessLevelRemoteID = types.StringValue(resultsItem.AccessLevel.AccessLevelRemoteID)
			}
			results.Email = types.StringValue(resultsItem.Email)
			results.ExpirationDate = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resultsItem.ExpirationDate))
			results.FullName = types.StringValue(resultsItem.FullName)
			results.GroupID = types.StringValue(resultsItem.GroupID)
			if resultsItem.PropagationStatus == nil {
				results.PropagationStatus = nil
			} else {
				results.PropagationStatus = &tfTypes.PropagationStatus{}
				results.PropagationStatus.Status = types.StringValue(string(resultsItem.PropagationStatus.Status))
			}
			results.UserID = types.StringValue(resultsItem.UserID)

			r.Results = append(r.Results, results)
		}
	}

	return diags
}

func (r *GroupUsersDataSourceModel) ToOperationsGetGroupUsersRequest(ctx context.Context) (*operations.GetGroupUsersRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.GetGroupUsersRequest{
		GroupID: groupID,
	}

	return &out, diags
}
