// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/typeconvert"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/shared"
)

func (r *ResourcesListDataSourceModel) RefreshFromSharedPaginatedResourcesList(ctx context.Context, resp *shared.PaginatedResourcesList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Next = types.StringPointerValue(resp.Next)
		r.Previous = types.StringPointerValue(resp.Previous)
		r.Results = []tfTypes.Resource{}

		for _, resultsItem := range resp.Results {
			var results tfTypes.Resource

			results.AdminOwnerID = types.StringPointerValue(resultsItem.AdminOwnerID)
			results.AncestorResourceIds = make([]types.String, 0, len(resultsItem.AncestorResourceIds))
			for _, v := range resultsItem.AncestorResourceIds {
				results.AncestorResourceIds = append(results.AncestorResourceIds, types.StringValue(v))
			}
			results.AppID = types.StringPointerValue(resultsItem.AppID)
			results.CustomRequestNotification = types.StringPointerValue(resultsItem.CustomRequestNotification)
			results.DescendantResourceIds = make([]types.String, 0, len(resultsItem.DescendantResourceIds))
			for _, v := range resultsItem.DescendantResourceIds {
				results.DescendantResourceIds = append(results.DescendantResourceIds, types.StringValue(v))
			}
			results.Description = types.StringPointerValue(resultsItem.Description)
			results.ExtensionsDurationInMinutes = types.Int64PointerValue(resultsItem.ExtensionsDurationInMinutes)
			results.ID = types.StringValue(resultsItem.ID)
			if resultsItem.LastSuccessfulSync == nil {
				results.LastSuccessfulSync = nil
			} else {
				results.LastSuccessfulSync = &tfTypes.SyncTask{}
				results.LastSuccessfulSync.CompletedAt = types.StringValue(typeconvert.TimeToString(resultsItem.LastSuccessfulSync.CompletedAt))
				results.LastSuccessfulSync.ID = types.StringValue(resultsItem.LastSuccessfulSync.ID)
			}
			results.Name = types.StringPointerValue(resultsItem.Name)
			results.ParentResourceID = types.StringPointerValue(resultsItem.ParentResourceID)
			if resultsItem.RemoteInfo == nil {
				results.RemoteInfo = nil
			} else {
				results.RemoteInfo = &tfTypes.ResourceRemoteInfo{}
				if resultsItem.RemoteInfo.AnthropicWorkspace == nil {
					results.RemoteInfo.AnthropicWorkspace = nil
				} else {
					results.RemoteInfo.AnthropicWorkspace = &tfTypes.AnthropicWorkspace{}
					results.RemoteInfo.AnthropicWorkspace.WorkspaceID = types.StringValue(resultsItem.RemoteInfo.AnthropicWorkspace.WorkspaceID)
				}
				if resultsItem.RemoteInfo.AwsAccount == nil {
					results.RemoteInfo.AwsAccount = nil
				} else {
					results.RemoteInfo.AwsAccount = &tfTypes.AwsAccount{}
					results.RemoteInfo.AwsAccount.AccountID = types.StringValue(resultsItem.RemoteInfo.AwsAccount.AccountID)
					results.RemoteInfo.AwsAccount.OrganizationalUnitID = types.StringPointerValue(resultsItem.RemoteInfo.AwsAccount.OrganizationalUnitID)
				}
				if resultsItem.RemoteInfo.AwsEc2Instance == nil {
					results.RemoteInfo.AwsEc2Instance = nil
				} else {
					results.RemoteInfo.AwsEc2Instance = &tfTypes.AwsEc2Instance{}
					results.RemoteInfo.AwsEc2Instance.AccountID = types.StringPointerValue(resultsItem.RemoteInfo.AwsEc2Instance.AccountID)
					results.RemoteInfo.AwsEc2Instance.InstanceID = types.StringValue(resultsItem.RemoteInfo.AwsEc2Instance.InstanceID)
					results.RemoteInfo.AwsEc2Instance.Region = types.StringValue(resultsItem.RemoteInfo.AwsEc2Instance.Region)
				}
				if resultsItem.RemoteInfo.AwsEksCluster == nil {
					results.RemoteInfo.AwsEksCluster = nil
				} else {
					results.RemoteInfo.AwsEksCluster = &tfTypes.AwsEksCluster{}
					results.RemoteInfo.AwsEksCluster.AccountID = types.StringPointerValue(resultsItem.RemoteInfo.AwsEksCluster.AccountID)
					results.RemoteInfo.AwsEksCluster.Arn = types.StringValue(resultsItem.RemoteInfo.AwsEksCluster.Arn)
				}
				if resultsItem.RemoteInfo.AwsIamRole == nil {
					results.RemoteInfo.AwsIamRole = nil
				} else {
					results.RemoteInfo.AwsIamRole = &tfTypes.AwsEksCluster{}
					results.RemoteInfo.AwsIamRole.AccountID = types.StringPointerValue(resultsItem.RemoteInfo.AwsIamRole.AccountID)
					results.RemoteInfo.AwsIamRole.Arn = types.StringValue(resultsItem.RemoteInfo.AwsIamRole.Arn)
				}
				if resultsItem.RemoteInfo.AwsOrganizationalUnit == nil {
					results.RemoteInfo.AwsOrganizationalUnit = nil
				} else {
					results.RemoteInfo.AwsOrganizationalUnit = &tfTypes.AwsOrganizationalUnit{}
					results.RemoteInfo.AwsOrganizationalUnit.OrganizationalUnitID = types.StringValue(resultsItem.RemoteInfo.AwsOrganizationalUnit.OrganizationalUnitID)
					results.RemoteInfo.AwsOrganizationalUnit.ParentID = types.StringPointerValue(resultsItem.RemoteInfo.AwsOrganizationalUnit.ParentID)
				}
				if resultsItem.RemoteInfo.AwsPermissionSet == nil {
					results.RemoteInfo.AwsPermissionSet = nil
				} else {
					results.RemoteInfo.AwsPermissionSet = &tfTypes.AwsPermissionSet{}
					results.RemoteInfo.AwsPermissionSet.AccountID = types.StringValue(resultsItem.RemoteInfo.AwsPermissionSet.AccountID)
					results.RemoteInfo.AwsPermissionSet.Arn = types.StringValue(resultsItem.RemoteInfo.AwsPermissionSet.Arn)
				}
				if resultsItem.RemoteInfo.AwsRdsInstance == nil {
					results.RemoteInfo.AwsRdsInstance = nil
				} else {
					results.RemoteInfo.AwsRdsInstance = &tfTypes.AwsRdsInstance{}
					results.RemoteInfo.AwsRdsInstance.AccountID = types.StringPointerValue(resultsItem.RemoteInfo.AwsRdsInstance.AccountID)
					results.RemoteInfo.AwsRdsInstance.InstanceID = types.StringValue(resultsItem.RemoteInfo.AwsRdsInstance.InstanceID)
					results.RemoteInfo.AwsRdsInstance.Region = types.StringValue(resultsItem.RemoteInfo.AwsRdsInstance.Region)
					results.RemoteInfo.AwsRdsInstance.ResourceID = types.StringValue(resultsItem.RemoteInfo.AwsRdsInstance.ResourceID)
				}
				if resultsItem.RemoteInfo.AzureEnterpriseApp == nil {
					results.RemoteInfo.AzureEnterpriseApp = nil
				} else {
					results.RemoteInfo.AzureEnterpriseApp = &tfTypes.AzureEnterpriseApp{}
					results.RemoteInfo.AzureEnterpriseApp.ResourceID = types.StringValue(resultsItem.RemoteInfo.AzureEnterpriseApp.ResourceID)
				}
				if resultsItem.RemoteInfo.AzureEntraIDRole == nil {
					results.RemoteInfo.AzureEntraIDRole = nil
				} else {
					results.RemoteInfo.AzureEntraIDRole = &tfTypes.AzureEnterpriseApp{}
					results.RemoteInfo.AzureEntraIDRole.ResourceID = types.StringValue(resultsItem.RemoteInfo.AzureEntraIDRole.ResourceID)
				}
				if resultsItem.RemoteInfo.AzureManagementGroup == nil {
					results.RemoteInfo.AzureManagementGroup = nil
				} else {
					results.RemoteInfo.AzureManagementGroup = &tfTypes.AzureEnterpriseApp{}
					results.RemoteInfo.AzureManagementGroup.ResourceID = types.StringValue(resultsItem.RemoteInfo.AzureManagementGroup.ResourceID)
				}
				if resultsItem.RemoteInfo.AzureResourceGroup == nil {
					results.RemoteInfo.AzureResourceGroup = nil
				} else {
					results.RemoteInfo.AzureResourceGroup = &tfTypes.AzureEnterpriseApp{}
					results.RemoteInfo.AzureResourceGroup.ResourceID = types.StringValue(resultsItem.RemoteInfo.AzureResourceGroup.ResourceID)
				}
				if resultsItem.RemoteInfo.AzureSQLDatabase == nil {
					results.RemoteInfo.AzureSQLDatabase = nil
				} else {
					results.RemoteInfo.AzureSQLDatabase = &tfTypes.AzureEnterpriseApp{}
					results.RemoteInfo.AzureSQLDatabase.ResourceID = types.StringValue(resultsItem.RemoteInfo.AzureSQLDatabase.ResourceID)
				}
				if resultsItem.RemoteInfo.AzureSQLManagedDatabase == nil {
					results.RemoteInfo.AzureSQLManagedDatabase = nil
				} else {
					results.RemoteInfo.AzureSQLManagedDatabase = &tfTypes.AzureEnterpriseApp{}
					results.RemoteInfo.AzureSQLManagedDatabase.ResourceID = types.StringValue(resultsItem.RemoteInfo.AzureSQLManagedDatabase.ResourceID)
				}
				if resultsItem.RemoteInfo.AzureSQLManagedInstance == nil {
					results.RemoteInfo.AzureSQLManagedInstance = nil
				} else {
					results.RemoteInfo.AzureSQLManagedInstance = &tfTypes.AzureEnterpriseApp{}
					results.RemoteInfo.AzureSQLManagedInstance.ResourceID = types.StringValue(resultsItem.RemoteInfo.AzureSQLManagedInstance.ResourceID)
				}
				if resultsItem.RemoteInfo.AzureSQLServer == nil {
					results.RemoteInfo.AzureSQLServer = nil
				} else {
					results.RemoteInfo.AzureSQLServer = &tfTypes.AzureEnterpriseApp{}
					results.RemoteInfo.AzureSQLServer.ResourceID = types.StringValue(resultsItem.RemoteInfo.AzureSQLServer.ResourceID)
				}
				if resultsItem.RemoteInfo.AzureStorageAccount == nil {
					results.RemoteInfo.AzureStorageAccount = nil
				} else {
					results.RemoteInfo.AzureStorageAccount = &tfTypes.AzureEnterpriseApp{}
					results.RemoteInfo.AzureStorageAccount.ResourceID = types.StringValue(resultsItem.RemoteInfo.AzureStorageAccount.ResourceID)
				}
				if resultsItem.RemoteInfo.AzureStorageContainer == nil {
					results.RemoteInfo.AzureStorageContainer = nil
				} else {
					results.RemoteInfo.AzureStorageContainer = &tfTypes.AzureEnterpriseApp{}
					results.RemoteInfo.AzureStorageContainer.ResourceID = types.StringValue(resultsItem.RemoteInfo.AzureStorageContainer.ResourceID)
				}
				if resultsItem.RemoteInfo.AzureSubscription == nil {
					results.RemoteInfo.AzureSubscription = nil
				} else {
					results.RemoteInfo.AzureSubscription = &tfTypes.AzureEnterpriseApp{}
					results.RemoteInfo.AzureSubscription.ResourceID = types.StringValue(resultsItem.RemoteInfo.AzureSubscription.ResourceID)
				}
				if resultsItem.RemoteInfo.AzureUserAssignedManagedIdentity == nil {
					results.RemoteInfo.AzureUserAssignedManagedIdentity = nil
				} else {
					results.RemoteInfo.AzureUserAssignedManagedIdentity = &tfTypes.AzureEnterpriseApp{}
					results.RemoteInfo.AzureUserAssignedManagedIdentity.ResourceID = types.StringValue(resultsItem.RemoteInfo.AzureUserAssignedManagedIdentity.ResourceID)
				}
				if resultsItem.RemoteInfo.AzureVirtualMachine == nil {
					results.RemoteInfo.AzureVirtualMachine = nil
				} else {
					results.RemoteInfo.AzureVirtualMachine = &tfTypes.AzureEnterpriseApp{}
					results.RemoteInfo.AzureVirtualMachine.ResourceID = types.StringValue(resultsItem.RemoteInfo.AzureVirtualMachine.ResourceID)
				}
				if resultsItem.RemoteInfo.CoupaRole == nil {
					results.RemoteInfo.CoupaRole = nil
				} else {
					results.RemoteInfo.CoupaRole = &tfTypes.SnowflakeRole{}
					results.RemoteInfo.CoupaRole.RoleID = types.StringValue(resultsItem.RemoteInfo.CoupaRole.RoleID)
				}
				if resultsItem.RemoteInfo.CursorOrganization == nil {
					results.RemoteInfo.CursorOrganization = nil
				} else {
					results.RemoteInfo.CursorOrganization = &tfTypes.CursorOrganization{}
					results.RemoteInfo.CursorOrganization.OrgID = types.StringValue(resultsItem.RemoteInfo.CursorOrganization.OrgID)
				}
				if resultsItem.RemoteInfo.CustomConnector == nil {
					results.RemoteInfo.CustomConnector = nil
				} else {
					results.RemoteInfo.CustomConnector = &tfTypes.CustomConnector{}
					results.RemoteInfo.CustomConnector.CanHaveUsageEvents = types.BoolValue(resultsItem.RemoteInfo.CustomConnector.CanHaveUsageEvents)
					results.RemoteInfo.CustomConnector.RemoteResourceID = types.StringValue(resultsItem.RemoteInfo.CustomConnector.RemoteResourceID)
				}
				if resultsItem.RemoteInfo.DatastaxAstraRole == nil {
					results.RemoteInfo.DatastaxAstraRole = nil
				} else {
					results.RemoteInfo.DatastaxAstraRole = &tfTypes.SnowflakeRole{}
					results.RemoteInfo.DatastaxAstraRole.RoleID = types.StringValue(resultsItem.RemoteInfo.DatastaxAstraRole.RoleID)
				}
				if resultsItem.RemoteInfo.GcpBigQueryDataset == nil {
					results.RemoteInfo.GcpBigQueryDataset = nil
				} else {
					results.RemoteInfo.GcpBigQueryDataset = &tfTypes.GcpBigQueryDataset{}
					results.RemoteInfo.GcpBigQueryDataset.DatasetID = types.StringValue(resultsItem.RemoteInfo.GcpBigQueryDataset.DatasetID)
					results.RemoteInfo.GcpBigQueryDataset.ProjectID = types.StringValue(resultsItem.RemoteInfo.GcpBigQueryDataset.ProjectID)
				}
				if resultsItem.RemoteInfo.GcpBigQueryTable == nil {
					results.RemoteInfo.GcpBigQueryTable = nil
				} else {
					results.RemoteInfo.GcpBigQueryTable = &tfTypes.GcpBigQueryTable{}
					results.RemoteInfo.GcpBigQueryTable.DatasetID = types.StringValue(resultsItem.RemoteInfo.GcpBigQueryTable.DatasetID)
					results.RemoteInfo.GcpBigQueryTable.ProjectID = types.StringValue(resultsItem.RemoteInfo.GcpBigQueryTable.ProjectID)
					results.RemoteInfo.GcpBigQueryTable.TableID = types.StringValue(resultsItem.RemoteInfo.GcpBigQueryTable.TableID)
				}
				if resultsItem.RemoteInfo.GcpBucket == nil {
					results.RemoteInfo.GcpBucket = nil
				} else {
					results.RemoteInfo.GcpBucket = &tfTypes.GcpBucket{}
					results.RemoteInfo.GcpBucket.BucketID = types.StringValue(resultsItem.RemoteInfo.GcpBucket.BucketID)
				}
				if resultsItem.RemoteInfo.GcpComputeInstance == nil {
					results.RemoteInfo.GcpComputeInstance = nil
				} else {
					results.RemoteInfo.GcpComputeInstance = &tfTypes.GcpComputeInstance{}
					results.RemoteInfo.GcpComputeInstance.InstanceID = types.StringValue(resultsItem.RemoteInfo.GcpComputeInstance.InstanceID)
					results.RemoteInfo.GcpComputeInstance.ProjectID = types.StringValue(resultsItem.RemoteInfo.GcpComputeInstance.ProjectID)
					results.RemoteInfo.GcpComputeInstance.Zone = types.StringValue(resultsItem.RemoteInfo.GcpComputeInstance.Zone)
				}
				if resultsItem.RemoteInfo.GcpFolder == nil {
					results.RemoteInfo.GcpFolder = nil
				} else {
					results.RemoteInfo.GcpFolder = &tfTypes.GcpFolder{}
					results.RemoteInfo.GcpFolder.FolderID = types.StringValue(resultsItem.RemoteInfo.GcpFolder.FolderID)
				}
				if resultsItem.RemoteInfo.GcpGkeCluster == nil {
					results.RemoteInfo.GcpGkeCluster = nil
				} else {
					results.RemoteInfo.GcpGkeCluster = &tfTypes.GcpGkeCluster{}
					results.RemoteInfo.GcpGkeCluster.ClusterName = types.StringValue(resultsItem.RemoteInfo.GcpGkeCluster.ClusterName)
				}
				if resultsItem.RemoteInfo.GcpOrganization == nil {
					results.RemoteInfo.GcpOrganization = nil
				} else {
					results.RemoteInfo.GcpOrganization = &tfTypes.GcpOrganization{}
					results.RemoteInfo.GcpOrganization.OrganizationID = types.StringValue(resultsItem.RemoteInfo.GcpOrganization.OrganizationID)
				}
				if resultsItem.RemoteInfo.GcpProject == nil {
					results.RemoteInfo.GcpProject = nil
				} else {
					results.RemoteInfo.GcpProject = &tfTypes.GcpProject{}
					results.RemoteInfo.GcpProject.ProjectID = types.StringValue(resultsItem.RemoteInfo.GcpProject.ProjectID)
				}
				if resultsItem.RemoteInfo.GcpServiceAccount == nil {
					results.RemoteInfo.GcpServiceAccount = nil
				} else {
					results.RemoteInfo.GcpServiceAccount = &tfTypes.GcpServiceAccount{}
					results.RemoteInfo.GcpServiceAccount.Email = types.StringValue(resultsItem.RemoteInfo.GcpServiceAccount.Email)
					results.RemoteInfo.GcpServiceAccount.ProjectID = types.StringValue(resultsItem.RemoteInfo.GcpServiceAccount.ProjectID)
					results.RemoteInfo.GcpServiceAccount.ServiceAccountID = types.StringValue(resultsItem.RemoteInfo.GcpServiceAccount.ServiceAccountID)
				}
				if resultsItem.RemoteInfo.GcpSQLInstance == nil {
					results.RemoteInfo.GcpSQLInstance = nil
				} else {
					results.RemoteInfo.GcpSQLInstance = &tfTypes.GcpSQLInstance{}
					results.RemoteInfo.GcpSQLInstance.InstanceID = types.StringValue(resultsItem.RemoteInfo.GcpSQLInstance.InstanceID)
					results.RemoteInfo.GcpSQLInstance.ProjectID = types.StringValue(resultsItem.RemoteInfo.GcpSQLInstance.ProjectID)
				}
				if resultsItem.RemoteInfo.GithubOrg == nil {
					results.RemoteInfo.GithubOrg = nil
				} else {
					results.RemoteInfo.GithubOrg = &tfTypes.GithubOrg{}
					results.RemoteInfo.GithubOrg.OrgName = types.StringValue(resultsItem.RemoteInfo.GithubOrg.OrgName)
				}
				if resultsItem.RemoteInfo.GithubOrgRole == nil {
					results.RemoteInfo.GithubOrgRole = nil
				} else {
					results.RemoteInfo.GithubOrgRole = &tfTypes.SnowflakeRole{}
					results.RemoteInfo.GithubOrgRole.RoleID = types.StringValue(resultsItem.RemoteInfo.GithubOrgRole.RoleID)
				}
				if resultsItem.RemoteInfo.GithubRepo == nil {
					results.RemoteInfo.GithubRepo = nil
				} else {
					results.RemoteInfo.GithubRepo = &tfTypes.GithubRepo{}
					results.RemoteInfo.GithubRepo.RepoName = types.StringValue(resultsItem.RemoteInfo.GithubRepo.RepoName)
				}
				if resultsItem.RemoteInfo.GitlabProject == nil {
					results.RemoteInfo.GitlabProject = nil
				} else {
					results.RemoteInfo.GitlabProject = &tfTypes.GcpProject{}
					results.RemoteInfo.GitlabProject.ProjectID = types.StringValue(resultsItem.RemoteInfo.GitlabProject.ProjectID)
				}
				if resultsItem.RemoteInfo.GoogleWorkspaceRole == nil {
					results.RemoteInfo.GoogleWorkspaceRole = nil
				} else {
					results.RemoteInfo.GoogleWorkspaceRole = &tfTypes.SnowflakeRole{}
					results.RemoteInfo.GoogleWorkspaceRole.RoleID = types.StringValue(resultsItem.RemoteInfo.GoogleWorkspaceRole.RoleID)
				}
				if resultsItem.RemoteInfo.OktaApp == nil {
					results.RemoteInfo.OktaApp = nil
				} else {
					results.RemoteInfo.OktaApp = &tfTypes.OktaApp{}
					results.RemoteInfo.OktaApp.AppID = types.StringValue(resultsItem.RemoteInfo.OktaApp.AppID)
				}
				if resultsItem.RemoteInfo.OktaCustomRole == nil {
					results.RemoteInfo.OktaCustomRole = nil
				} else {
					results.RemoteInfo.OktaCustomRole = &tfTypes.SnowflakeRole{}
					results.RemoteInfo.OktaCustomRole.RoleID = types.StringValue(resultsItem.RemoteInfo.OktaCustomRole.RoleID)
				}
				if resultsItem.RemoteInfo.OktaStandardRole == nil {
					results.RemoteInfo.OktaStandardRole = nil
				} else {
					results.RemoteInfo.OktaStandardRole = &tfTypes.OktaStandardRole{}
					results.RemoteInfo.OktaStandardRole.RoleType = types.StringValue(resultsItem.RemoteInfo.OktaStandardRole.RoleType)
				}
				if resultsItem.RemoteInfo.OpenaiPlatformProject == nil {
					results.RemoteInfo.OpenaiPlatformProject = nil
				} else {
					results.RemoteInfo.OpenaiPlatformProject = &tfTypes.GcpProject{}
					results.RemoteInfo.OpenaiPlatformProject.ProjectID = types.StringValue(resultsItem.RemoteInfo.OpenaiPlatformProject.ProjectID)
				}
				if resultsItem.RemoteInfo.OpenaiPlatformServiceAccount == nil {
					results.RemoteInfo.OpenaiPlatformServiceAccount = nil
				} else {
					results.RemoteInfo.OpenaiPlatformServiceAccount = &tfTypes.OpenaiPlatformServiceAccount{}
					results.RemoteInfo.OpenaiPlatformServiceAccount.ProjectID = types.StringValue(resultsItem.RemoteInfo.OpenaiPlatformServiceAccount.ProjectID)
					results.RemoteInfo.OpenaiPlatformServiceAccount.ServiceAccountID = types.StringValue(resultsItem.RemoteInfo.OpenaiPlatformServiceAccount.ServiceAccountID)
				}
				if resultsItem.RemoteInfo.OracleFusionRole == nil {
					results.RemoteInfo.OracleFusionRole = nil
				} else {
					results.RemoteInfo.OracleFusionRole = &tfTypes.SnowflakeRole{}
					results.RemoteInfo.OracleFusionRole.RoleID = types.StringValue(resultsItem.RemoteInfo.OracleFusionRole.RoleID)
				}
				if resultsItem.RemoteInfo.PagerdutyRole == nil {
					results.RemoteInfo.PagerdutyRole = nil
				} else {
					results.RemoteInfo.PagerdutyRole = &tfTypes.PagerdutyRole{}
					results.RemoteInfo.PagerdutyRole.RoleName = types.StringValue(resultsItem.RemoteInfo.PagerdutyRole.RoleName)
				}
				if resultsItem.RemoteInfo.SalesforcePermissionSet == nil {
					results.RemoteInfo.SalesforcePermissionSet = nil
				} else {
					results.RemoteInfo.SalesforcePermissionSet = &tfTypes.SalesforcePermissionSet{}
					results.RemoteInfo.SalesforcePermissionSet.PermissionSetID = types.StringValue(resultsItem.RemoteInfo.SalesforcePermissionSet.PermissionSetID)
				}
				if resultsItem.RemoteInfo.SalesforceProfile == nil {
					results.RemoteInfo.SalesforceProfile = nil
				} else {
					results.RemoteInfo.SalesforceProfile = &tfTypes.SalesforceProfile{}
					results.RemoteInfo.SalesforceProfile.ProfileID = types.StringValue(resultsItem.RemoteInfo.SalesforceProfile.ProfileID)
					results.RemoteInfo.SalesforceProfile.UserLicenseID = types.StringValue(resultsItem.RemoteInfo.SalesforceProfile.UserLicenseID)
				}
				if resultsItem.RemoteInfo.SalesforceRole == nil {
					results.RemoteInfo.SalesforceRole = nil
				} else {
					results.RemoteInfo.SalesforceRole = &tfTypes.SnowflakeRole{}
					results.RemoteInfo.SalesforceRole.RoleID = types.StringValue(resultsItem.RemoteInfo.SalesforceRole.RoleID)
				}
				if resultsItem.RemoteInfo.TeleportRole == nil {
					results.RemoteInfo.TeleportRole = nil
				} else {
					results.RemoteInfo.TeleportRole = &tfTypes.PagerdutyRole{}
					results.RemoteInfo.TeleportRole.RoleName = types.StringValue(resultsItem.RemoteInfo.TeleportRole.RoleName)
				}
			}
			results.RequestConfigurations = []tfTypes.RequestConfiguration{}

			for _, requestConfigurationsItem := range resultsItem.RequestConfigurations {
				var requestConfigurations tfTypes.RequestConfiguration

				requestConfigurations.AllowRequests = types.BoolValue(requestConfigurationsItem.AllowRequests)
				requestConfigurations.AutoApproval = types.BoolValue(requestConfigurationsItem.AutoApproval)
				if requestConfigurationsItem.Condition == nil {
					requestConfigurations.Condition = nil
				} else {
					requestConfigurations.Condition = &tfTypes.Condition{}
					requestConfigurations.Condition.GroupIds = make([]types.String, 0, len(requestConfigurationsItem.Condition.GroupIds))
					for _, v := range requestConfigurationsItem.Condition.GroupIds {
						requestConfigurations.Condition.GroupIds = append(requestConfigurations.Condition.GroupIds, types.StringValue(v))
					}
					requestConfigurations.Condition.RoleRemoteIds = make([]types.String, 0, len(requestConfigurationsItem.Condition.RoleRemoteIds))
					for _, v := range requestConfigurationsItem.Condition.RoleRemoteIds {
						requestConfigurations.Condition.RoleRemoteIds = append(requestConfigurations.Condition.RoleRemoteIds, types.StringValue(v))
					}
				}
				requestConfigurations.ExtensionsDurationInMinutes = types.Int64PointerValue(requestConfigurationsItem.ExtensionsDurationInMinutes)
				requestConfigurations.MaxDuration = types.Int64PointerValue(requestConfigurationsItem.MaxDuration)
				requestConfigurations.Priority = types.Int64Value(requestConfigurationsItem.Priority)
				requestConfigurations.RecommendedDuration = types.Int64PointerValue(requestConfigurationsItem.RecommendedDuration)
				requestConfigurations.RequestTemplateID = types.StringPointerValue(requestConfigurationsItem.RequestTemplateID)
				requestConfigurations.RequireMfaToRequest = types.BoolValue(requestConfigurationsItem.RequireMfaToRequest)
				requestConfigurations.RequireSupportTicket = types.BoolValue(requestConfigurationsItem.RequireSupportTicket)
				requestConfigurations.ReviewerStages = []tfTypes.ReviewerStage{}

				for _, reviewerStagesItem := range requestConfigurationsItem.ReviewerStages {
					var reviewerStages tfTypes.ReviewerStage

					if reviewerStagesItem.Operator != nil {
						reviewerStages.Operator = types.StringValue(string(*reviewerStagesItem.Operator))
					} else {
						reviewerStages.Operator = types.StringNull()
					}
					reviewerStages.OwnerIds = make([]types.String, 0, len(reviewerStagesItem.OwnerIds))
					for _, v := range reviewerStagesItem.OwnerIds {
						reviewerStages.OwnerIds = append(reviewerStages.OwnerIds, types.StringValue(v))
					}
					reviewerStages.RequireAdminApproval = types.BoolPointerValue(reviewerStagesItem.RequireAdminApproval)
					reviewerStages.RequireManagerApproval = types.BoolPointerValue(reviewerStagesItem.RequireManagerApproval)

					requestConfigurations.ReviewerStages = append(requestConfigurations.ReviewerStages, reviewerStages)
				}

				results.RequestConfigurations = append(results.RequestConfigurations, requestConfigurations)
			}
			results.RequireMfaToApprove = types.BoolPointerValue(resultsItem.RequireMfaToApprove)
			results.RequireMfaToConnect = types.BoolPointerValue(resultsItem.RequireMfaToConnect)
			if resultsItem.ResourceType != nil {
				results.ResourceType = types.StringValue(string(*resultsItem.ResourceType))
			} else {
				results.ResourceType = types.StringNull()
			}
			if resultsItem.RiskSensitivity != nil {
				results.RiskSensitivity = types.StringValue(string(*resultsItem.RiskSensitivity))
			} else {
				results.RiskSensitivity = types.StringNull()
			}
			if resultsItem.RiskSensitivityOverride != nil {
				results.RiskSensitivityOverride = types.StringValue(string(*resultsItem.RiskSensitivityOverride))
			} else {
				results.RiskSensitivityOverride = types.StringNull()
			}
			if resultsItem.TicketPropagation == nil {
				results.TicketPropagation = nil
			} else {
				results.TicketPropagation = &tfTypes.TicketPropagationConfiguration{}
				results.TicketPropagation.EnabledOnGrant = types.BoolValue(resultsItem.TicketPropagation.EnabledOnGrant)
				results.TicketPropagation.EnabledOnRevocation = types.BoolValue(resultsItem.TicketPropagation.EnabledOnRevocation)
				results.TicketPropagation.TicketProjectID = types.StringPointerValue(resultsItem.TicketPropagation.TicketProjectID)
				if resultsItem.TicketPropagation.TicketProvider != nil {
					results.TicketPropagation.TicketProvider = types.StringValue(string(*resultsItem.TicketPropagation.TicketProvider))
				} else {
					results.TicketPropagation.TicketProvider = types.StringNull()
				}
			}

			r.Results = append(r.Results, results)
		}
	}

	return diags
}

func (r *ResourcesListDataSourceModel) ToOperationsGetResourcesRequest(ctx context.Context) (*operations.GetResourcesRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	ancestorResourceID := new(string)
	if !r.AncestorResourceID.IsUnknown() && !r.AncestorResourceID.IsNull() {
		*ancestorResourceID = r.AncestorResourceID.ValueString()
	} else {
		ancestorResourceID = nil
	}
	cursor := new(string)
	if !r.Cursor.IsUnknown() && !r.Cursor.IsNull() {
		*cursor = r.Cursor.ValueString()
	} else {
		cursor = nil
	}
	pageSize := new(int64)
	if !r.PageSize.IsUnknown() && !r.PageSize.IsNull() {
		*pageSize = r.PageSize.ValueInt64()
	} else {
		pageSize = nil
	}
	parentResourceID := new(string)
	if !r.ParentResourceID.IsUnknown() && !r.ParentResourceID.IsNull() {
		*parentResourceID = r.ParentResourceID.ValueString()
	} else {
		parentResourceID = nil
	}
	remoteID := new(string)
	if !r.RemoteID.IsUnknown() && !r.RemoteID.IsNull() {
		*remoteID = r.RemoteID.ValueString()
	} else {
		remoteID = nil
	}
	resourceIds := make([]string, 0, len(r.ResourceIds))
	for _, resourceIdsItem := range r.ResourceIds {
		resourceIds = append(resourceIds, resourceIdsItem.ValueString())
	}
	resourceName := new(string)
	if !r.ResourceName.IsUnknown() && !r.ResourceName.IsNull() {
		*resourceName = r.ResourceName.ValueString()
	} else {
		resourceName = nil
	}
	resourceTypeFilter := new(shared.ResourceTypeEnum)
	if !r.ResourceTypeFilter.IsUnknown() && !r.ResourceTypeFilter.IsNull() {
		*resourceTypeFilter = shared.ResourceTypeEnum(r.ResourceTypeFilter.ValueString())
	} else {
		resourceTypeFilter = nil
	}
	out := operations.GetResourcesRequest{
		AncestorResourceID: ancestorResourceID,
		Cursor:             cursor,
		PageSize:           pageSize,
		ParentResourceID:   parentResourceID,
		RemoteID:           remoteID,
		ResourceIds:        resourceIds,
		ResourceName:       resourceName,
		ResourceTypeFilter: resourceTypeFilter,
	}

	return &out, diags
}
