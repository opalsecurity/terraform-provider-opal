// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/shared"
)

func (r *ResourceMessageChannelListDataSourceModel) RefreshFromSharedMessageChannelList(ctx context.Context, resp *shared.MessageChannelList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Channels = []tfTypes.MessageChannel{}

		for _, channelsItem := range resp.Channels {
			var channels tfTypes.MessageChannel

			channels.ID = types.StringValue(channelsItem.ID)
			channels.IsPrivate = types.BoolPointerValue(channelsItem.IsPrivate)
			channels.Name = types.StringPointerValue(channelsItem.Name)
			channels.RemoteID = types.StringPointerValue(channelsItem.RemoteID)
			if channelsItem.ThirdPartyProvider != nil {
				channels.ThirdPartyProvider = types.StringValue(string(*channelsItem.ThirdPartyProvider))
			} else {
				channels.ThirdPartyProvider = types.StringNull()
			}

			r.Channels = append(r.Channels, channels)
		}
		r.MessageChannelIds = make([]types.String, 0, len(resp.MessageChannelIds))
		for _, v := range resp.MessageChannelIds {
			r.MessageChannelIds = append(r.MessageChannelIds, types.StringValue(v))
		}
	}

	return diags
}

func (r *ResourceMessageChannelListDataSourceModel) ToOperationsGetResourceMessageChannelsRequest(ctx context.Context) (*operations.GetResourceMessageChannelsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var resourceID string
	resourceID = r.ResourceID.ValueString()

	out := operations.GetResourceMessageChannelsRequest{
		ResourceID: resourceID,
	}

	return &out, diags
}
