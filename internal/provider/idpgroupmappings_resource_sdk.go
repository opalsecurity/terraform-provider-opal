// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/shared"
)

func (r *IdpGroupMappingsResourceModel) ToOperationsUpdateIdpGroupMappingsRequestBody(ctx context.Context) (*operations.UpdateIdpGroupMappingsRequestBody, diag.Diagnostics) {
	var diags diag.Diagnostics

	mappings := make([]operations.Mappings, 0, len(r.Mappings))
	for _, mappingsItem := range r.Mappings {
		alias := new(string)
		if !mappingsItem.Alias.IsUnknown() && !mappingsItem.Alias.IsNull() {
			*alias = mappingsItem.Alias.ValueString()
		} else {
			alias = nil
		}
		groupID := new(string)
		if !mappingsItem.GroupID.IsUnknown() && !mappingsItem.GroupID.IsNull() {
			*groupID = mappingsItem.GroupID.ValueString()
		} else {
			groupID = nil
		}
		hiddenFromEndUser := new(bool)
		if !mappingsItem.HiddenFromEndUser.IsUnknown() && !mappingsItem.HiddenFromEndUser.IsNull() {
			*hiddenFromEndUser = mappingsItem.HiddenFromEndUser.ValueBool()
		} else {
			hiddenFromEndUser = nil
		}
		mappings = append(mappings, operations.Mappings{
			Alias:             alias,
			GroupID:           groupID,
			HiddenFromEndUser: hiddenFromEndUser,
		})
	}
	out := operations.UpdateIdpGroupMappingsRequestBody{
		Mappings: mappings,
	}

	return &out, diags
}

func (r *IdpGroupMappingsResourceModel) ToOperationsUpdateIdpGroupMappingsRequest(ctx context.Context) (*operations.UpdateIdpGroupMappingsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	requestBody, requestBodyDiags := r.ToOperationsUpdateIdpGroupMappingsRequestBody(ctx)
	diags.Append(requestBodyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	var appResourceID string
	appResourceID = r.AppResourceID.ValueString()

	out := operations.UpdateIdpGroupMappingsRequest{
		RequestBody:   *requestBody,
		AppResourceID: appResourceID,
	}

	return &out, diags
}

func (r *IdpGroupMappingsResourceModel) ToOperationsGetIdpGroupMappingsRequest(ctx context.Context) (*operations.GetIdpGroupMappingsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var appResourceID string
	appResourceID = r.AppResourceID.ValueString()

	out := operations.GetIdpGroupMappingsRequest{
		AppResourceID: appResourceID,
	}

	return &out, diags
}

func (r *IdpGroupMappingsResourceModel) RefreshFromSharedIdpGroupMappingList(ctx context.Context, resp *shared.IdpGroupMappingList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Mappings = []tfTypes.Mappings{}
		if len(r.Mappings) > len(resp.Mappings) {
			r.Mappings = r.Mappings[:len(resp.Mappings)]
		}
		for mappingsCount, mappingsItem := range resp.Mappings {
			var mappings tfTypes.Mappings
			mappings.Alias = types.StringPointerValue(mappingsItem.Alias)
			mappings.GroupID = types.StringValue(mappingsItem.GroupID)
			mappings.HiddenFromEndUser = types.BoolValue(mappingsItem.HiddenFromEndUser)
			if mappingsCount+1 > len(r.Mappings) {
				r.Mappings = append(r.Mappings, mappings)
			} else {
				r.Mappings[mappingsCount].Alias = mappings.Alias
				r.Mappings[mappingsCount].GroupID = mappings.GroupID
				r.Mappings[mappingsCount].HiddenFromEndUser = mappings.HiddenFromEndUser
			}
		}
	}

	return diags
}
