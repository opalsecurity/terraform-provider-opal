// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/provider/typeconvert"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/shared"
)

func (r *GroupUserResourceModel) RefreshFromSharedGroupUser(ctx context.Context, resp *shared.GroupUser) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.AccessLevel == nil {
			r.AccessLevel = nil
		} else {
			r.AccessLevel = &tfTypes.ResourceAccessLevel{}
			r.AccessLevel.AccessLevelName = types.StringValue(resp.AccessLevel.AccessLevelName)
			r.AccessLevel.AccessLevelRemoteID = types.StringValue(resp.AccessLevel.AccessLevelRemoteID)
		}
		r.Email = types.StringValue(resp.Email)
		r.ExpirationDate = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ExpirationDate))
		r.FullName = types.StringValue(resp.FullName)
		r.GroupID = types.StringValue(resp.GroupID)
		if resp.PropagationStatus == nil {
			r.PropagationStatus = nil
		} else {
			r.PropagationStatus = &tfTypes.PropagationStatus{}
			r.PropagationStatus.Status = types.StringValue(string(resp.PropagationStatus.Status))
		}
		r.UserID = types.StringValue(resp.UserID)
	}

	return diags
}

func (r *GroupUserResourceModel) ToOperationsCreateGroupUserRequest(ctx context.Context) (*operations.CreateGroupUserRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	requestBody, requestBodyDiags := r.ToOperationsCreateGroupUserRequestBody(ctx)
	diags.Append(requestBodyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	var groupID string
	groupID = r.GroupID.ValueString()

	var userID string
	userID = r.UserID.ValueString()

	out := operations.CreateGroupUserRequest{
		RequestBody: *requestBody,
		GroupID:     groupID,
		UserID:      userID,
	}

	return &out, diags
}

func (r *GroupUserResourceModel) ToOperationsCreateGroupUserRequestBody(ctx context.Context) (*operations.CreateGroupUserRequestBody, diag.Diagnostics) {
	var diags diag.Diagnostics

	accessLevelRemoteID := new(string)
	if !r.AccessLevelRemoteID.IsUnknown() && !r.AccessLevelRemoteID.IsNull() {
		*accessLevelRemoteID = r.AccessLevelRemoteID.ValueString()
	} else {
		accessLevelRemoteID = nil
	}
	durationMinutes := new(operations.DurationMinutes)
	if !r.DurationMinutes.IsUnknown() && !r.DurationMinutes.IsNull() {
		*durationMinutes = operations.DurationMinutes(r.DurationMinutes.ValueInt64())
	} else {
		durationMinutes = nil
	}
	out := operations.CreateGroupUserRequestBody{
		AccessLevelRemoteID: accessLevelRemoteID,
		DurationMinutes:     durationMinutes,
	}

	return &out, diags
}

func (r *GroupUserResourceModel) ToOperationsDeleteGroupUserRequest(ctx context.Context) (*operations.DeleteGroupUserRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	var userID string
	userID = r.UserID.ValueString()

	out := operations.DeleteGroupUserRequest{
		GroupID: groupID,
		UserID:  userID,
	}

	return &out, diags
}
