// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/shared"
	"net/http"
	"os"
)

var _ provider.Provider = (*OpalProvider)(nil)
var _ provider.ProviderWithEphemeralResources = (*OpalProvider)(nil)

type OpalProvider struct {
	// version is set to the provider version on release, "dev" when the
	// provider is built and ran locally, and "test" when running acceptance
	// testing.
	version string
}

// OpalProviderModel describes the provider data model.
type OpalProviderModel struct {
	BearerAuth  types.String `tfsdk:"bearer_auth"`
	HTTPHeaders types.Map    `tfsdk:"http_headers"`
	ServerURL   types.String `tfsdk:"server_url"`
}

func (p *OpalProvider) Metadata(ctx context.Context, req provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "opal"
	resp.Version = p.version
}

func (p *OpalProvider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"bearer_auth": schema.StringAttribute{
				MarkdownDescription: `HTTP Bearer. Configurable via environment variable ` + "`" + `OPAL_AUTH_TOKEN` + "`" + `.`,
				Optional:            true,
				Sensitive:           true,
			},
			"http_headers": schema.MapAttribute{
				Description: `HTTP headers to include in all requests`,
				ElementType: types.StringType,
				Optional:    true,
			},
			"server_url": schema.StringAttribute{
				Description: `Server URL (defaults to https://api.opal.dev/v1)`,
				Optional:    true,
			},
		},
		MarkdownDescription: `Opal API: The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.`,
	}
}

func (p *OpalProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	var data OpalProviderModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	serverUrl := data.ServerURL.ValueString()

	if serverUrl == "" {
		serverUrl = "https://api.opal.dev/v1"
	}

	security := shared.Security{}

	if !data.BearerAuth.IsUnknown() {
		security.BearerAuth = data.BearerAuth.ValueString()
	}

	if bearerAuthEnvVar := os.Getenv("OPAL_AUTH_TOKEN"); security.BearerAuth == "" && bearerAuthEnvVar != "" {
		security.BearerAuth = bearerAuthEnvVar
	}

	if security.BearerAuth == "" {
		resp.Diagnostics.AddError(
			"Missing Provider Security Configuration",
			"Either the environment variable OPAL_AUTH_TOKEN or provider configuration bearer_auth attribute must be configured.",
		)
	}

	providerHTTPTransportOpts := ProviderHTTPTransportOpts{
		SetHeaders: make(map[string]string),
		Transport:  http.DefaultTransport,
	}

	resp.Diagnostics.Append(data.HTTPHeaders.ElementsAs(ctx, &providerHTTPTransportOpts.SetHeaders, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	httpClient := http.DefaultClient
	httpClient.Transport = NewProviderHTTPTransport(providerHTTPTransportOpts)

	opts := []sdk.SDKOption{
		sdk.WithServerURL(serverUrl),
		sdk.WithSecurity(security),
		sdk.WithClient(httpClient),
	}

	client := sdk.New(opts...)
	resp.DataSourceData = client
	resp.EphemeralResourceData = client
	resp.ResourceData = client
}

func (p *OpalProvider) Resources(ctx context.Context) []func() resource.Resource {
	return []func() resource.Resource{
		NewAccessRuleResource,
		NewBundleResource,
		NewBundleGroupResource,
		NewBundleResourceResource,
		NewConfigurationTemplateResource,
		NewGroupResource,
		NewGroupContainingGroupResource,
		NewGroupResourceListResource,
		NewGroupTagResource,
		NewGroupUserResource,
		NewIdpGroupMappingResource,
		NewIdpGroupMappingsResource,
		NewMessageChannelResource,
		NewOnCallScheduleResource,
		NewOwnerResource,
		NewResourceResource,
		NewResourceTagResource,
		NewScopedRolePermissionListResource,
		NewTagResource,
		NewTagUserResource,
	}
}

func (p *OpalProvider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{
		NewAccessRuleDataSource,
		NewAppDataSource,
		NewAppsDataSource,
		NewBundleDataSource,
		NewBundleVisibilityDataSource,
		NewConfigurationTemplateListDataSource,
		NewEventsDataSource,
		NewGroupDataSource,
		NewGroupListDataSource,
		NewGroupContainingGroupDataSource,
		NewGroupResourceListDataSource,
		NewGroupReviewersStagesListDataSource,
		NewGroupTagsDataSource,
		NewGroupUsersDataSource,
		NewIdpGroupMappingDataSource,
		NewIdpGroupMappingsDataSource,
		NewMessageChannelDataSource,
		NewMessageChannelListDataSource,
		NewOnCallScheduleDataSource,
		NewOnCallScheduleListDataSource,
		NewOwnerDataSource,
		NewOwnerFromNameDataSource,
		NewOwnersDataSource,
		NewPaginatedBundleGroupListDataSource,
		NewPaginatedBundleListDataSource,
		NewPaginatedBundleResourceListDataSource,
		NewRequestsDataSource,
		NewResourceDataSource,
		NewResourceMessageChannelListDataSource,
		NewResourceReviewersListDataSource,
		NewResourcesListDataSource,
		NewResourcesAccessStatusDataSource,
		NewResourcesUsersListDataSource,
		NewResourceTagsDataSource,
		NewResourceVisibilityDataSource,
		NewScopedRolePermissionListDataSource,
		NewSessionsDataSource,
		NewTagDataSource,
		NewTagsListDataSource,
		NewUarDataSource,
		NewUARSListDataSource,
		NewUserDataSource,
		NewUsersDataSource,
		NewUserTagsDataSource,
	}
}

func (p *OpalProvider) EphemeralResources(ctx context.Context) []func() ephemeral.EphemeralResource {
	return []func() ephemeral.EphemeralResource{}
}

func New(version string) func() provider.Provider {
	return func() provider.Provider {
		return &OpalProvider{
			version: version,
		}
	}
}
