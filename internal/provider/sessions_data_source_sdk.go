// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/typeconvert"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/shared"
)

func (r *SessionsDataSourceModel) RefreshFromSharedSessionsList(ctx context.Context, resp *shared.SessionsList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Next = types.StringPointerValue(resp.Next)
		r.Previous = types.StringPointerValue(resp.Previous)
		r.Results = []tfTypes.Session{}
		if len(r.Results) > len(resp.Results) {
			r.Results = r.Results[:len(resp.Results)]
		}
		for resultsCount, resultsItem := range resp.Results {
			var results tfTypes.Session
			results.AccessLevel.AccessLevelName = types.StringValue(resultsItem.AccessLevel.AccessLevelName)
			results.AccessLevel.AccessLevelRemoteID = types.StringValue(resultsItem.AccessLevel.AccessLevelRemoteID)
			results.ConnectionID = types.StringValue(resultsItem.ConnectionID)
			results.ExpirationDate = types.StringValue(typeconvert.TimeToString(resultsItem.ExpirationDate))
			results.ResourceID = types.StringValue(resultsItem.ResourceID)
			results.UserID = types.StringValue(resultsItem.UserID)
			if resultsCount+1 > len(r.Results) {
				r.Results = append(r.Results, results)
			} else {
				r.Results[resultsCount].AccessLevel = results.AccessLevel
				r.Results[resultsCount].ConnectionID = results.ConnectionID
				r.Results[resultsCount].ExpirationDate = results.ExpirationDate
				r.Results[resultsCount].ResourceID = results.ResourceID
				r.Results[resultsCount].UserID = results.UserID
			}
		}
	}

	return diags
}

func (r *SessionsDataSourceModel) ToOperationsGetSessionsRequest(ctx context.Context) (*operations.GetSessionsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var resourceID string
	resourceID = r.ResourceID.ValueString()

	userID := new(string)
	if !r.UserID.IsUnknown() && !r.UserID.IsNull() {
		*userID = r.UserID.ValueString()
	} else {
		userID = nil
	}
	out := operations.GetSessionsRequest{
		ResourceID: resourceID,
		UserID:     userID,
	}

	return &out, diags
}
