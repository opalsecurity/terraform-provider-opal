// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/shared"
	"time"
)

func (r *SessionsDataSourceModel) RefreshFromSharedSessionsList(resp *shared.SessionsList) {
	if resp != nil {
		r.Next = types.StringPointerValue(resp.Next)
		r.Previous = types.StringPointerValue(resp.Previous)
		r.Results = []tfTypes.Session{}
		if len(r.Results) > len(resp.Results) {
			r.Results = r.Results[:len(resp.Results)]
		}
		for resultsCount, resultsItem := range resp.Results {
			var results1 tfTypes.Session
			results1.AccessLevel.AccessLevelName = types.StringValue(resultsItem.AccessLevel.AccessLevelName)
			results1.AccessLevel.AccessLevelRemoteID = types.StringValue(resultsItem.AccessLevel.AccessLevelRemoteID)
			results1.ConnectionID = types.StringValue(resultsItem.ConnectionID)
			results1.ExpirationDate = types.StringValue(resultsItem.ExpirationDate.Format(time.RFC3339Nano))
			results1.ResourceID = types.StringValue(resultsItem.ResourceID)
			results1.UserID = types.StringValue(resultsItem.UserID)
			if resultsCount+1 > len(r.Results) {
				r.Results = append(r.Results, results1)
			} else {
				r.Results[resultsCount].AccessLevel = results1.AccessLevel
				r.Results[resultsCount].ConnectionID = results1.ConnectionID
				r.Results[resultsCount].ExpirationDate = results1.ExpirationDate
				r.Results[resultsCount].ResourceID = results1.ResourceID
				r.Results[resultsCount].UserID = results1.UserID
			}
		}
	}
}
