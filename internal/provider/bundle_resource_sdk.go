// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/shared"
	"time"
)

func (r *BundleResourceModel) ToSharedCreateBundleInfo() *shared.CreateBundleInfo {
	var adminOwnerID string
	adminOwnerID = r.AdminOwnerID.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var name string
	name = r.Name.ValueString()

	out := shared.CreateBundleInfo{
		AdminOwnerID: adminOwnerID,
		Description:  description,
		Name:         name,
	}
	return &out
}

func (r *BundleResourceModel) RefreshFromSharedBundle(resp *shared.Bundle) {
	if resp != nil {
		r.AdminOwnerID = types.StringPointerValue(resp.AdminOwnerID)
		r.BundleID = types.StringPointerValue(resp.BundleID)
		if resp.CreatedAt != nil {
			r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		} else {
			r.CreatedAt = types.StringNull()
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.Name = types.StringPointerValue(resp.Name)
		r.TotalNumGroups = types.Int64PointerValue(resp.TotalNumGroups)
		r.TotalNumItems = types.Int64PointerValue(resp.TotalNumItems)
		r.TotalNumResources = types.Int64PointerValue(resp.TotalNumResources)
		if resp.UpdatedAt != nil {
			r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		} else {
			r.UpdatedAt = types.StringNull()
		}
	}
}

func (r *BundleResourceModel) ToSharedVisibilityInfo() *shared.VisibilityInfo {
	visibility := shared.VisibilityTypeEnum(r.Visibility.ValueString())
	var visibilityGroupIds []string = []string{}
	for _, visibilityGroupIdsItem := range r.VisibilityGroupIds {
		visibilityGroupIds = append(visibilityGroupIds, visibilityGroupIdsItem.ValueString())
	}
	out := shared.VisibilityInfo{
		Visibility:         visibility,
		VisibilityGroupIds: visibilityGroupIds,
	}
	return &out
}

func (r *BundleResourceModel) RefreshFromSharedVisibilityInfo(resp *shared.VisibilityInfo) {
	if resp != nil {
		r.Visibility = types.StringValue(string(resp.Visibility))
		r.VisibilityGroupIds = make([]types.String, 0, len(resp.VisibilityGroupIds))
		for _, v := range resp.VisibilityGroupIds {
			r.VisibilityGroupIds = append(r.VisibilityGroupIds, types.StringValue(v))
		}
	}
}

func (r *BundleResourceModel) ToSharedBundleInput() *shared.BundleInput {
	adminOwnerID := new(string)
	if !r.AdminOwnerID.IsUnknown() && !r.AdminOwnerID.IsNull() {
		*adminOwnerID = r.AdminOwnerID.ValueString()
	} else {
		adminOwnerID = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	out := shared.BundleInput{
		AdminOwnerID: adminOwnerID,
		Description:  description,
		Name:         name,
	}
	return &out
}
