// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/typeconvert"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/shared"
)

func (r *ResourcesUsersListDataSourceModel) RefreshFromSharedResourceAccessUserList(ctx context.Context, resp *shared.ResourceAccessUserList) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Results = []tfTypes.ResourceAccessUser{}

		for _, resultsItem := range resp.Results {
			var results tfTypes.ResourceAccessUser

			results.AccessLevel.AccessLevelName = types.StringValue(resultsItem.AccessLevel.AccessLevelName)
			results.AccessLevel.AccessLevelRemoteID = types.StringValue(resultsItem.AccessLevel.AccessLevelRemoteID)
			results.Email = types.StringValue(resultsItem.Email)
			results.ExpirationDate = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resultsItem.ExpirationDate))
			results.FullName = types.StringValue(resultsItem.FullName)
			results.HasDirectAccess = types.BoolValue(resultsItem.HasDirectAccess)
			results.NumAccessPaths = types.Int32Value(int32(resultsItem.NumAccessPaths))
			if resultsItem.PropagationStatus == nil {
				results.PropagationStatus = nil
			} else {
				results.PropagationStatus = &tfTypes.PropagationStatus{}
				results.PropagationStatus.Status = types.StringValue(string(resultsItem.PropagationStatus.Status))
			}
			results.ResourceID = types.StringValue(resultsItem.ResourceID)
			results.UserID = types.StringValue(resultsItem.UserID)

			r.Results = append(r.Results, results)
		}
	}

	return diags
}

func (r *ResourcesUsersListDataSourceModel) ToOperationsGetResourceUsersRequest(ctx context.Context) (*operations.GetResourceUsersRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	limit := new(int64)
	if !r.Limit.IsUnknown() && !r.Limit.IsNull() {
		*limit = r.Limit.ValueInt64()
	} else {
		limit = nil
	}
	var resourceID string
	resourceID = r.ResourceID.ValueString()

	out := operations.GetResourceUsersRequest{
		Limit:      limit,
		ResourceID: resourceID,
	}

	return &out, diags
}
