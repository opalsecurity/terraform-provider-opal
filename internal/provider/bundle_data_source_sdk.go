// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/provider/typeconvert"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/operations"
	"github.com/opalsecurity/terraform-provider-opal/v3/internal/sdk/models/shared"
)

func (r *BundleDataSourceModel) RefreshFromSharedBundle(ctx context.Context, resp *shared.Bundle) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AdminOwnerID = types.StringPointerValue(resp.AdminOwnerID)
		r.BundleID = types.StringPointerValue(resp.BundleID)
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.Name = types.StringPointerValue(resp.Name)
		r.TotalNumGroups = types.Int64PointerValue(resp.TotalNumGroups)
		r.TotalNumItems = types.Int64PointerValue(resp.TotalNumItems)
		r.TotalNumResources = types.Int64PointerValue(resp.TotalNumResources)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *BundleDataSourceModel) RefreshFromSharedVisibilityInfo(ctx context.Context, resp *shared.VisibilityInfo) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Visibility = types.StringValue(string(resp.Visibility))
		r.VisibilityGroupIds = make([]types.String, 0, len(resp.VisibilityGroupIds))
		for _, v := range resp.VisibilityGroupIds {
			r.VisibilityGroupIds = append(r.VisibilityGroupIds, types.StringValue(v))
		}
	}

	return diags
}

func (r *BundleDataSourceModel) ToOperationsGetBundleRequest(ctx context.Context) (*operations.GetBundleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var bundleID string
	bundleID = r.BundleID.ValueString()

	out := operations.GetBundleRequest{
		BundleID: bundleID,
	}

	return &out, diags
}

func (r *BundleDataSourceModel) ToOperationsGetBundleVisibilityRequest(ctx context.Context) (*operations.GetBundleVisibilityRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var bundleID string
	bundleID = r.BundleID.ValueString()

	out := operations.GetBundleVisibilityRequest{
		BundleID: bundleID,
	}

	return &out, diags
}
